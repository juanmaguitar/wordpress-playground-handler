import { exposeAPI as g, PHPWorker as v, consumeAPI as W } from "@php-wasm/universal";
import { loadNodeRuntime as k, createNodeFsMountHandler as E } from "@php-wasm/node";
import { EmscriptenDownloadMonitor as D } from "@php-wasm/progress";
import { bootWordPress as F } from "@wp-playground/wordpress";
import { sprintf as I } from "@php-wasm/util";
import { parentPort as a } from "worker_threads";
import { rootCertificates as S } from "tls";
function u(t, e) {
  for (const o of e)
    t.mkdir(o.vfsPath), t.mount(o.vfsPath, E(o.hostPath));
}
function x(t, e, ...o) {
  console.log(
    performance.now().toFixed(6).padStart(15, "0"),
    t.toString().padStart(16, "0"),
    I(e, ...o)
  );
}
class A extends v {
  constructor(e) {
    super(void 0, e), this.booted = !1;
  }
  async boot({
    absoluteUrl: e,
    mountsBeforeWpInstall: o,
    mountsAfterWpInstall: P,
    phpVersion: f = "8.0",
    wordPressZip: c,
    sqliteIntegrationPluginZip: l,
    firstProcessId: i,
    processIdSpaceLength: h,
    dataSqlPath: w,
    followSymlinks: y,
    trace: b
  }) {
    if (this.booted)
      throw new Error("Playground already booted");
    this.booted = !0;
    let r = i;
    const _ = i + h - 1, d = W(a);
    await d.isConnected();
    try {
      const s = {
        WP_DEBUG: !0,
        WP_DEBUG_LOG: !0,
        WP_DEBUG_DISPLAY: !1
      }, p = await F({
        siteUrl: e,
        createPhpRuntime: async () => {
          const n = r;
          return r < _ ? r++ : r = i, await k(f, {
            emscriptenOptions: {
              fileLockManager: d,
              processId: n,
              trace: b ? x : void 0
            },
            followSymlinks: y
          });
        },
        wordPressZip: c !== void 0 ? new File([c], "wordpress.zip") : void 0,
        sqliteIntegrationPluginZip: l !== void 0 ? new File(
          [l],
          "sqlite-integration-plugin.zip"
        ) : void 0,
        sapiName: "cli",
        createFiles: {
          "/internal/shared/ca-bundle.crt": S.join(`
`)
        },
        constants: s,
        phpIniEntries: {
          "openssl.cafile": "/internal/shared/ca-bundle.crt",
          allow_url_fopen: "1",
          disable_functions: ""
        },
        hooks: {
          async beforeWordPressFiles(n) {
            u(n, o);
          }
        },
        cookieStore: !1,
        dataSqlPath: w
      });
      this.__internal_setRequestHandler(p);
      const m = await p.getPrimaryPhp();
      await this.setPrimaryPHP(m), u(m, P), H();
    } catch (s) {
      throw R(s), s;
    }
  }
  // Provide a named disposal method that can be invoked via comlink.
  async dispose() {
    await this[Symbol.asyncDispose]();
  }
}
const [H, R] = g(
  new A(new D()),
  void 0,
  a
);
a.postMessage("worker-script-initialized");
export {
  A as PlaygroundCliWorker
};
//# sourceMappingURL=worker-thread.js.map
