import { exposeAPI as k, PHPWorker as S, consumeAPI as _ } from "@php-wasm/universal";
import { loadNodeRuntime as N, createNodeFsMountHandler as W } from "@php-wasm/node";
import { EmscriptenDownloadMonitor as v } from "@php-wasm/progress";
import { bootWordPress as x } from "@wp-playground/wordpress";
import { parentPort as f } from "worker_threads";
import { rootCertificates as E } from "tls";
function I(r, ...o) {
  let e = "", n = 0;
  for (let i = 0; i < r.length; i++)
    if (r[i] === "%" && i + 1 < r.length) {
      i++;
      const a = r[i];
      switch (a) {
        case "s": {
          const t = o[n++];
          let s;
          if (typeof t == "object")
            try {
              s = JSON.stringify(
                t,
                // Represent bigint values as strings in JSON.stringify().
                (u, c) => typeof c == "bigint" ? `0x${c.toString(16)}` : c,
                2
              );
            } catch {
            }
          else
            s = String(t);
          e += s;
          break;
        }
        case "d": {
          const t = o[n++];
          typeof t == "bigint" ? e += t.toString() : e += Math.floor(Number(t));
          break;
        }
        case "f": {
          const t = o[n++];
          e += Number(t);
          break;
        }
        case "x": {
          const t = o[n++];
          typeof t == "bigint" ? e += t.toString(16) : e += Math.floor(Number(t)).toString(16);
          break;
        }
        case "%": {
          e += "%";
          break;
        }
        default:
          e += "%" + a;
      }
    } else
      e += r[i];
  return e;
}
function P(r, o) {
  for (const e of o)
    r.mkdir(e.vfsPath), r.mount(e.vfsPath, W(e.hostPath));
}
function D(r, o, ...e) {
  console.log(
    performance.now().toFixed(6).padStart(15, "0"),
    r.toString().padStart(16, "0"),
    I(o, ...e)
  );
}
class F extends S {
  constructor(o) {
    super(void 0, o), this.booted = !1;
  }
  async boot({
    absoluteUrl: o,
    mountsBeforeWpInstall: e,
    mountsAfterWpInstall: n,
    phpVersion: i = "8.0",
    wordPressZip: a,
    sqliteIntegrationPluginZip: t,
    firstProcessId: s,
    processIdSpaceLength: u,
    dataSqlPath: c,
    followSymlinks: g,
    trace: y
  }) {
    if (this.booted)
      throw new Error("Playground already booted");
    this.booted = !0;
    let l = s;
    const w = s + u - 1, m = _(f);
    await m.isConnected();
    try {
      const d = {
        WP_DEBUG: !0,
        WP_DEBUG_LOG: !0,
        WP_DEBUG_DISPLAY: !1
      }, h = await x({
        siteUrl: o,
        createPhpRuntime: async () => {
          const p = l;
          return l < w ? l++ : l = s, await N(i, {
            emscriptenOptions: {
              fileLockManager: m,
              processId: p,
              trace: y ? D : void 0
            },
            followSymlinks: g
          });
        },
        wordPressZip: a !== void 0 ? new File([a], "wordpress.zip") : void 0,
        sqliteIntegrationPluginZip: t !== void 0 ? new File(
          [t],
          "sqlite-integration-plugin.zip"
        ) : void 0,
        sapiName: "cli",
        createFiles: {
          "/internal/shared/ca-bundle.crt": E.join(`
`)
        },
        constants: d,
        phpIniEntries: {
          "openssl.cafile": "/internal/shared/ca-bundle.crt",
          allow_url_fopen: "1",
          disable_functions: ""
        },
        hooks: {
          async beforeWordPressFiles(p) {
            P(p, e);
          }
        },
        cookieStore: !1,
        dataSqlPath: c
      });
      this.__internal_setRequestHandler(h);
      const b = await h.getPrimaryPhp();
      await this.setPrimaryPHP(b), P(b, n), M();
    } catch (d) {
      throw A(d), d;
    }
  }
  // Provide a named disposal method that can be invoked via comlink.
  async dispose() {
    await this[Symbol.asyncDispose]();
  }
}
const [M, A] = k(
  new F(new v()),
  void 0,
  f
);
f.postMessage("worker-script-initialized");
//# sourceMappingURL=worker-thread-BQ8BezvJ.js.map
