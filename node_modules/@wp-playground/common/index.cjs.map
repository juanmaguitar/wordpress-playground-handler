{"version":3,"file":"index.cjs","sources":["../../../../packages/playground/common/src/create-memoized-fetch.ts","../../../../packages/playground/common/src/index.ts"],"sourcesContent":["export interface CacheEntry {\n\tresponsePromise: Promise<Response>;\n\tunlockedBodyStream?: ReadableStream<Uint8Array>;\n\tnextResponse: () => Promise<Response>;\n}\n\n/**\n * Creates a fetch function that memoizes the response stream.\n * Calling it twice will return a response with the same status,\n * headers, and the body stream.\n * Memoization is keyed by URL. Method, headers etc are ignored.\n *\n * @param originalFetch The fetch function to memoize. Defaults to the global fetch.\n */\nexport function createMemoizedFetch(\n\toriginalFetch: (\n\t\tinput: RequestInfo | URL,\n\t\tinit?: RequestInit\n\t) => Promise<Response> = fetch\n) {\n\tconst fetches: Record<string, CacheEntry> = {};\n\n\treturn async function memoizedFetch(url: string, options?: RequestInit) {\n\t\tif (!fetches[url]) {\n\t\t\tfetches[url] = {\n\t\t\t\tresponsePromise: originalFetch(url, options),\n\t\t\t\tasync nextResponse() {\n\t\t\t\t\t// Wait for \"result\" to be set.\n\t\t\t\t\tconst response = await fetches[url].responsePromise;\n\t\t\t\t\tconst [left, right] =\n\t\t\t\t\t\tfetches[url].unlockedBodyStream!.tee();\n\t\t\t\t\tfetches[url].unlockedBodyStream = left;\n\t\t\t\t\treturn new Response(right, {\n\t\t\t\t\t\tstatus: response.status,\n\t\t\t\t\t\tstatusText: response.statusText,\n\t\t\t\t\t\theaders: response.headers,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst response = await fetches[url].responsePromise;\n\t\t\tfetches[url].unlockedBodyStream = response.body!;\n\t\t}\n\n\t\treturn fetches[url].nextResponse();\n\t};\n}\n","/**\n * Avoid adding new code here. @wp-playground/common should remain\n * as lean as possible.\n *\n * This package exists to avoid circular dependencies. Let's not\n * use it as a default place to add code that doesn't seem to fit\n * anywhere else. If there's no good place for your code, perhaps\n * it needs to be restructured? Or maybe there's a need for a new package?\n * Let's always consider these questions before adding new code here.\n */\n\nimport type { UniversalPHP } from '@php-wasm/universal';\nimport { phpVars } from '@php-wasm/util';\n\nexport { createMemoizedFetch } from './create-memoized-fetch';\n\nexport const RecommendedPHPVersion = '8.0';\n\n/**\n * Unzip a zip file inside Playground.\n */\nconst tmpPath = '/tmp/file.zip';\nexport const unzipFile = async (\n\tphp: UniversalPHP,\n\tzipPath: string | File,\n\textractToPath: string,\n\toverwriteFiles = true\n) => {\n\tif (zipPath instanceof File) {\n\t\tconst zipFile = zipPath;\n\t\tzipPath = tmpPath;\n\t\tawait php.writeFile(\n\t\t\tzipPath,\n\t\t\tnew Uint8Array(await zipFile.arrayBuffer())\n\t\t);\n\t}\n\tconst js = phpVars({\n\t\tzipPath,\n\t\textractToPath,\n\t\toverwriteFiles,\n\t});\n\tawait php.run({\n\t\tcode: `<?php\n        function unzip($zipPath, $extractTo, $overwriteFiles = true)\n        {\n            if (!is_dir($extractTo)) {\n                mkdir($extractTo, 0777, true);\n            }\n            $zip = new ZipArchive;\n            $res = $zip->open($zipPath);\n            if ($res === TRUE) {\n\t\t\t\tfor ($i = 0; $i < $zip->numFiles; $i++) {\n\t\t\t\t\t$filename = $zip->getNameIndex($i);\n\t\t\t\t\t$fileinfo = pathinfo($filename);\n\t\t\t\t\t$extractFilePath = rtrim($extractTo, '/') . '/' . $filename;\n\t\t\t\t\t// Check if file exists and $overwriteFiles is false\n\t\t\t\t\tif (!file_exists($extractFilePath) || $overwriteFiles) {\n\t\t\t\t\t\t// Extract file\n\t\t\t\t\t\t$zip->extractTo($extractTo, $filename);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$zip->close();\n\t\t\t\tchmod($extractTo, 0777);\n            } else {\n                throw new Exception(\"Could not unzip file: \" . $zip->getStatusString());\n            }\n        }\n        unzip(${js.zipPath}, ${js.extractToPath}, ${js.overwriteFiles});\n        `,\n\t});\n\tif (await php.fileExists(tmpPath)) {\n\t\tawait php.unlink(tmpPath);\n\t}\n};\n\nexport const zipDirectory = async (\n\tphp: UniversalPHP,\n\tdirectoryPath: string\n) => {\n\tconst outputPath = `/tmp/file${Math.random()}.zip`;\n\tconst js = phpVars({\n\t\tdirectoryPath,\n\t\toutputPath,\n\t});\n\tawait php.run({\n\t\tcode: `<?php\n\t\tfunction zipDirectory($directoryPath, $outputPath) {\n\t\t\t$zip = new ZipArchive;\n\t\t\t$res = $zip->open($outputPath, ZipArchive::CREATE);\n\t\t\tif ($res !== TRUE) {\n\t\t\t\tthrow new Exception('Failed to create ZIP');\n\t\t\t}\n\t\t\t$files = new RecursiveIteratorIterator(\n\t\t\t\tnew RecursiveDirectoryIterator($directoryPath)\n\t\t\t);\n\t\t\tforeach ($files as $file) {\n\t\t\t\t$file = strval($file);\n\t\t\t\tif (is_dir($file)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$zip->addFile($file, substr($file, strlen($directoryPath)));\n\t\t\t}\n\t\t\t$zip->close();\n\t\t\tchmod($outputPath, 0777);\n\t\t}\n\t\tzipDirectory(${js.directoryPath}, ${js.outputPath});\n\t\t`,\n\t});\n\n\tconst fileBuffer = await php.readFileAsBuffer(outputPath);\n\tphp.unlink(outputPath);\n\treturn fileBuffer;\n};\n"],"names":["createMemoizedFetch","originalFetch","fetches","url","options","response","left","right","RecommendedPHPVersion","tmpPath","unzipFile","php","zipPath","extractToPath","overwriteFiles","zipFile","js","phpVars","zipDirectory","directoryPath","outputPath","fileBuffer"],"mappings":"kHAcgB,SAAAA,EACfC,EAGyB,MACxB,CACD,MAAMC,EAAsC,CAAC,EAEtC,OAAA,eAA6BC,EAAaC,EAAuB,CACnE,GAAA,CAACF,EAAQC,CAAG,EAAG,CAClBD,EAAQC,CAAG,EAAI,CACd,gBAAiBF,EAAcE,EAAKC,CAAO,EAC3C,MAAM,cAAe,CAEpB,MAAMC,EAAW,MAAMH,EAAQC,CAAG,EAAE,gBAC9B,CAACG,EAAMC,CAAK,EACjBL,EAAQC,CAAG,EAAE,mBAAoB,IAAI,EAC9B,OAAAD,EAAAC,CAAG,EAAE,mBAAqBG,EAC3B,IAAI,SAASC,EAAO,CAC1B,OAAQF,EAAS,OACjB,WAAYA,EAAS,WACrB,QAASA,EAAS,OAAA,CAClB,CAAA,CAEH,EACA,MAAMA,EAAW,MAAMH,EAAQC,CAAG,EAAE,gBAC5BD,EAAAC,CAAG,EAAE,mBAAqBE,EAAS,IAAA,CAGrC,OAAAH,EAAQC,CAAG,EAAE,aAAa,CAClC,CACD,CC7BO,MAAMK,EAAwB,MAK/BC,EAAU,gBACHC,EAAY,MACxBC,EACAC,EACAC,EACAC,EAAiB,KACb,CACJ,GAAIF,aAAmB,KAAM,CAC5B,MAAMG,EAAUH,EACNA,EAAAH,EACV,MAAME,EAAI,UACTC,EACA,IAAI,WAAW,MAAMG,EAAQ,YAAa,CAAA,CAC3C,CAAA,CAED,MAAMC,EAAKC,EAAAA,QAAQ,CAClB,QAAAL,EACA,cAAAC,EACA,eAAAC,CAAA,CACA,EACD,MAAMH,EAAI,IAAI,CACb,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAyBQK,EAAG,OAAO,KAAKA,EAAG,aAAa,KAAKA,EAAG,cAAc;AAAA,SAAA,CAEnE,EACG,MAAML,EAAI,WAAWF,CAAO,GACzB,MAAAE,EAAI,OAAOF,CAAO,CAE1B,EAEaS,EAAe,MAC3BP,EACAQ,IACI,CACJ,MAAMC,EAAa,YAAY,KAAK,OAAA,CAAQ,OACtCJ,EAAKC,EAAAA,QAAQ,CAClB,cAAAE,EACA,WAAAC,CAAA,CACA,EACD,MAAMT,EAAI,IAAI,CACb,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAoBSK,EAAG,aAAa,KAAKA,EAAG,UAAU;AAAA,GAAA,CAEjD,EAED,MAAMK,EAAa,MAAMV,EAAI,iBAAiBS,CAAU,EACxD,OAAAT,EAAI,OAAOS,CAAU,EACdC,CACR"}