import "@php-wasm/node-polyfills";
import { logger as ae } from "@php-wasm/logger";
import { randomFilename as Sr, phpVars as mr, joinPaths as se, phpVar as ye, dirname as yr, randomString as Nr, Semaphore as hr } from "@php-wasm/util";
import { defineWpConfigConstants as xr, ensureWpConfig as Dr } from "@wp-playground/wordpress";
import { writeFiles as ir, LatestSupportedPHPVersion as Cr, SupportedPHPVersions as Ir } from "@php-wasm/universal";
import { unzipFile as gr } from "@wp-playground/common";
import { cloneStreamMonitorProgress as Wr, cloneResponseMonitorProgress as Ur, ProgressTracker as zr } from "@php-wasm/progress";
import { resolveCommitHash as Br, listGitFiles as Mr, listDescendantFiles as Vr, sparseCheckout as Hr, OverlayFilesystem as Zr, InMemoryFilesystem as Yr, FetchFilesystem as Gr, ZipFilesystem as Qr } from "@wp-playground/storage";
import { fetchWithCorsProxy as Jr } from "@php-wasm/web";
import { StreamedFile as Xr } from "@php-wasm/stream-compression";
const br = [
  "db.php",
  "plugins/akismet",
  "plugins/hello.php",
  "plugins/wordpress-importer",
  "mu-plugins/sqlite-database-integration",
  "mu-plugins/playground-includes",
  "mu-plugins/0-playground.php",
  "mu-plugins/0-sqlite.php",
  /*
   * Listing core themes like that here isn't ideal, especially since
   * developers may actually want to use one of them.
   * @TODO Let's give the user a choice whether or not to include them.
   */
  "themes/twentytwenty",
  "themes/twentytwentyone",
  "themes/twentytwentytwo",
  "themes/twentytwentythree",
  "themes/twentytwentyfour",
  "themes/twentytwentyfive",
  "themes/twentytwentysix"
], wr = async (r, { pluginPath: t, pluginName: p }, u) => {
  u == null || u.tracker.setCaption(`Activating ${p || t}`);
  const c = await r.documentRoot, s = await r.run({
    code: `<?php
			define( 'WP_ADMIN', true );
			require_once( getenv('DOCROOT') . "/wp-load.php" );
			require_once( getenv('DOCROOT') . "/wp-admin/includes/plugin.php" );

			// Set current user to admin
			wp_set_current_user( get_users(array('role' => 'Administrator') )[0]->ID );

			$plugin_path = getenv('PLUGIN_PATH');
			$response = false;
			if ( ! is_dir( $plugin_path)) {
				$response = activate_plugin($plugin_path);
			}

			// Activate plugin by name if activation by path wasn't successful
			if ( null !== $response ) {
				foreach ( ( glob( $plugin_path . '/*.php' ) ?: array() ) as $file ) {
					$info = get_plugin_data( $file, false, false );
					if ( ! empty( $info['Name'] ) ) {
						$response = activate_plugin( $file );
						break;
					}
				}
			}

			if ( is_wp_error($response) ) {
				die( $response->get_error_message() );
			} else if ( false === $response ) {
				die( "The activatePlugin step wasn't able to find the plugin $plugin_path." );
			}
		`,
    env: {
      PLUGIN_PATH: t,
      DOCROOT: c
    }
  });
  s.text && ae.warn(
    `Plugin ${t} activation printed the following bytes: ${s.text}`
  );
  const e = await r.run({
    code: `<?php
			ob_start();
			require_once( getenv( 'DOCROOT' ) . "/wp-load.php" );

			/**
			 * Extracts the relative plugin path from either an absolute or relative plugin path.
			 *
			 * Absolute paths starting with plugin directory (e.g., '/wordpress/wp-content/plugins/test-plugin/index.php')
			 * should be converted to relative paths (e.g., 'test-plugin/index.php')
			 *
			 * Directories should finish with a trailing slash to ensure we match the full plugin directory name.
			 *
			 * Examples:
			 * - '/wordpress/wp-content/plugins/test-plugin/index.php' → 'test-plugin/index.php'
			 * - '/wordpress/wp-content/plugins/test-plugin/' → 'test-plugin/'
			 * - '/wordpress/wp-content/plugins/test-plugin' → 'test-plugin/'
			 * - 'test-plugin/index.php' → 'test-plugin/index.php'
			 * - 'test-plugin/' → 'test-plugin/'
			 * - 'test-plugin' → 'test-plugin/'
			 */
			$plugin_directory = WP_PLUGIN_DIR . '/';
			$relative_plugin_path = getenv( 'PLUGIN_PATH' );
			if (strpos($relative_plugin_path, $plugin_directory) === 0) {
				$relative_plugin_path = substr($relative_plugin_path, strlen($plugin_directory));
			}

			if ( is_dir( $plugin_directory . $relative_plugin_path ) ) {
				$relative_plugin_path = rtrim( $relative_plugin_path, '/' ) . '/';
			}

			$active_plugins = get_option( 'active_plugins' );
			foreach ( $active_plugins as $plugin ) {
				if ( substr( $plugin, 0, strlen( $relative_plugin_path ) ) === $relative_plugin_path ) {
					ob_end_clean();
					die( 'true' );
				}
			}
			die( ob_get_flush() ?: 'false' );
		`,
    env: {
      DOCROOT: c,
      PLUGIN_PATH: t
    }
  });
  if (e.text !== "true")
    throw e.text !== "false" && ae.debug(e.text), new Error(
      `Plugin ${t} could not be activated – WordPress exited with no error. Sometimes, when $_SERVER or site options are not configured correctly, WordPress exits early with a 301 redirect. Inspect the "debug" logs in the console for more details.`
    );
}, vr = async (r, { themeFolderName: t }, p) => {
  p == null || p.tracker.setCaption(`Activating ${t}`);
  const u = await r.documentRoot, c = `${u}/wp-content/themes/${t}`;
  if (!await r.fileExists(c))
    throw new Error(`
			Couldn't activate theme ${t}.
			Theme not found at the provided theme path: ${c}.
			Check the theme path to ensure it's correct.
			If the theme is not installed, you can install it using the installTheme step.
			More info can be found in the Blueprint documentation: https://wordpress.github.io/wordpress-playground/blueprints/steps/#ActivateThemeStep
		`);
  const s = await r.run({
    code: `<?php
			define( 'WP_ADMIN', true );
			require_once( getenv('docroot') . "/wp-load.php" );

			// Set current user to admin
			wp_set_current_user( get_users(array('role' => 'Administrator') )[0]->ID );

			switch_theme( getenv('themeFolderName') );

			if( wp_get_theme()->get_stylesheet() !== getenv('themeFolderName') ) {
				throw new Exception( 'Theme ' . getenv('themeFolderName') . ' could not be activated.' );				
			}
			die('Theme activated successfully');
		`,
    env: {
      docroot: u,
      themeFolderName: t
    }
  });
  if (s.text !== "Theme activated successfully")
    throw ae.debug(s), new Error(
      `Theme ${t} could not be activated – WordPress exited with no error. Sometimes, when $_SERVER or site options are not configured correctly, WordPress exits early with a 301 redirect. Inspect the "debug" logs in the console for more details`
    );
}, Kr = async (r, { code: t }) => ((t.includes('"wordpress/wp-load.php"') || t.includes("'wordpress/wp-load.php'")) && (ae.error(
  `
It looks like you're trying to load WordPress using a relative path 'wordpress/wp-load.php'.

Playground recently changed the working directory from '/' to '/wordpress' to better mimic 
how real web servers work. This means relative paths that used to work may no longer 
point to the correct location.

Playground automatically updated the path for you, but at one point path rewriting will be removed. Please
update your code to use an absolute path instead:

Instead of:  require_once 'wordpress/wp-load.php';
Use:         require_once '/wordpress/wp-load.php';

This will ensure your code works reliably regardless of the current working directory.
		`.trim()
), t = t.replace(
  "'wordpress/wp-load.php'",
  "'/wordpress/wp-load.php'"
), t = t.replace(
  '"wordpress/wp-load.php"',
  '"/wordpress/wp-load.php"'
)), await r.run({ code: t })), et = async (r, { options: t }) => await r.run(t), Pr = async (r, { path: t }) => {
  t.startsWith("/") || (ae.error(
    `
The rm() step in your Blueprint refers to a relative path.

Playground recently changed the working directory from '/' to '/wordpress' to better mimic 
how real web servers work. This means relative paths that used to work may no longer 
point to the correct location.

Playground automatically updated the path for you, but at one point path rewriting will be removed. Please
update your code to use an absolute path instead:

Instead of:  rm({ path: 'wordpress/wp-load.php' });
Use:         rm({ path: '/wordpress/wp-load.php' });

This will ensure your code works reliably regardless of the current working directory.
		`.trim()
  ), t = `/${t}`), await r.unlink(t);
}, rt = async (r, { sql: t }, p) => {
  p == null || p.tracker.setCaption("Executing SQL Queries");
  const u = `/tmp/${Sr()}.sql`;
  await r.writeFile(
    u,
    new Uint8Array(await t.arrayBuffer())
  );
  const c = await r.documentRoot, s = mr({ docroot: c, sqlFilename: u }), e = await r.run({
    code: `<?php
		require_once ${s.docroot} . '/wp-load.php';

		$handle = fopen(${s.sqlFilename}, 'r');

		global $wpdb;

		while ($line = fgets($handle)) {
			if(trim($line, " 
;") === '') {
				continue;
			}

			$wpdb->query($line);
		}
	`
  });
  return await Pr(r, { path: u }), e;
}, tt = async (r, { request: t }) => {
  ae.warn(
    'Deprecated: The Blueprint step "request" is deprecated and will be removed in a future release.'
  );
  const p = await r.request(t);
  if (p.httpStatusCode > 399 || p.httpStatusCode < 200)
    throw ae.warn("WordPress response was", { response: p }), new Error(
      `Request failed with status ${p.httpStatusCode}`
    );
  return p;
}, or = async (r, { consts: t, method: p = "define-before-run" }) => {
  switch (p) {
    case "define-before-run":
      await st(r, t);
      break;
    case "rewrite-wp-config": {
      const u = await r.documentRoot, c = se(u, "/wp-config.php");
      await xr(
        r,
        c,
        t,
        "rewrite"
      );
      break;
    }
    default:
      throw new Error(`Invalid method: ${p}`);
  }
};
async function st(r, t) {
  for (const p in t)
    await r.defineConstant(p, t[p]);
}
const _r = async (r, { options: t }) => {
  const p = await r.documentRoot;
  await r.run({
    code: `<?php
		include ${ye(p)} . '/wp-load.php';
		$site_options = ${ye(t)};
		foreach($site_options as $name => $value) {
			update_option($name, $value);
		}
		echo "Success";
		`
  });
}, it = async (r, { meta: t, userId: p }) => {
  const u = await r.documentRoot;
  await r.run({
    code: `<?php
		include ${ye(u)} . '/wp-load.php';
		$meta = ${ye(t)};
		foreach($meta as $name => $value) {
			update_user_meta(${ye(p)}, $name, $value);
		}
		`
  });
}, ar = "/tmp/wp-cli.phar", ot = {
  resource: "url",
  /**
   * Use compression for downloading the wp-cli.phar file.
   * The official release, hosted at raw.githubusercontent.com, is ~7MB
   * and the transfer is uncompressed. playground.wordpress.net supports
   * transfer compression and only transmits ~1.4MB.
   *
   * @TODO: minify the wp-cli.phar file. It can be as small as 1MB when all the
   *        whitespaces and are removed, and even 500KB when libraries
   *        like the JavaScript parser or Composer are removed.
   */
  url: "https://playground.wordpress.net/wp-cli.phar"
}, kr = async (r, t = ar) => {
  if (!await r.fileExists(t))
    throw new Error(`wp-cli.phar not found at ${t}.
			You can enable wp-cli support by adding "wp-cli" to the list of extra libraries in your blueprint as follows:
			{
				"extraLibraries": [ "wp-cli" ]
			}
			Read more about it in the documentation.
			https://wordpress.github.io/wordpress-playground/blueprints/data-format#extra-libraries`);
}, Or = async (r, { command: t, wpCliPath: p = ar }) => {
  await kr(r, p);
  let u;
  if (typeof t == "string" ? (t = t.trim(), u = at(t)) : u = t, u.shift() !== "wp")
    throw new Error('The first argument must be "wp".');
  const s = await r.documentRoot;
  await r.writeFile("/tmp/stdout", ""), await r.writeFile("/tmp/stderr", ""), await r.writeFile(
    se(s, "run-cli.php"),
    `<?php
		// Set up the environment to emulate a shell script
		// call.

		// Set SHELL_PIPE to 0 to ensure WP-CLI formats
		// the output as ASCII tables.
		// @see https://github.com/wp-cli/wp-cli/issues/1102
		putenv( 'SHELL_PIPE=0' );

		// Set the argv global.
		$GLOBALS['argv'] = array_merge([
		  "/tmp/wp-cli.phar",
		  "--path=${s}"
		], ${ye(u)});

		// Provide stdin, stdout, stderr streams outside of
		// the CLI SAPI.
		define('STDIN', fopen('php://stdin', 'rb'));
		define('STDOUT', fopen('php://stdout', 'wb'));
		define('STDERR', fopen('php://stderr', 'wb'));

		require( ${ye(p)} );
		`
  );
  const e = await r.run({
    scriptPath: se(s, "run-cli.php")
  });
  if (e.errors)
    throw new Error(e.errors);
  return e;
};
function at(r) {
  let u = 0, c = "";
  const s = [];
  let e = "";
  for (let d = 0; d < r.length; d++) {
    const h = r[d];
    u === 0 ? h === '"' || h === "'" ? (u = 1, c = h) : h.match(/\s/) ? (e && s.push(e), e = "") : e += h : u === 1 && (h === "\\" ? (d++, e += r[d]) : h === c ? (u = 0, c = "") : e += h);
  }
  return e && s.push(e), s;
}
const nt = async (r, { wpCliPath: t }) => {
  await kr(r, t), await or(r, {
    consts: {
      WP_ALLOW_MULTISITE: 1
    }
  });
  const p = new URL(await r.absoluteUrl);
  if (p.port !== "") {
    let s = `The current host is ${p.host}, but WordPress multisites do not support custom ports.`;
    throw p.hostname === "localhost" && (s += " For development, you can set up a playground.test domain using the instructions at https://wordpress.github.io/wordpress-playground/contributing/code."), new Error(s);
  }
  const u = p.pathname.replace(/\/$/, "") + "/", c = `${p.protocol}//${p.hostname}${u}`;
  await _r(r, {
    options: {
      siteurl: c,
      home: c
    }
  }), await Or(r, {
    command: "wp core multisite-convert"
  });
}, pt = async (r, { fromPath: t, toPath: p }) => {
  (!t.startsWith("/") || !p.startsWith("/")) && ae.error(
    `
The cp() step in your Blueprint refers to a relative path.

Playground recently changed the working directory from '/' to '/wordpress' to better mimic 
how real web servers work. This means relative paths that used to work may no longer 
point to the correct location.

Playground automatically updated the path for you, but at one point path rewriting will be removed. Please
update your code to use an absolute path instead:

Instead of:  cp({ fromPath: 'wordpress/wp-load.php', toPath: 'wordpress/wp-load.php' });
Use:         cp({ fromPath: '/wordpress/wp-load.php', toPath: '/wordpress/wp-load.php' });

This will ensure your code works reliably regardless of the current working directory.
		`.trim()
  ), t.startsWith("/") || (t = `/${t}`), p.startsWith("/") || (p = `/${p}`), await r.writeFile(
    p,
    await r.readFileAsBuffer(t)
  );
}, lt = async (r, { fromPath: t, toPath: p }) => {
  (!t.startsWith("/") || !p.startsWith("/")) && ae.error(
    `
The mv() step in your Blueprint refers to a relative path.

Playground recently changed the working directory from '/' to '/wordpress' to better mimic 
how real web servers work. This means relative paths that used to work may no longer 
point to the correct location.

Playground automatically updated the path for you, but at one point path rewriting will be removed. Please
update your code to use an absolute path instead:

Instead of:  mv({ fromPath: 'wordpress/wp-load.php', toPath: 'wordpress/wp-load.php' });
Use:         mv({ fromPath: '/wordpress/wp-load.php', toPath: '/wordpress/wp-load.php' });

This will ensure your code works reliably regardless of the current working directory.
		`.trim()
  ), t.startsWith("/") || (t = `/${t}`), p.startsWith("/") || (p = `/${p}`), await r.mv(t, p);
}, ft = async (r, { path: t }) => {
  t.startsWith("/") || ae.error(
    `
The mkdir() step in your Blueprint refers to a relative path.

Playground recently changed the working directory from '/' to '/wordpress' to better mimic 
how real web servers work. This means relative paths that used to work may no longer 
point to the correct location.

Playground automatically updated the path for you, but at one point path rewriting will be removed. Please
update your code to use an absolute path instead:

Instead of:  mkdir({ path: 'wordpress/my-new-folder' });
Use:         mkdir({ path: '/wordpress/my-new-folder' });

This will ensure your code works reliably regardless of the current working directory.
		`.trim()
  ), await r.mkdir(t);
}, dt = async (r, { path: t }) => {
  t.startsWith("/") || (ae.error(
    `
The rmdir() step in your Blueprint refers to a relative path.

Playground recently changed the working directory from '/' to '/wordpress' to better mimic 
how real web servers work. This means relative paths that used to work may no longer 
point to the correct location.

Playground automatically updated the path for you, but at one point path rewriting will be removed. Please
update your code to use an absolute path instead:

Instead of:  rmdir({ path: 'wordpress/wp-load.php' });
Use:         rmdir({ path: '/wordpress/wp-load.php' });

This will ensure your code works reliably regardless of the current working directory.
		`.trim()
  ), t = `/${t}`), await r.rmdir(t);
}, nr = async (r, { path: t, data: p }) => {
  p instanceof File && (p = new Uint8Array(await p.arrayBuffer())), t.startsWith("/") || (ae.error(
    `
The writeFile() step in your Blueprint refers to a relative path.

Playground recently changed the working directory from '/' to '/wordpress' to better mimic 
how real web servers work. This means relative paths that used to work may no longer 
point to the correct location.

Playground automatically updated the path for you, but at one point path rewriting will be removed. Please
update your code to use an absolute path instead:

Instead of:  writeFile({ path: 'wordpress/wp-load.php', data: '<?php echo "Hello World!"; ?>' });
Use:         writeFile({ path: '/wordpress/wp-load.php', data: '<?php echo "Hello World!"; ?>' });

This will ensure your code works reliably regardless of the current working directory.
		`.trim()
  ), t = `/${t}`), t.startsWith("/wordpress/wp-content/mu-plugins") && !await r.fileExists("/wordpress/wp-content/mu-plugins") && await r.mkdir("/wordpress/wp-content/mu-plugins"), await r.writeFile(t, p);
}, ut = async (r, { writeToPath: t, filesTree: p }) => {
  t.startsWith("/") || (ae.error(
    `
The writeFiles() step in your Blueprint refers to a relative path.

Playground recently changed the working directory from '/' to '/wordpress' to better mimic 
how real web servers work. This means relative paths that used to work may no longer
point to the correct location.

Playground automatically updated the path for you, but at one point path rewriting will be removed. Please
update your code to use an absolute path instead:

Instead of:  writeFiles({ writeToPath: 'wordpress/wp-content/plugins/my-plugin', filesTree: { name: 'style.css': 'a { color: red; }' });
Use:         writeFiles({ writeToPath: '/wordpress/wp-content/plugins/my-plugin', filesTree: { name: 'style.css': 'a { color: red; }' });

This will ensure your code works reliably regardless of the current working directory.
		`.trim()
  ), t = `/${t}`), await ir(r, t, p.files);
}, Tr = async (r, { siteUrl: t }) => {
  await or(r, {
    consts: {
      WP_HOME: t,
      WP_SITEURL: t
    }
  });
}, ct = async (r, { file: t }, p) => {
  await mt(r, t, p);
};
async function mt(r, t, p) {
  var c;
  (c = p == null ? void 0 : p.tracker) == null || c.setCaption("Importing content"), await nr(r, {
    path: "/tmp/import.wxr",
    data: t
  });
  const u = await r.documentRoot;
  await r.run({
    code: `<?php
	require ${ye(u)} . '/wp-load.php';
	require ${ye(u)} . '/wp-admin/includes/admin.php';

	kses_remove_filters();
	$admin_id = get_users(array('role' => 'Administrator') )[0]->ID;
	wp_set_current_user( $admin_id );
	$importer = new WXR_Importer( array(
		'fetch_attachments' => true,
		'default_author' => $admin_id
	) );
	$logger = new WP_Importer_Logger_CLI();
	$importer->set_logger( $logger );
	// Slashes from the imported content are lost if we don't call wp_slash here.
	add_action( 'wp_insert_post_data', function( $data ) {
		return wp_slash($data);
	});
  
  // Ensure that Site Editor templates are associated with the correct taxonomy.
  add_filter( 'wp_import_post_terms', function ( $terms, $post_id ) {
    foreach ( $terms as $post_term ) {
      if ( 'wp_theme' !== $term['taxonomy'] ) continue;
      $post_term = get_term_by('slug', $term['slug'], $term['taxonomy'] );
      if ( ! $post_term ) {
        $post_term = wp_insert_term(
          $term['slug'],
          $term['taxonomy']
        );
        $term_id = $post_term['term_id'];
      } else {
        $term_id = $post_term->term_id;
      }
      wp_set_object_terms( $post_id, $term_id, $term['taxonomy']) ;
    }
    return $terms;
  }, 10, 2 );
	$result = $importer->import( '/tmp/import.wxr' );
	`
  });
}
const jr = async (r, { themeSlug: t = "" }, p) => {
  var c;
  (c = p == null ? void 0 : p.tracker) == null || c.setCaption("Importing theme starter content");
  const u = await r.documentRoot;
  await r.run({
    code: `<?php

		/**
		 * Ensure that the customizer loads as an admin user.
		 *
		 * For compatibility with themes, this MUST be run prior to theme inclusion, which is why this is a plugins_loaded filter instead
		 * of running _wp_customize_include() manually after load.
		 */
		function importThemeStarterContent_plugins_loaded() {
			// Set as the admin user, this ensures we can customize the site.
			wp_set_current_user(
				get_users( [ 'role' => 'Administrator' ] )[0]
			);

			// Force the site to be fresh, although it should already be.
			add_filter( 'pre_option_fresh_site', '__return_true' );

			/*
			 * Simulate this request as the customizer loading with the current theme in preview mode.
			 *
			 * See _wp_customize_include()
			 */
			$_REQUEST['wp_customize']    = 'on';
			$_REQUEST['customize_theme'] = ${ye(t)} ?: get_stylesheet();

			/*
			 * Claim this is a ajax request saving settings, to avoid the preview filters being applied.
			 */
			$_REQUEST['action'] = 'customize_save';
			add_filter( 'wp_doing_ajax', '__return_true' );

			$_GET = $_REQUEST;
		}
		playground_add_filter( 'plugins_loaded', 'importThemeStarterContent_plugins_loaded', 0 );

		require ${ye(u)} . '/wp-load.php';

		// Return early if there's no starter content.
		if ( ! get_theme_starter_content() ) {
			return;
		}

		// Import the Starter Content.
		$wp_customize->import_theme_starter_content();

		// Publish the changeset, which publishes the starter content.
		wp_publish_post( $wp_customize->changeset_post_id() );
		`
  });
}, pr = async (r, { zipFile: t, zipPath: p, extractToPath: u }) => {
  if (p)
    ae.warn(
      'The "zipPath" option of the unzip() Blueprint step is deprecated and will be removed. Use "zipFile" instead.'
    );
  else if (!t)
    throw new Error("Either zipPath or zipFile must be provided");
  await gr(r, t || p, u);
}, yt = async (r, { wordPressFilesZip: t, pathInZip: p = "" }) => {
  const u = await r.documentRoot;
  let c = se("/tmp", "import");
  await r.mkdir(c), await pr(r, {
    zipFile: t,
    extractToPath: c
  }), c = se(c, p);
  const s = se(c, "wp-content"), e = se(u, "wp-content");
  for (const S of br) {
    const T = se(
      s,
      S
    );
    await dr(r, T);
    const _ = se(e, S);
    await r.fileExists(_) && (await r.mkdir(yr(T)), await r.mv(_, T));
  }
  const d = se(
    c,
    "wp-content",
    "database"
  );
  await r.fileExists(d) || await r.mv(
    se(u, "wp-content", "database"),
    d
  );
  const h = await r.listFiles(c);
  for (const S of h)
    await dr(r, se(u, S)), await r.mv(
      se(c, S),
      se(u, S)
    );
  await r.rmdir(c), await Dr(r, u), await Tr(r, {
    siteUrl: await r.absoluteUrl
  });
  const D = ye(
    se(u, "wp-admin", "upgrade.php")
  );
  await r.run({
    code: `<?php
            $_GET['step'] = 'upgrade_db';
            require ${D};
            `
  });
};
async function dr(r, t) {
  await r.fileExists(t) && (await r.isDir(t) ? await r.rmdir(t) : await r.unlink(t));
}
async function ht(r) {
  const t = await r.request({
    url: "/wp-admin/export.php?download=true&content=all"
  });
  return new File([t.bytes], "export.xml");
}
async function Er(r, {
  targetPath: t,
  zipFile: p,
  ifAlreadyInstalled: u = "overwrite",
  targetFolderName: c = ""
}) {
  const e = p.name.replace(/\.zip$/, ""), d = se(await r.documentRoot, "wp-content"), h = se(d, Nr()), D = se(h, "assets", e);
  await r.fileExists(D) && await r.rmdir(h, {
    recursive: !0
  }), await r.mkdir(h);
  try {
    await pr(r, {
      zipFile: p,
      extractToPath: D
    });
    let S = await r.listFiles(D, {
      prependPath: !0
    });
    S = S.filter((m) => !m.endsWith("/__MACOSX"));
    const T = S.length === 1 && await r.isDir(S[0]);
    let _, k = "";
    T ? (k = S[0], _ = S[0].split("/").pop()) : (k = D, _ = e), c && c.length && (_ = c);
    const R = `${t}/${_}`;
    if (await r.fileExists(R)) {
      if (!await r.isDir(R))
        throw new Error(
          `Cannot install asset ${_} to ${R} because a file with the same name already exists. Note it's a file, not a directory! Is this by mistake?`
        );
      if (u === "overwrite")
        await r.rmdir(R, {
          recursive: !0
        });
      else {
        if (u === "skip")
          return {
            assetFolderPath: R,
            assetFolderName: _
          };
        throw new Error(
          `Cannot install asset ${_} to ${t} because it already exists and the ifAlreadyInstalled option was set to ${u}`
        );
      }
    }
    return await r.mv(k, R), {
      assetFolderPath: R,
      assetFolderName: _
    };
  } finally {
    await r.rmdir(h, {
      recursive: !0
    });
  }
}
function er(r) {
  const t = r.split(".").shift().replace(/-/g, " ");
  return t.charAt(0).toUpperCase() + t.slice(1).toLowerCase();
}
const gt = async (r, { pluginData: t, pluginZipFile: p, ifAlreadyInstalled: u, options: c = {} }, s) => {
  p && (t = p, ae.warn(
    'The "pluginZipFile" option is deprecated. Use "pluginData" instead.'
  ));
  const e = se(
    await r.documentRoot,
    "wp-content",
    "plugins"
  ), d = "targetFolderName" in c ? c.targetFolderName : "";
  let h = "", D = "";
  const S = async (_) => {
    if (_.name.toLowerCase().endsWith(".zip"))
      return !0;
    const k = new Uint8Array(await _.arrayBuffer(), 0, 4);
    return k[0] === 80 && k[1] === 75 && k[2] === 3 && k[3] === 4;
  };
  if (t instanceof File)
    if (await S(t)) {
      const _ = t.name.split("/").pop() || "plugin.zip";
      D = er(_), s == null || s.tracker.setCaption(
        `Installing the ${D} plugin`
      );
      const k = await Er(r, {
        ifAlreadyInstalled: u,
        zipFile: t,
        targetPath: `${await r.documentRoot}/wp-content/plugins`,
        targetFolderName: d
      });
      h = k.assetFolderPath, D = k.assetFolderName;
    } else if (t.name.endsWith(".php")) {
      const _ = se(
        e,
        t.name
      );
      await nr(r, {
        path: _,
        data: t
      }), h = e, D = t.name;
    } else
      throw new Error(
        "pluginData looks like a file but does not look like a .zip or .php file."
      );
  else if (t) {
    D = t.name, s == null || s.tracker.setCaption(`Installing the ${D} plugin`);
    const _ = se(
      e,
      d || t.name
    );
    await ir(r, _, t.files, {
      rmRoot: !0
    }), h = _;
  }
  ("activate" in c ? c.activate : !0) && await wr(
    r,
    {
      pluginPath: h,
      pluginName: D
    },
    s
  );
}, bt = async (r, { themeData: t, themeZipFile: p, ifAlreadyInstalled: u, options: c = {} }, s) => {
  p && (t = p, ae.warn(
    'The "themeZipFile" option is deprecated. Use "themeData" instead.'
  ));
  const e = "targetFolderName" in c ? c.targetFolderName : "";
  let d = "", h = "";
  if (t instanceof File) {
    const T = t.name.split("/").pop() || "theme.zip";
    h = er(T), s == null || s.tracker.setCaption(`Installing the ${h} theme`), d = (await Er(r, {
      ifAlreadyInstalled: u,
      zipFile: t,
      targetPath: `${await r.documentRoot}/wp-content/themes`,
      targetFolderName: e
    })).assetFolderName;
  } else {
    h = t.name, d = e || h, s == null || s.tracker.setCaption(`Installing the ${h} theme`);
    const T = se(
      await r.documentRoot,
      "wp-content",
      "themes",
      d
    );
    await ir(r, T, t.files, {
      rmRoot: !0
    });
  }
  ("activate" in c ? c.activate : !0) && await vr(
    r,
    {
      themeFolderName: d
    },
    s
  ), ("importStarterContent" in c ? c.importStarterContent : !1) && await jr(
    r,
    {
      themeSlug: d
    },
    s
  );
}, wt = async (r, { username: t = "admin" } = {}, p) => {
  p == null || p.tracker.setCaption((p == null ? void 0 : p.initialCaption) || "Logging in"), r.defineConstant("PLAYGROUND_AUTO_LOGIN_AS_USER", t);
}, vt = async (r, t, p) => {
  var c;
  (c = p == null ? void 0 : p.tracker) == null || c.setCaption("Resetting WordPress data");
  const u = await r.documentRoot;
  await r.run({
    env: {
      DOCROOT: u
    },
    code: `<?php
		require getenv('DOCROOT') . '/wp-load.php';

		$GLOBALS['@pdo']->query('DELETE FROM wp_posts WHERE id > 0');
		$GLOBALS['@pdo']->query("UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='wp_posts'");
		
		$GLOBALS['@pdo']->query('DELETE FROM wp_postmeta WHERE post_id > 1');
		$GLOBALS['@pdo']->query("UPDATE SQLITE_SEQUENCE SET SEQ=20 WHERE NAME='wp_postmeta'");

		$GLOBALS['@pdo']->query('DELETE FROM wp_comments');
		$GLOBALS['@pdo']->query("UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='wp_comments'");

		$GLOBALS['@pdo']->query('DELETE FROM wp_commentmeta');
		$GLOBALS['@pdo']->query("UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='wp_commentmeta'");
		`
  });
}, Pt = async (r, { options: t }) => {
  await r.request({
    url: "/wp-admin/install.php?step=2",
    method: "POST",
    body: {
      language: "en",
      prefix: "wp_",
      weblog_title: "My WordPress Website",
      user_name: t.adminPassword || "admin",
      admin_password: t.adminPassword || "password",
      // The installation wizard demands typing the same password twice
      admin_password2: t.adminPassword || "password",
      Submit: "Install WordPress",
      pw_weak: "1",
      admin_email: "admin@localhost.com"
    }
  });
}, _t = async (r, { selfContained: t = !1 } = {}) => {
  const p = "/tmp/wordpress-playground.zip", u = await r.documentRoot, c = se(u, "wp-content");
  let s = br;
  t && (s = s.filter((h) => !h.startsWith("themes/twenty")).filter(
    (h) => h !== "mu-plugins/sqlite-database-integration"
  ));
  const e = mr({
    zipPath: p,
    wpContentPath: c,
    documentRoot: u,
    exceptPaths: s.map(
      (h) => se(u, "wp-content", h)
    ),
    additionalPaths: t ? {
      [se(u, "wp-config.php")]: "wp-config.php"
    } : {}
  });
  await Ot(
    r,
    `zipDir(${e.wpContentPath}, ${e.zipPath}, array(
			'exclude_paths' => ${e.exceptPaths},
			'zip_root'      => ${e.documentRoot},
			'additional_paths' => ${e.additionalPaths}
		));`
  );
  const d = await r.readFileAsBuffer(p);
  return r.unlink(p), d;
}, kt = `<?php

function zipDir($root, $output, $options = array())
{
    $root = rtrim($root, '/');
    $additionalPaths = array_key_exists('additional_paths', $options) ? $options['additional_paths'] : array();
    $excludePaths = array_key_exists('exclude_paths', $options) ? $options['exclude_paths'] : array();
    $zip_root = array_key_exists('zip_root', $options) ? $options['zip_root'] : $root;

    $zip = new ZipArchive;
    $res = $zip->open($output, ZipArchive::CREATE);
    if ($res === TRUE) {
        $directories = array(
            $root . '/'
        );
        while (sizeof($directories)) {
            $current_dir = array_pop($directories);

            if ($handle = opendir($current_dir)) {
                while (false !== ($entry = readdir($handle))) {
                    if ($entry == '.' || $entry == '..') {
                        continue;
                    }

                    $entry = join_paths($current_dir, $entry);
                    if (in_array($entry, $excludePaths)) {
                        continue;
                    }

                    if (is_dir($entry)) {
                        $directory_path = $entry . '/';
                        array_push($directories, $directory_path);
                    } else if (is_file($entry)) {
                        // ensure compliance with zip spec by only using relative paths for files
                        $zip->addFile($entry, ltrim(substr($entry, strlen($zip_root)), '/'));
                    }
                }
                closedir($handle);
            }
        }
        foreach ($additionalPaths as $disk_path => $zip_path) {
            $zip->addFile($disk_path, $zip_path);
        }
        $zip->close();
        chmod($output, 0777);
    }
}

function join_paths()
{
    $paths = array();

    foreach (func_get_args() as $arg) {
        if ($arg !== '') {
            $paths[] = $arg;
        }
    }

    return preg_replace('#/+#', '/', join('/', $paths));
}
`;
async function Ot(r, t) {
  return await r.run({
    code: kt + t
  });
}
const Tt = async (r, t) => {
  const c = (await (await fetch(
    `https://api.wordpress.org/translations/core/1.0/?version=${r}`
  )).json()).translations.find(
    (s) => s.language.toLowerCase() === t.toLowerCase()
  );
  if (!c)
    throw new Error(
      `Failed to get ${t} translation package for WordPress ${r}.`
    );
  return c.package;
}, jt = async (r, { language: t }, p) => {
  p == null || p.tracker.setCaption((p == null ? void 0 : p.initialCaption) || "Translating"), await r.defineConstant("WPLANG", t);
  const u = await r.documentRoot, c = (await r.run({
    code: `<?php
			require '${u}/wp-includes/version.php';
			echo $wp_version;
		`
  })).text, s = [
    {
      url: await Tt(c, t),
      type: "core"
    }
  ], d = (await r.run({
    code: `<?php
		require_once('${u}/wp-load.php');
		require_once('${u}/wp-admin/includes/plugin.php');
		echo json_encode(
			array_values(
				array_map(
					function($plugin) {
						return [
							'slug'    => $plugin['TextDomain'],
							'version' => $plugin['Version']
						];
					},
					array_filter(
						get_plugins(),
						function($plugin) {
							return !empty($plugin['TextDomain']);
						}
					)
				)
			)
		);`
  })).json;
  for (const { slug: _, version: k } of d)
    s.push({
      url: `https://downloads.wordpress.org/translation/plugin/${_}/${k}/${t}.zip`,
      type: "plugin"
    });
  const D = (await r.run({
    code: `<?php
		require_once('${u}/wp-load.php');
		require_once('${u}/wp-admin/includes/theme.php');
		echo json_encode(
			array_values(
				array_map(
					function($theme) {
						return [
							'slug'    => $theme->get('TextDomain'),
							'version' => $theme->get('Version')
						];
					},
					wp_get_themes()
				)
			)
		);`
  })).json;
  for (const { slug: _, version: k } of D)
    s.push({
      url: `https://downloads.wordpress.org/translation/theme/${_}/${k}/${t}.zip`,
      type: "theme"
    });
  await r.isDir(`${u}/wp-content/languages/plugins`) || await r.mkdir(`${u}/wp-content/languages/plugins`), await r.isDir(`${u}/wp-content/languages/themes`) || await r.mkdir(`${u}/wp-content/languages/themes`);
  const S = new hr({ concurrency: 5 }), T = s.map(
    ({ url: _, type: k }) => S.run(async () => {
      try {
        const R = await fetch(_);
        if (!R.ok)
          throw new Error(
            `Failed to download translations for ${k}: ${R.statusText}`
          );
        let m = `${u}/wp-content/languages`;
        k === "plugin" ? m += "/plugins" : k === "theme" && (m += "/themes"), await gr(
          r,
          new File(
            [await R.blob()],
            `${t}-${k}.zip`
          ),
          m
        );
      } catch (R) {
        if (k === "core")
          throw new Error(
            `Failed to download translations for WordPress. Please check if the language code ${t} is correct. You can find all available languages and translations on https://translate.wordpress.org/.`
          );
        ae.warn(
          `Error downloading translations for ${k}: ${R}`
        );
      }
    })
  );
  await Promise.all(T);
}, Et = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  activatePlugin: wr,
  activateTheme: vr,
  cp: pt,
  defineSiteUrl: Tr,
  defineWpConfigConsts: or,
  enableMultisite: nt,
  exportWXR: ht,
  importThemeStarterContent: jr,
  importWordPressFiles: yt,
  importWxr: ct,
  installPlugin: gt,
  installTheme: bt,
  login: wt,
  mkdir: ft,
  mv: lt,
  request: tt,
  resetData: vt,
  rm: Pr,
  rmdir: dt,
  runPHP: Kr,
  runPHPWithOptions: et,
  runSql: rt,
  runWpInstallationWizard: Pt,
  setSiteLanguage: jt,
  setSiteOptions: _r,
  unzip: pr,
  updateUserMeta: it,
  wpCLI: Or,
  writeFile: nr,
  writeFiles: ut,
  zipWpContent: _t
}, Symbol.toStringTag, { value: "Module" })), qt = [
  "vfs",
  "literal",
  "wordpress.org/themes",
  "wordpress.org/plugins",
  "url",
  "git:directory",
  "bundled"
];
function $t(r) {
  return r && typeof r == "object" && typeof r.resource == "string" && qt.includes(r.resource);
}
class Oe {
  get progress() {
    return this._progress;
  }
  set progress(t) {
    this._progress = t;
  }
  setPlayground(t) {
    this.playground = t;
  }
  /** Whether this Resource is loaded asynchronously */
  get isAsync() {
    return !1;
  }
  /**
   * Creates a new Resource based on the given file reference
   *
   * @param ref The file reference to create the Resource for
   * @param options Additional options for the Resource
   * @returns A new Resource instance
   */
  static create(t, {
    semaphore: p,
    progress: u,
    corsProxy: c,
    streamBundledFile: s
  }) {
    let e;
    switch (t.resource) {
      case "vfs":
        e = new At(t, u);
        break;
      case "literal":
        e = new Rt(t, u);
        break;
      case "wordpress.org/themes":
        e = new Dt(t, u);
        break;
      case "wordpress.org/plugins":
        e = new Ct(t, u);
        break;
      case "url":
        e = new Ft(t, u, { corsProxy: c });
        break;
      case "git:directory":
        e = new St(t, u, {
          corsProxy: c
        });
        break;
      case "literal:directory":
        e = new xt(t, u);
        break;
      case "bundled":
        if (!s)
          throw new Error(
            "Filesystem is required for blueprint resources"
          );
        e = new Ut(
          t,
          s,
          u
        );
        break;
      default:
        throw new Error(
          `Unknown resource type: ${t.resource}`
        );
    }
    return p && (e = new Wt(e, p)), new It(e);
  }
}
class qr extends Oe {
  constructor(t) {
    super(), this.resource = t;
  }
  /** @inheritDoc */
  get progress() {
    return this.resource.progress;
  }
  /** @inheritDoc */
  set progress(t) {
    this.resource.progress = t;
  }
  /** @inheritDoc */
  get name() {
    return this.resource.name;
  }
  /** @inheritDoc */
  get isAsync() {
    return this.resource.isAsync;
  }
  /** @inheritDoc */
  setPlayground(t) {
    this.resource.setPlayground(t);
  }
}
class At extends Oe {
  /**
   * Creates a new instance of `VFSResource`.
   * @param playground The playground client.
   * @param resource The VFS reference.
   * @param progress The progress tracker.
   */
  constructor(t, p) {
    super(), this.resource = t, this._progress = p;
  }
  /** @inheritDoc */
  async resolve() {
    var p;
    const t = await this.playground.readFileAsBuffer(
      this.resource.path
    );
    return (p = this.progress) == null || p.set(100), new File([t], this.name);
  }
  /** @inheritDoc */
  get name() {
    return this.resource.path.split("/").pop() || "";
  }
}
class Rt extends Oe {
  /**
   * Creates a new instance of `LiteralResource`.
   * @param resource The literal reference.
   * @param progress The progress tracker.
   */
  constructor(t, p) {
    super(), this.resource = t, this._progress = p;
  }
  /** @inheritDoc */
  async resolve() {
    var t;
    return (t = this.progress) == null || t.set(100), new File([this.resource.contents], this.resource.name);
  }
  /** @inheritDoc */
  get name() {
    return this.resource.name;
  }
}
class lr extends Oe {
  /**
   * Creates a new instance of `FetchResource`.
   * @param progress The progress tracker.
   */
  constructor(t, p) {
    super(), this._progress = t, this.corsProxy = p;
  }
  /** @inheritDoc */
  async resolve() {
    var p, u, c;
    (p = this.progress) == null || p.setCaption(this.caption);
    const t = this.getURL();
    try {
      let s = await Jr(
        t,
        void 0,
        this.corsProxy,
        await ((u = this.playground) == null ? void 0 : u.absoluteUrl)
      );
      if (!s.ok)
        throw new Error(`Could not download "${t}"`);
      if (s = await Ur(
        s,
        ((c = this.progress) == null ? void 0 : c.loadingListener) ?? Lt
      ), s.status !== 200)
        throw new Error(`Could not download "${t}"`);
      return new File([await s.blob()], this.name);
    } catch (s) {
      throw new Error(
        `Could not download "${t}".
				Check if the URL is correct and the server is reachable.
				If it is reachable, the server might be blocking the request.
				Check the browser console and network tabs for more information.

				## Does the console show the error "No 'Access-Control-Allow-Origin' header"?

				This means the server that hosts your file does not allow requests from other sites
				(cross-origin requests, or CORS).	You need to move the asset to a server that allows
				cross-origin file downloads. Learn more about CORS at
				https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS.

				If your file is on GitHub, load it from "raw.githubusercontent.com".
				Here's how to do that:

				1. Start with the original GitHub URL of the file. For example:
				https://github.com/username/repository/blob/branch/filename.
				2. Replace "github.com" with "raw.githubusercontent.com".
				3. Remove the "/blob/" part of the URL.

				The resulting URL should look like this:
				https://raw.githubusercontent.com/username/repository/branch/filename

				Error:
				${s}`
      );
    }
  }
  /**
   * Gets the caption for the progress tracker.
   * @returns The caption.
   */
  get caption() {
    return `Downloading ${this.name}`;
  }
  /** @inheritDoc */
  get name() {
    try {
      return new URL(this.getURL(), "http://example.com").pathname.split("/").pop();
    } catch {
      return this.getURL();
    }
  }
  /** @inheritDoc */
  get isAsync() {
    return !0;
  }
}
const Lt = () => {
};
class Ft extends lr {
  /**
   * Creates a new instance of `UrlResource`.
   * @param resource The URL reference.
   * @param progress The progress tracker.
   */
  constructor(t, p, u) {
    if (super(p, u == null ? void 0 : u.corsProxy), this.resource = t, this.options = u, this.resource.url.startsWith("https://github.com/")) {
      const c = this.resource.url.match(
        /^https:\/\/github\.com\/(?<owner>[^/]+)\/(?<repo>[^/]+)\/blob\/(?<branch>[^/]+)\/(?<path>.+[^/])$/
      );
      c != null && c.groups && (this.resource = {
        ...this.resource,
        url: `https://raw.githubusercontent.com/${c.groups.owner}/${c.groups.repo}/${c.groups.branch}/${c.groups.path}`
      });
    }
  }
  /** @inheritDoc */
  getURL() {
    return this.resource.url;
  }
  /** @inheritDoc */
  get caption() {
    return this.resource.caption ?? super.caption;
  }
}
class St extends Oe {
  constructor(t, p, u) {
    super(), this.reference = t, this._progress = p, this.options = u;
  }
  async resolve() {
    var d;
    const t = (d = this.options) != null && d.corsProxy ? `${this.options.corsProxy}${this.reference.url}` : this.reference.url, p = await Br(t, {
      value: this.reference.ref,
      type: "infer"
    }), u = await Mr(t, p), c = this.reference.path.replace(/^\/+/, ""), s = Vr(u, c);
    let e = await Hr(t, p, s);
    return e = Nt(
      e,
      (h) => h.substring(c.length).replace(/^\/+/, "")
    ), {
      name: yr(this.reference.path) || this.reference.url.replaceAll(/[^a-zA-Z0-9-.]/g, "-").replaceAll(/-+/g, "-"),
      files: e
    };
  }
  /** @inheritDoc */
  get name() {
    return this.reference.path.split("/").pop();
  }
}
function Nt(r, t) {
  return Object.fromEntries(
    Object.entries(r).map(([p, u]) => [t(p), u])
  );
}
class xt extends Oe {
  constructor(t, p) {
    super(), this.reference = t, this._progress = p;
  }
  async resolve() {
    return this.reference;
  }
  /** @inheritDoc */
  get name() {
    return this.reference.name;
  }
}
class Dt extends lr {
  constructor(t, p) {
    super(p), this.resource = t;
  }
  get name() {
    return er(this.resource.slug);
  }
  getURL() {
    return `https://downloads.wordpress.org/theme/${$r(this.resource.slug)}`;
  }
}
class Ct extends lr {
  constructor(t, p) {
    super(p), this.resource = t;
  }
  /** @inheritDoc */
  get name() {
    return er(this.resource.slug);
  }
  /** @inheritDoc */
  getURL() {
    return `https://downloads.wordpress.org/plugin/${$r(this.resource.slug)}`;
  }
}
function $r(r) {
  return !r || r.endsWith(".zip") ? r : r + ".latest-stable.zip";
}
class It extends qr {
  /** @inheritDoc */
  async resolve() {
    return this.promise || (this.promise = this.resource.resolve()), this.promise;
  }
}
class Wt extends qr {
  constructor(t, p) {
    super(t), this.semaphore = p;
  }
  /** @inheritDoc */
  async resolve() {
    return this.isAsync ? this.semaphore.run(() => this.resource.resolve()) : this.resource.resolve();
  }
}
class Ut extends Oe {
  /**
   * Creates a new instance of `BlueprintResource`.
   * @param resource The blueprint reference.
   * @param filesystem The filesystem to read from.
   * @param progress The progress tracker.
   */
  constructor(t, p, u) {
    if (!p)
      throw new Error(
        `You are trying to run a Blueprint that refers to a bundled file ("blueprint" resource type), but you did not provide the rest of the bundle. This Blueprint won't work as a standalone JSON file. You'll need to load the entire bundle, e.g. a blueprint.zip file. Alternatively, you may try loading it directly from a URL or a local directory and Playground will try (with your permission) to source the missing files from paths relative to the blueprint file.`
      );
    super(), this.resource = t, this.streamBundledFile = p, this._progress = u;
  }
  /** @inheritDoc */
  async resolve() {
    var t, p, u;
    (t = this.progress) == null || t.set(0);
    try {
      const c = await this.streamBundledFile(this.resource.path), s = c.filesize;
      if (!s)
        return (p = this.progress) == null || p.set(100), c;
      const e = Wr(
        c.stream(),
        s,
        (d) => {
          var h;
          (h = this.progress) == null || h.set(
            d.detail.loaded / d.detail.total * 100
          );
        }
      );
      return new Xr(e, this.name, {
        filesize: s
      });
    } catch (c) {
      throw (u = this.progress) == null || u.set(100), new Error(
        `Failed to read file from blueprint. This Blueprint refers to a resource of type "bundled" with path "${this.resource.path}" that was not available. Please ensure that the entire bundle, such as a blueprint.zip file, is loaded. If you are trying to load the Blueprint directly from a URL or a local directory, make sure that all the necessary files are accessible and located relative to the blueprint file. 

Error details: ${c instanceof Error ? c.message : String(c)}`,
        { cause: c }
      );
    }
  }
  /** @inheritDoc */
  get name() {
    return this.resource.path.split("/").pop() || "";
  }
  /** @inheritDoc */
  get isAsync() {
    return !0;
  }
}
const zt = {
  properties: {
    landingPage: {
      type: "string",
      description: "The URL to navigate to after the blueprint has been run."
    },
    description: {
      type: "string",
      description: "Optional description. It doesn't do anything but is exposed as a courtesy to developers who may want to document which blueprint file does what.",
      deprecated: "Use meta.description instead."
    },
    meta: {
      type: "object",
      properties: {
        title: {
          type: "string",
          description: "A clear and concise name for your Blueprint."
        },
        description: {
          type: "string",
          description: "A brief explanation of what your Blueprint offers."
        },
        author: {
          type: "string",
          description: "A GitHub username of the author of this Blueprint."
        },
        categories: {
          type: "array",
          items: { type: "string" },
          description: "Relevant categories to help users find your Blueprint in the future Blueprints section on WordPress.org."
        }
      },
      required: ["title", "author"],
      additionalProperties: !1,
      description: "Optional metadata. Used by the Blueprints gallery at https://github.com/WordPress/blueprints"
    },
    preferredVersions: {
      type: "object",
      properties: {
        php: {
          anyOf: [
            { $ref: "#/definitions/SupportedPHPVersion" },
            { type: "string", const: "latest" }
          ],
          description: "The preferred PHP version to use. If not specified, the latest supported version will be used"
        },
        wp: {
          type: "string",
          description: "The preferred WordPress version to use. If not specified, the latest supported version will be used"
        }
      },
      required: ["php", "wp"],
      additionalProperties: !1,
      description: "The preferred PHP and WordPress versions to use."
    },
    features: {
      type: "object",
      properties: {
        intl: { type: "boolean" },
        networking: {
          type: "boolean",
          description: "Should boot with support for network request via wp_safe_remote_get?"
        }
      },
      additionalProperties: !1
    },
    extraLibraries: {
      type: "array",
      items: { $ref: "#/definitions/ExtraLibrary" },
      description: "Extra libraries to preload into the Playground instance."
    },
    constants: {
      $ref: "#/definitions/PHPConstants",
      description: "PHP Constants to define on every request"
    },
    plugins: {
      type: "array",
      items: {
        anyOf: [
          { type: "string" },
          { $ref: "#/definitions/FileReference" }
        ]
      },
      description: "WordPress plugins to install and activate"
    },
    siteOptions: {
      type: "object",
      additionalProperties: { type: "string" },
      properties: {
        blogname: { type: "string", description: "The site title" }
      },
      description: "WordPress site options to define"
    },
    login: {
      anyOf: [
        { type: "boolean" },
        {
          type: "object",
          properties: {
            username: { type: "string" },
            password: { type: "string" }
          },
          required: ["username", "password"],
          additionalProperties: !1
        }
      ],
      description: "User to log in as. If true, logs the user in as admin/password."
    },
    phpExtensionBundles: {
      deprecated: "No longer used. Feel free to remove it from your Blueprint."
    },
    steps: {
      type: "array",
      items: {
        anyOf: [
          { $ref: "#/definitions/StepDefinition" },
          { type: "string" },
          { not: {} },
          { type: "boolean", const: !1 },
          { type: "null" }
        ]
      },
      description: "The steps to run after every other operation in this Blueprint was executed."
    },
    $schema: { type: "string" }
  }
}, Bt = {
  enum: ["8.4", "8.3", "8.2", "8.1", "8.0", "7.4", "7.3", "7.2"]
}, Mt = {
  additionalProperties: { type: ["string", "boolean", "number"] }
}, Ar = Object.prototype.hasOwnProperty;
function Q(r, { instancePath: t = "", parentData: p, parentDataProperty: u, rootData: c = r } = {}) {
  let s = null, e = 0;
  const d = e;
  let h = !1;
  const D = e;
  if (e === e)
    if (r && typeof r == "object" && !Array.isArray(r)) {
      let z;
      if (r.resource === void 0 && (z = "resource") || r.path === void 0 && (z = "path")) {
        const ee = {
          instancePath: t,
          schemaPath: "#/definitions/VFSReference/required",
          keyword: "required",
          params: { missingProperty: z },
          message: "must have required property '" + z + "'"
        };
        s === null ? s = [ee] : s.push(ee), e++;
      } else {
        const ee = e;
        for (const l in r)
          if (!(l === "resource" || l === "path")) {
            const j = {
              instancePath: t,
              schemaPath: "#/definitions/VFSReference/additionalProperties",
              keyword: "additionalProperties",
              params: { additionalProperty: l },
              message: "must NOT have additional properties"
            };
            s === null ? s = [j] : s.push(j), e++;
            break;
          }
        if (ee === e) {
          if (r.resource !== void 0) {
            let l = r.resource;
            const j = e;
            if (typeof l != "string") {
              const $ = {
                instancePath: t + "/resource",
                schemaPath: "#/definitions/VFSReference/properties/resource/type",
                keyword: "type",
                params: { type: "string" },
                message: "must be string"
              };
              s === null ? s = [$] : s.push($), e++;
            }
            if (l !== "vfs") {
              const $ = {
                instancePath: t + "/resource",
                schemaPath: "#/definitions/VFSReference/properties/resource/const",
                keyword: "const",
                params: { allowedValue: "vfs" },
                message: "must be equal to constant"
              };
              s === null ? s = [$] : s.push($), e++;
            }
            var T = j === e;
          } else
            var T = !0;
          if (T)
            if (r.path !== void 0) {
              const l = e;
              if (typeof r.path != "string") {
                const $ = {
                  instancePath: t + "/path",
                  schemaPath: "#/definitions/VFSReference/properties/path/type",
                  keyword: "type",
                  params: { type: "string" },
                  message: "must be string"
                };
                s === null ? s = [$] : s.push($), e++;
              }
              var T = l === e;
            } else
              var T = !0;
        }
      }
    } else {
      const z = {
        instancePath: t,
        schemaPath: "#/definitions/VFSReference/type",
        keyword: "type",
        params: { type: "object" },
        message: "must be object"
      };
      s === null ? s = [z] : s.push(z), e++;
    }
  var _ = D === e;
  if (h = h || _, !h) {
    const z = e;
    if (e === e)
      if (r && typeof r == "object" && !Array.isArray(r)) {
        let j;
        if (r.resource === void 0 && (j = "resource") || r.name === void 0 && (j = "name") || r.contents === void 0 && (j = "contents")) {
          const $ = {
            instancePath: t,
            schemaPath: "#/definitions/LiteralReference/required",
            keyword: "required",
            params: { missingProperty: j },
            message: "must have required property '" + j + "'"
          };
          s === null ? s = [$] : s.push($), e++;
        } else {
          const $ = e;
          for (const v in r)
            if (!(v === "resource" || v === "name" || v === "contents")) {
              const w = {
                instancePath: t,
                schemaPath: "#/definitions/LiteralReference/additionalProperties",
                keyword: "additionalProperties",
                params: { additionalProperty: v },
                message: "must NOT have additional properties"
              };
              s === null ? s = [w] : s.push(w), e++;
              break;
            }
          if ($ === e) {
            if (r.resource !== void 0) {
              let v = r.resource;
              const w = e;
              if (typeof v != "string") {
                const b = {
                  instancePath: t + "/resource",
                  schemaPath: "#/definitions/LiteralReference/properties/resource/type",
                  keyword: "type",
                  params: { type: "string" },
                  message: "must be string"
                };
                s === null ? s = [b] : s.push(b), e++;
              }
              if (v !== "literal") {
                const b = {
                  instancePath: t + "/resource",
                  schemaPath: "#/definitions/LiteralReference/properties/resource/const",
                  keyword: "const",
                  params: { allowedValue: "literal" },
                  message: "must be equal to constant"
                };
                s === null ? s = [b] : s.push(b), e++;
              }
              var k = w === e;
            } else
              var k = !0;
            if (k) {
              if (r.name !== void 0) {
                const v = e;
                if (typeof r.name != "string") {
                  const b = {
                    instancePath: t + "/name",
                    schemaPath: "#/definitions/LiteralReference/properties/name/type",
                    keyword: "type",
                    params: { type: "string" },
                    message: "must be string"
                  };
                  s === null ? s = [b] : s.push(b), e++;
                }
                var k = v === e;
              } else
                var k = !0;
              if (k)
                if (r.contents !== void 0) {
                  let v = r.contents;
                  const w = e, b = e;
                  let g = !1;
                  const y = e;
                  if (typeof v != "string") {
                    const L = {
                      instancePath: t + "/contents",
                      schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/0/type",
                      keyword: "type",
                      params: { type: "string" },
                      message: "must be string"
                    };
                    s === null ? s = [L] : s.push(L), e++;
                  }
                  var R = y === e;
                  if (g = g || R, !g) {
                    const L = e;
                    if (e === L)
                      if (v && typeof v == "object" && !Array.isArray(v)) {
                        let F;
                        if (v.BYTES_PER_ELEMENT === void 0 && (F = "BYTES_PER_ELEMENT") || v.buffer === void 0 && (F = "buffer") || v.byteLength === void 0 && (F = "byteLength") || v.byteOffset === void 0 && (F = "byteOffset") || v.length === void 0 && (F = "length")) {
                          const U = {
                            instancePath: t + "/contents",
                            schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/required",
                            keyword: "required",
                            params: {
                              missingProperty: F
                            },
                            message: "must have required property '" + F + "'"
                          };
                          s === null ? s = [U] : s.push(U), e++;
                        } else {
                          const U = e;
                          for (const C in v)
                            if (!(C === "BYTES_PER_ELEMENT" || C === "buffer" || C === "byteLength" || C === "byteOffset" || C === "length")) {
                              let I = v[C];
                              const K = e;
                              if (!(typeof I == "number" && isFinite(
                                I
                              ))) {
                                const A = {
                                  instancePath: t + "/contents/" + C.replace(
                                    /~/g,
                                    "~0"
                                  ).replace(
                                    /\//g,
                                    "~1"
                                  ),
                                  schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/additionalProperties/type",
                                  keyword: "type",
                                  params: {
                                    type: "number"
                                  },
                                  message: "must be number"
                                };
                                s === null ? s = [
                                  A
                                ] : s.push(
                                  A
                                ), e++;
                              }
                              var m = K === e;
                              if (!m)
                                break;
                            }
                          if (U === e) {
                            if (v.BYTES_PER_ELEMENT !== void 0) {
                              let C = v.BYTES_PER_ELEMENT;
                              const I = e;
                              if (!(typeof C == "number" && isFinite(
                                C
                              ))) {
                                const K = {
                                  instancePath: t + "/contents/BYTES_PER_ELEMENT",
                                  schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/properties/BYTES_PER_ELEMENT/type",
                                  keyword: "type",
                                  params: {
                                    type: "number"
                                  },
                                  message: "must be number"
                                };
                                s === null ? s = [
                                  K
                                ] : s.push(
                                  K
                                ), e++;
                              }
                              var W = I === e;
                            } else
                              var W = !0;
                            if (W) {
                              if (v.buffer !== void 0) {
                                let C = v.buffer;
                                const I = e;
                                if (e === I)
                                  if (C && typeof C == "object" && !Array.isArray(
                                    C
                                  )) {
                                    let A;
                                    if (C.byteLength === void 0 && (A = "byteLength")) {
                                      const Z = {
                                        instancePath: t + "/contents/buffer",
                                        schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/required",
                                        keyword: "required",
                                        params: {
                                          missingProperty: A
                                        },
                                        message: "must have required property '" + A + "'"
                                      };
                                      s === null ? s = [
                                        Z
                                      ] : s.push(
                                        Z
                                      ), e++;
                                    } else {
                                      const Z = e;
                                      for (const B in C)
                                        if (B !== "byteLength") {
                                          const V = {
                                            instancePath: t + "/contents/buffer",
                                            schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/additionalProperties",
                                            keyword: "additionalProperties",
                                            params: {
                                              additionalProperty: B
                                            },
                                            message: "must NOT have additional properties"
                                          };
                                          s === null ? s = [
                                            V
                                          ] : s.push(
                                            V
                                          ), e++;
                                          break;
                                        }
                                      if (Z === e && C.byteLength !== void 0) {
                                        let B = C.byteLength;
                                        if (!(typeof B == "number" && isFinite(
                                          B
                                        ))) {
                                          const V = {
                                            instancePath: t + "/contents/buffer/byteLength",
                                            schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/properties/byteLength/type",
                                            keyword: "type",
                                            params: {
                                              type: "number"
                                            },
                                            message: "must be number"
                                          };
                                          s === null ? s = [
                                            V
                                          ] : s.push(
                                            V
                                          ), e++;
                                        }
                                      }
                                    }
                                  } else {
                                    const A = {
                                      instancePath: t + "/contents/buffer",
                                      schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/type",
                                      keyword: "type",
                                      params: {
                                        type: "object"
                                      },
                                      message: "must be object"
                                    };
                                    s === null ? s = [
                                      A
                                    ] : s.push(
                                      A
                                    ), e++;
                                  }
                                var W = I === e;
                              } else
                                var W = !0;
                              if (W) {
                                if (v.byteLength !== void 0) {
                                  let C = v.byteLength;
                                  const I = e;
                                  if (!(typeof C == "number" && isFinite(
                                    C
                                  ))) {
                                    const A = {
                                      instancePath: t + "/contents/byteLength",
                                      schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/properties/byteLength/type",
                                      keyword: "type",
                                      params: {
                                        type: "number"
                                      },
                                      message: "must be number"
                                    };
                                    s === null ? s = [
                                      A
                                    ] : s.push(
                                      A
                                    ), e++;
                                  }
                                  var W = I === e;
                                } else
                                  var W = !0;
                                if (W) {
                                  if (v.byteOffset !== void 0) {
                                    let C = v.byteOffset;
                                    const I = e;
                                    if (!(typeof C == "number" && isFinite(
                                      C
                                    ))) {
                                      const A = {
                                        instancePath: t + "/contents/byteOffset",
                                        schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/properties/byteOffset/type",
                                        keyword: "type",
                                        params: {
                                          type: "number"
                                        },
                                        message: "must be number"
                                      };
                                      s === null ? s = [
                                        A
                                      ] : s.push(
                                        A
                                      ), e++;
                                    }
                                    var W = I === e;
                                  } else
                                    var W = !0;
                                  if (W)
                                    if (v.length !== void 0) {
                                      let C = v.length;
                                      const I = e;
                                      if (!(typeof C == "number" && isFinite(
                                        C
                                      ))) {
                                        const A = {
                                          instancePath: t + "/contents/length",
                                          schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/properties/length/type",
                                          keyword: "type",
                                          params: {
                                            type: "number"
                                          },
                                          message: "must be number"
                                        };
                                        s === null ? s = [
                                          A
                                        ] : s.push(
                                          A
                                        ), e++;
                                      }
                                      var W = I === e;
                                    } else
                                      var W = !0;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        const F = {
                          instancePath: t + "/contents",
                          schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf/1/type",
                          keyword: "type",
                          params: { type: "object" },
                          message: "must be object"
                        };
                        s === null ? s = [F] : s.push(F), e++;
                      }
                    var R = L === e;
                    g = g || R;
                  }
                  if (g)
                    e = b, s !== null && (b ? s.length = b : s = null);
                  else {
                    const L = {
                      instancePath: t + "/contents",
                      schemaPath: "#/definitions/LiteralReference/properties/contents/anyOf",
                      keyword: "anyOf",
                      params: {},
                      message: "must match a schema in anyOf"
                    };
                    s === null ? s = [L] : s.push(L), e++;
                  }
                  var k = w === e;
                } else
                  var k = !0;
            }
          }
        }
      } else {
        const j = {
          instancePath: t,
          schemaPath: "#/definitions/LiteralReference/type",
          keyword: "type",
          params: { type: "object" },
          message: "must be object"
        };
        s === null ? s = [j] : s.push(j), e++;
      }
    var _ = z === e;
    if (h = h || _, !h) {
      const j = e;
      if (e === e)
        if (r && typeof r == "object" && !Array.isArray(r)) {
          let w;
          if (r.resource === void 0 && (w = "resource") || r.slug === void 0 && (w = "slug")) {
            const b = {
              instancePath: t,
              schemaPath: "#/definitions/CoreThemeReference/required",
              keyword: "required",
              params: { missingProperty: w },
              message: "must have required property '" + w + "'"
            };
            s === null ? s = [b] : s.push(b), e++;
          } else {
            const b = e;
            for (const g in r)
              if (!(g === "resource" || g === "slug")) {
                const y = {
                  instancePath: t,
                  schemaPath: "#/definitions/CoreThemeReference/additionalProperties",
                  keyword: "additionalProperties",
                  params: { additionalProperty: g },
                  message: "must NOT have additional properties"
                };
                s === null ? s = [y] : s.push(y), e++;
                break;
              }
            if (b === e) {
              if (r.resource !== void 0) {
                let g = r.resource;
                const y = e;
                if (typeof g != "string") {
                  const E = {
                    instancePath: t + "/resource",
                    schemaPath: "#/definitions/CoreThemeReference/properties/resource/type",
                    keyword: "type",
                    params: { type: "string" },
                    message: "must be string"
                  };
                  s === null ? s = [E] : s.push(E), e++;
                }
                if (g !== "wordpress.org/themes") {
                  const E = {
                    instancePath: t + "/resource",
                    schemaPath: "#/definitions/CoreThemeReference/properties/resource/const",
                    keyword: "const",
                    params: {
                      allowedValue: "wordpress.org/themes"
                    },
                    message: "must be equal to constant"
                  };
                  s === null ? s = [E] : s.push(E), e++;
                }
                var M = y === e;
              } else
                var M = !0;
              if (M)
                if (r.slug !== void 0) {
                  const g = e;
                  if (typeof r.slug != "string") {
                    const E = {
                      instancePath: t + "/slug",
                      schemaPath: "#/definitions/CoreThemeReference/properties/slug/type",
                      keyword: "type",
                      params: { type: "string" },
                      message: "must be string"
                    };
                    s === null ? s = [E] : s.push(E), e++;
                  }
                  var M = g === e;
                } else
                  var M = !0;
            }
          }
        } else {
          const w = {
            instancePath: t,
            schemaPath: "#/definitions/CoreThemeReference/type",
            keyword: "type",
            params: { type: "object" },
            message: "must be object"
          };
          s === null ? s = [w] : s.push(w), e++;
        }
      var _ = j === e;
      if (h = h || _, !h) {
        const w = e;
        if (e === e)
          if (r && typeof r == "object" && !Array.isArray(r)) {
            let y;
            if (r.resource === void 0 && (y = "resource") || r.slug === void 0 && (y = "slug")) {
              const E = {
                instancePath: t,
                schemaPath: "#/definitions/CorePluginReference/required",
                keyword: "required",
                params: { missingProperty: y },
                message: "must have required property '" + y + "'"
              };
              s === null ? s = [E] : s.push(E), e++;
            } else {
              const E = e;
              for (const L in r)
                if (!(L === "resource" || L === "slug")) {
                  const x = {
                    instancePath: t,
                    schemaPath: "#/definitions/CorePluginReference/additionalProperties",
                    keyword: "additionalProperties",
                    params: { additionalProperty: L },
                    message: "must NOT have additional properties"
                  };
                  s === null ? s = [x] : s.push(x), e++;
                  break;
                }
              if (E === e) {
                if (r.resource !== void 0) {
                  let L = r.resource;
                  const x = e;
                  if (typeof L != "string") {
                    const F = {
                      instancePath: t + "/resource",
                      schemaPath: "#/definitions/CorePluginReference/properties/resource/type",
                      keyword: "type",
                      params: { type: "string" },
                      message: "must be string"
                    };
                    s === null ? s = [F] : s.push(F), e++;
                  }
                  if (L !== "wordpress.org/plugins") {
                    const F = {
                      instancePath: t + "/resource",
                      schemaPath: "#/definitions/CorePluginReference/properties/resource/const",
                      keyword: "const",
                      params: {
                        allowedValue: "wordpress.org/plugins"
                      },
                      message: "must be equal to constant"
                    };
                    s === null ? s = [F] : s.push(F), e++;
                  }
                  var Y = x === e;
                } else
                  var Y = !0;
                if (Y)
                  if (r.slug !== void 0) {
                    const L = e;
                    if (typeof r.slug != "string") {
                      const F = {
                        instancePath: t + "/slug",
                        schemaPath: "#/definitions/CorePluginReference/properties/slug/type",
                        keyword: "type",
                        params: { type: "string" },
                        message: "must be string"
                      };
                      s === null ? s = [F] : s.push(F), e++;
                    }
                    var Y = L === e;
                  } else
                    var Y = !0;
              }
            }
          } else {
            const y = {
              instancePath: t,
              schemaPath: "#/definitions/CorePluginReference/type",
              keyword: "type",
              params: { type: "object" },
              message: "must be object"
            };
            s === null ? s = [y] : s.push(y), e++;
          }
        var _ = w === e;
        if (h = h || _, !h) {
          const y = e;
          if (e === e)
            if (r && typeof r == "object" && !Array.isArray(r)) {
              let x;
              if (r.resource === void 0 && (x = "resource") || r.url === void 0 && (x = "url")) {
                const F = {
                  instancePath: t,
                  schemaPath: "#/definitions/UrlReference/required",
                  keyword: "required",
                  params: { missingProperty: x },
                  message: "must have required property '" + x + "'"
                };
                s === null ? s = [F] : s.push(F), e++;
              } else {
                const F = e;
                for (const U in r)
                  if (!(U === "resource" || U === "url" || U === "caption")) {
                    const C = {
                      instancePath: t,
                      schemaPath: "#/definitions/UrlReference/additionalProperties",
                      keyword: "additionalProperties",
                      params: {
                        additionalProperty: U
                      },
                      message: "must NOT have additional properties"
                    };
                    s === null ? s = [C] : s.push(C), e++;
                    break;
                  }
                if (F === e) {
                  if (r.resource !== void 0) {
                    let U = r.resource;
                    const C = e;
                    if (typeof U != "string") {
                      const I = {
                        instancePath: t + "/resource",
                        schemaPath: "#/definitions/UrlReference/properties/resource/type",
                        keyword: "type",
                        params: { type: "string" },
                        message: "must be string"
                      };
                      s === null ? s = [I] : s.push(I), e++;
                    }
                    if (U !== "url") {
                      const I = {
                        instancePath: t + "/resource",
                        schemaPath: "#/definitions/UrlReference/properties/resource/const",
                        keyword: "const",
                        params: { allowedValue: "url" },
                        message: "must be equal to constant"
                      };
                      s === null ? s = [I] : s.push(I), e++;
                    }
                    var P = C === e;
                  } else
                    var P = !0;
                  if (P) {
                    if (r.url !== void 0) {
                      const U = e;
                      if (typeof r.url != "string") {
                        const I = {
                          instancePath: t + "/url",
                          schemaPath: "#/definitions/UrlReference/properties/url/type",
                          keyword: "type",
                          params: { type: "string" },
                          message: "must be string"
                        };
                        s === null ? s = [I] : s.push(I), e++;
                      }
                      var P = U === e;
                    } else
                      var P = !0;
                    if (P)
                      if (r.caption !== void 0) {
                        const U = e;
                        if (typeof r.caption != "string") {
                          const I = {
                            instancePath: t + "/caption",
                            schemaPath: "#/definitions/UrlReference/properties/caption/type",
                            keyword: "type",
                            params: {
                              type: "string"
                            },
                            message: "must be string"
                          };
                          s === null ? s = [I] : s.push(I), e++;
                        }
                        var P = U === e;
                      } else
                        var P = !0;
                  }
                }
              }
            } else {
              const x = {
                instancePath: t,
                schemaPath: "#/definitions/UrlReference/type",
                keyword: "type",
                params: { type: "object" },
                message: "must be object"
              };
              s === null ? s = [x] : s.push(x), e++;
            }
          var _ = y === e;
          if (h = h || _, !h) {
            const x = e;
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let C;
                if (r.resource === void 0 && (C = "resource") || r.path === void 0 && (C = "path")) {
                  const I = {
                    instancePath: t,
                    schemaPath: "#/definitions/BundledReference/required",
                    keyword: "required",
                    params: { missingProperty: C },
                    message: "must have required property '" + C + "'"
                  };
                  s === null ? s = [I] : s.push(I), e++;
                } else {
                  const I = e;
                  for (const K in r)
                    if (!(K === "resource" || K === "path")) {
                      const A = {
                        instancePath: t,
                        schemaPath: "#/definitions/BundledReference/additionalProperties",
                        keyword: "additionalProperties",
                        params: {
                          additionalProperty: K
                        },
                        message: "must NOT have additional properties"
                      };
                      s === null ? s = [A] : s.push(A), e++;
                      break;
                    }
                  if (I === e) {
                    if (r.resource !== void 0) {
                      let K = r.resource;
                      const A = e;
                      if (typeof K != "string") {
                        const Z = {
                          instancePath: t + "/resource",
                          schemaPath: "#/definitions/BundledReference/properties/resource/type",
                          keyword: "type",
                          params: { type: "string" },
                          message: "must be string"
                        };
                        s === null ? s = [Z] : s.push(Z), e++;
                      }
                      if (K !== "bundled") {
                        const Z = {
                          instancePath: t + "/resource",
                          schemaPath: "#/definitions/BundledReference/properties/resource/const",
                          keyword: "const",
                          params: {
                            allowedValue: "bundled"
                          },
                          message: "must be equal to constant"
                        };
                        s === null ? s = [Z] : s.push(Z), e++;
                      }
                      var X = A === e;
                    } else
                      var X = !0;
                    if (X)
                      if (r.path !== void 0) {
                        const K = e;
                        if (typeof r.path != "string") {
                          const Z = {
                            instancePath: t + "/path",
                            schemaPath: "#/definitions/BundledReference/properties/path/type",
                            keyword: "type",
                            params: {
                              type: "string"
                            },
                            message: "must be string"
                          };
                          s === null ? s = [Z] : s.push(Z), e++;
                        }
                        var X = K === e;
                      } else
                        var X = !0;
                  }
                }
              } else {
                const C = {
                  instancePath: t,
                  schemaPath: "#/definitions/BundledReference/type",
                  keyword: "type",
                  params: { type: "object" },
                  message: "must be object"
                };
                s === null ? s = [C] : s.push(C), e++;
              }
            var _ = x === e;
            h = h || _;
          }
        }
      }
    }
  }
  if (h)
    e = d, s !== null && (d ? s.length = d : s = null);
  else {
    const z = {
      instancePath: t,
      schemaPath: "#/anyOf",
      keyword: "anyOf",
      params: {},
      message: "must match a schema in anyOf"
    };
    return s === null ? s = [z] : s.push(z), e++, Q.errors = s, !1;
  }
  return Q.errors = s, e === 0;
}
const Xe = {
  oneOf: [
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "activatePlugin" },
        pluginPath: {
          type: "string",
          description: "Path to the plugin directory as absolute path (/wordpress/wp-content/plugins/plugin-name); or the plugin entry file relative to the plugins directory (plugin-name/plugin-name.php)."
        },
        pluginName: {
          type: "string",
          description: "Optional. Plugin name to display in the progress bar."
        }
      },
      required: ["pluginPath", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "activateTheme" },
        themeFolderName: {
          type: "string",
          description: "The name of the theme folder inside wp-content/themes/"
        }
      },
      required: ["step", "themeFolderName"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "cp" },
        fromPath: { type: "string", description: "Source path" },
        toPath: { type: "string", description: "Target path" }
      },
      required: ["fromPath", "step", "toPath"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "defineWpConfigConsts" },
        consts: {
          type: "object",
          additionalProperties: {},
          description: "The constants to define"
        },
        method: {
          type: "string",
          enum: ["rewrite-wp-config", "define-before-run"],
          description: `The method of defining the constants in wp-config.php. Possible values are:

- rewrite-wp-config: Default. Rewrites the wp-config.php file to                      explicitly call define() with the requested                      name and value. This method alters the file                      on the disk, but it doesn't conflict with                      existing define() calls in wp-config.php.

- define-before-run: Defines the constant before running the requested                      script. It doesn't alter any files on the disk, but                      constants defined this way may conflict with existing                      define() calls in wp-config.php.`
        },
        virtualize: {
          type: "boolean",
          deprecated: `This option is noop and will be removed in a future version.
This option is only kept in here to avoid breaking Blueprint schema validation
for existing apps using this option.`
        }
      },
      required: ["consts", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "defineSiteUrl" },
        siteUrl: { type: "string", description: "The URL" }
      },
      required: ["siteUrl", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "enableMultisite" },
        wpCliPath: { type: "string", description: "wp-cli.phar path" }
      },
      required: ["step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "importWxr" },
        file: {
          $ref: "#/definitions/FileReference",
          description: "The file to import"
        },
        importer: {
          type: "string",
          enum: ["data-liberation", "default"],
          description: "The importer to use. Possible values:\n\n- `default`: The importer from https://github.com/humanmade/WordPress-Importer\n- `data-liberation`: The experimental Data Liberation WXR importer developed at                      https://github.com/WordPress/wordpress-playground/issues/1894\n\nThis option is deprecated. The syntax will not be removed, but once the Data Liberation importer matures, it will become the only supported importer and the `importer` option will be ignored.",
          deprecated: !0
        }
      },
      required: ["file", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: {
          type: "string",
          const: "importThemeStarterContent",
          description: "The step identifier."
        },
        themeSlug: {
          type: "string",
          description: "The name of the theme to import content from."
        }
      },
      required: ["step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "importWordPressFiles" },
        wordPressFilesZip: {
          $ref: "#/definitions/FileReference",
          description: "The zip file containing the top-level WordPress files and directories."
        },
        pathInZip: {
          type: "string",
          description: "The path inside the zip file where the WordPress files are."
        }
      },
      required: ["step", "wordPressFilesZip"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        ifAlreadyInstalled: {
          type: "string",
          enum: ["overwrite", "skip", "error"],
          description: "What to do if the asset already exists."
        },
        step: {
          type: "string",
          const: "installPlugin",
          description: "The step identifier."
        },
        pluginData: {
          anyOf: [
            { $ref: "#/definitions/FileReference" },
            { $ref: "#/definitions/DirectoryReference" }
          ],
          description: "The plugin files to install. It can be a plugin zip file, a single PHP file, or a directory containing all the plugin files at its root."
        },
        pluginZipFile: {
          $ref: "#/definitions/FileReference",
          deprecated: ". Use 'pluginData' instead."
        },
        options: {
          $ref: "#/definitions/InstallPluginOptions",
          description: "Optional installation options."
        }
      },
      required: ["pluginData", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        ifAlreadyInstalled: {
          type: "string",
          enum: ["overwrite", "skip", "error"],
          description: "What to do if the asset already exists."
        },
        step: {
          type: "string",
          const: "installTheme",
          description: "The step identifier."
        },
        themeData: {
          anyOf: [
            { $ref: "#/definitions/FileReference" },
            { $ref: "#/definitions/DirectoryReference" }
          ],
          description: "The theme files to install. It can be either a theme zip file, or a directory containing all the theme files at its root."
        },
        themeZipFile: {
          $ref: "#/definitions/FileReference",
          deprecated: ". Use 'themeData' instead."
        },
        options: {
          $ref: "#/definitions/InstallThemeOptions",
          description: "Optional installation options."
        }
      },
      required: ["step", "themeData"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "login" },
        username: {
          type: "string",
          description: "The user to log in as. Defaults to 'admin'."
        },
        password: {
          type: "string",
          deprecated: `The password field is deprecated and will be removed in a future version.
Only the username field is required for user authentication.`
        }
      },
      required: ["step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "mkdir" },
        path: {
          type: "string",
          description: "The path of the directory you want to create"
        }
      },
      required: ["path", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "mv" },
        fromPath: { type: "string", description: "Source path" },
        toPath: { type: "string", description: "Target path" }
      },
      required: ["fromPath", "step", "toPath"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "resetData" }
      },
      required: ["step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "request" },
        request: {
          $ref: "#/definitions/PHPRequest",
          description: "Request details (See /wordpress-playground/api/universal/interface/PHPRequest)"
        }
      },
      required: ["request", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "rm" },
        path: { type: "string", description: "The path to remove" }
      },
      required: ["path", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "rmdir" },
        path: { type: "string", description: "The path to remove" }
      },
      required: ["path", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: {
          type: "string",
          const: "runPHP",
          description: "The step identifier."
        },
        code: { type: "string", description: "The PHP code to run." }
      },
      required: ["code", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "runPHPWithOptions" },
        options: {
          $ref: "#/definitions/PHPRunOptions",
          description: "Run options (See /wordpress-playground/api/universal/interface/PHPRunOptions/))"
        }
      },
      required: ["options", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "runWpInstallationWizard" },
        options: { $ref: "#/definitions/WordPressInstallationOptions" }
      },
      required: ["options", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: {
          type: "string",
          const: "runSql",
          description: "The step identifier."
        },
        sql: {
          $ref: "#/definitions/FileReference",
          description: "The SQL to run. Each non-empty line must contain a valid SQL query."
        }
      },
      required: ["sql", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: {
          type: "string",
          const: "setSiteOptions",
          description: 'The name of the step. Must be "setSiteOptions".'
        },
        options: {
          type: "object",
          additionalProperties: {},
          description: "The options to set on the site."
        }
      },
      required: ["options", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "unzip" },
        zipFile: {
          $ref: "#/definitions/FileReference",
          description: "The zip file to extract"
        },
        zipPath: {
          type: "string",
          description: "The path of the zip file to extract",
          deprecated: "Use zipFile instead."
        },
        extractToPath: {
          type: "string",
          description: "The path to extract the zip file to"
        }
      },
      required: ["extractToPath", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "updateUserMeta" },
        meta: {
          type: "object",
          additionalProperties: {},
          description: 'An object of user meta values to set, e.g. { "first_name": "John" }'
        },
        userId: { type: "number", description: "User ID" }
      },
      required: ["meta", "step", "userId"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "writeFile" },
        path: {
          type: "string",
          description: "The path of the file to write to"
        },
        data: {
          anyOf: [
            { $ref: "#/definitions/FileReference" },
            { type: "string" },
            {
              type: "object",
              properties: {
                BYTES_PER_ELEMENT: { type: "number" },
                buffer: {
                  type: "object",
                  properties: {
                    byteLength: { type: "number" }
                  },
                  required: ["byteLength"],
                  additionalProperties: !1
                },
                byteLength: { type: "number" },
                byteOffset: { type: "number" },
                length: { type: "number" }
              },
              required: [
                "BYTES_PER_ELEMENT",
                "buffer",
                "byteLength",
                "byteOffset",
                "length"
              ],
              additionalProperties: { type: "number" }
            }
          ],
          description: "The data to write"
        }
      },
      required: ["data", "path", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "writeFiles" },
        writeToPath: {
          type: "string",
          description: "The path of the file to write to"
        },
        filesTree: {
          $ref: "#/definitions/DirectoryReference",
          description: "The 'filesTree' defines the directory structure, supporting 'literal:directory' or 'git:directory' types. The 'name' represents the root directory, while 'files' is an object where keys are file paths, and values contain either file content as a string or nested objects for subdirectories."
        }
      },
      required: ["filesTree", "step", "writeToPath"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: {
          type: "string",
          const: "wp-cli",
          description: "The step identifier."
        },
        command: {
          anyOf: [
            { type: "string" },
            { type: "array", items: { type: "string" } }
          ],
          description: "The WP CLI command to run."
        },
        wpCliPath: { type: "string", description: "wp-cli.phar path" }
      },
      required: ["command", "step"]
    },
    {
      type: "object",
      additionalProperties: !1,
      properties: {
        progress: {
          type: "object",
          properties: {
            weight: { type: "number" },
            caption: { type: "string" }
          },
          additionalProperties: !1
        },
        step: { type: "string", const: "setSiteLanguage" },
        language: {
          type: "string",
          description: "The language to set, e.g. 'en_US'"
        }
      },
      required: ["language", "step"]
    }
  ]
}, Vt = {
  additionalProperties: {
    anyOf: [
      { $ref: "#/definitions/FileTree" },
      { type: ["object", "string"] }
    ]
  }
}, sr = { validate: Le };
function Le(r, { instancePath: t = "", parentData: p, parentDataProperty: u, rootData: c = r } = {}) {
  let s = null, e = 0;
  if (e === 0)
    if (r && typeof r == "object" && !Array.isArray(r))
      for (const D in r) {
        let S = r[D];
        const T = e, _ = e;
        let k = !1;
        const R = e;
        sr.validate(S, {
          instancePath: t + "/" + D.replace(/~/g, "~0").replace(/\//g, "~1"),
          parentData: r,
          parentDataProperty: D,
          rootData: c
        }) || (s = s === null ? sr.validate.errors : s.concat(sr.validate.errors), e = s.length);
        var d = R === e;
        if (k = k || d, !k) {
          const m = e;
          if (!(S && typeof S == "object" && !Array.isArray(S)) && typeof S != "string") {
            const M = {
              instancePath: t + "/" + D.replace(/~/g, "~0").replace(/\//g, "~1"),
              schemaPath: "#/additionalProperties/anyOf/1/type",
              keyword: "type",
              params: {
                type: Vt.additionalProperties.anyOf[1].type
              },
              message: "must be object,string"
            };
            s === null ? s = [M] : s.push(M), e++;
          }
          var d = m === e;
          k = k || d;
        }
        if (k)
          e = _, s !== null && (_ ? s.length = _ : s = null);
        else {
          const m = {
            instancePath: t + "/" + D.replace(/~/g, "~0").replace(/\//g, "~1"),
            schemaPath: "#/additionalProperties/anyOf",
            keyword: "anyOf",
            params: {},
            message: "must match a schema in anyOf"
          };
          return s === null ? s = [m] : s.push(m), e++, Le.errors = s, !1;
        }
        var h = T === e;
        if (!h)
          break;
      }
    else
      return Le.errors = [
        {
          instancePath: t,
          schemaPath: "#/type",
          keyword: "type",
          params: { type: "object" },
          message: "must be object"
        }
      ], !1;
  return Le.errors = s, e === 0;
}
function ke(r, { instancePath: t = "", parentData: p, parentDataProperty: u, rootData: c = r } = {}) {
  let s = null, e = 0;
  if (e === 0)
    if (r && typeof r == "object" && !Array.isArray(r)) {
      let h;
      if (r.files === void 0 && (h = "files") || r.name === void 0 && (h = "name") || r.resource === void 0 && (h = "resource"))
        return ke.errors = [
          {
            instancePath: t,
            schemaPath: "#/required",
            keyword: "required",
            params: { missingProperty: h },
            message: "must have required property '" + h + "'"
          }
        ], !1;
      {
        const D = e;
        for (const S in r)
          if (!(S === "resource" || S === "files" || S === "name"))
            return ke.errors = [
              {
                instancePath: t,
                schemaPath: "#/additionalProperties",
                keyword: "additionalProperties",
                params: { additionalProperty: S },
                message: "must NOT have additional properties"
              }
            ], !1;
        if (D === e) {
          if (r.resource !== void 0) {
            let S = r.resource;
            const T = e;
            if (typeof S != "string")
              return ke.errors = [
                {
                  instancePath: t + "/resource",
                  schemaPath: "#/properties/resource/type",
                  keyword: "type",
                  params: { type: "string" },
                  message: "must be string"
                }
              ], !1;
            if (S !== "literal:directory")
              return ke.errors = [
                {
                  instancePath: t + "/resource",
                  schemaPath: "#/properties/resource/const",
                  keyword: "const",
                  params: {
                    allowedValue: "literal:directory"
                  },
                  message: "must be equal to constant"
                }
              ], !1;
            var d = T === e;
          } else
            var d = !0;
          if (d) {
            if (r.files !== void 0) {
              const S = e;
              Le(r.files, {
                instancePath: t + "/files",
                parentData: r,
                parentDataProperty: "files",
                rootData: c
              }) || (s = s === null ? Le.errors : s.concat(Le.errors), e = s.length);
              var d = S === e;
            } else
              var d = !0;
            if (d)
              if (r.name !== void 0) {
                const S = e;
                if (typeof r.name != "string")
                  return ke.errors = [
                    {
                      instancePath: t + "/name",
                      schemaPath: "#/properties/name/type",
                      keyword: "type",
                      params: { type: "string" },
                      message: "must be string"
                    }
                  ], !1;
                var d = S === e;
              } else
                var d = !0;
          }
        }
      }
    } else
      return ke.errors = [
        {
          instancePath: t,
          schemaPath: "#/type",
          keyword: "type",
          params: { type: "object" },
          message: "must be object"
        }
      ], !1;
  return ke.errors = s, e === 0;
}
function he(r, { instancePath: t = "", parentData: p, parentDataProperty: u, rootData: c = r } = {}) {
  let s = null, e = 0;
  const d = e;
  let h = !1;
  const D = e;
  if (e === e)
    if (r && typeof r == "object" && !Array.isArray(r)) {
      let k;
      if (r.resource === void 0 && (k = "resource") || r.url === void 0 && (k = "url") || r.ref === void 0 && (k = "ref") || r.path === void 0 && (k = "path")) {
        const R = {
          instancePath: t,
          schemaPath: "#/definitions/GitDirectoryReference/required",
          keyword: "required",
          params: { missingProperty: k },
          message: "must have required property '" + k + "'"
        };
        s === null ? s = [R] : s.push(R), e++;
      } else {
        const R = e;
        for (const m in r)
          if (!(m === "resource" || m === "url" || m === "ref" || m === "path")) {
            const W = {
              instancePath: t,
              schemaPath: "#/definitions/GitDirectoryReference/additionalProperties",
              keyword: "additionalProperties",
              params: { additionalProperty: m },
              message: "must NOT have additional properties"
            };
            s === null ? s = [W] : s.push(W), e++;
            break;
          }
        if (R === e) {
          if (r.resource !== void 0) {
            let m = r.resource;
            const W = e;
            if (typeof m != "string") {
              const M = {
                instancePath: t + "/resource",
                schemaPath: "#/definitions/GitDirectoryReference/properties/resource/type",
                keyword: "type",
                params: { type: "string" },
                message: "must be string"
              };
              s === null ? s = [M] : s.push(M), e++;
            }
            if (m !== "git:directory") {
              const M = {
                instancePath: t + "/resource",
                schemaPath: "#/definitions/GitDirectoryReference/properties/resource/const",
                keyword: "const",
                params: { allowedValue: "git:directory" },
                message: "must be equal to constant"
              };
              s === null ? s = [M] : s.push(M), e++;
            }
            var T = W === e;
          } else
            var T = !0;
          if (T) {
            if (r.url !== void 0) {
              const m = e;
              if (typeof r.url != "string") {
                const M = {
                  instancePath: t + "/url",
                  schemaPath: "#/definitions/GitDirectoryReference/properties/url/type",
                  keyword: "type",
                  params: { type: "string" },
                  message: "must be string"
                };
                s === null ? s = [M] : s.push(M), e++;
              }
              var T = m === e;
            } else
              var T = !0;
            if (T) {
              if (r.ref !== void 0) {
                const m = e;
                if (typeof r.ref != "string") {
                  const M = {
                    instancePath: t + "/ref",
                    schemaPath: "#/definitions/GitDirectoryReference/properties/ref/type",
                    keyword: "type",
                    params: { type: "string" },
                    message: "must be string"
                  };
                  s === null ? s = [M] : s.push(M), e++;
                }
                var T = m === e;
              } else
                var T = !0;
              if (T)
                if (r.path !== void 0) {
                  const m = e;
                  if (typeof r.path != "string") {
                    const M = {
                      instancePath: t + "/path",
                      schemaPath: "#/definitions/GitDirectoryReference/properties/path/type",
                      keyword: "type",
                      params: { type: "string" },
                      message: "must be string"
                    };
                    s === null ? s = [M] : s.push(M), e++;
                  }
                  var T = m === e;
                } else
                  var T = !0;
            }
          }
        }
      }
    } else {
      const k = {
        instancePath: t,
        schemaPath: "#/definitions/GitDirectoryReference/type",
        keyword: "type",
        params: { type: "object" },
        message: "must be object"
      };
      s === null ? s = [k] : s.push(k), e++;
    }
  var _ = D === e;
  if (h = h || _, !h) {
    const k = e;
    ke(r, {
      instancePath: t,
      parentData: p,
      parentDataProperty: u,
      rootData: c
    }) || (s = s === null ? ke.errors : s.concat(ke.errors), e = s.length);
    var _ = k === e;
    h = h || _;
  }
  if (h)
    e = d, s !== null && (d ? s.length = d : s = null);
  else {
    const k = {
      instancePath: t,
      schemaPath: "#/anyOf",
      keyword: "anyOf",
      params: {},
      message: "must match a schema in anyOf"
    };
    return s === null ? s = [k] : s.push(k), e++, he.errors = s, !1;
  }
  return he.errors = s, e === 0;
}
const Rr = {
  enum: ["GET", "POST", "HEAD", "OPTIONS", "PATCH", "PUT", "DELETE"]
};
function ce(r, { instancePath: t = "", parentData: p, parentDataProperty: u, rootData: c = r } = {}) {
  let s = null, e = 0;
  if (e === 0)
    if (r && typeof r == "object" && !Array.isArray(r)) {
      let M;
      if (r.url === void 0 && (M = "url"))
        return ce.errors = [
          {
            instancePath: t,
            schemaPath: "#/required",
            keyword: "required",
            params: { missingProperty: M },
            message: "must have required property '" + M + "'"
          }
        ], !1;
      {
        const Y = e;
        for (const P in r)
          if (!(P === "method" || P === "url" || P === "headers" || P === "body"))
            return ce.errors = [
              {
                instancePath: t,
                schemaPath: "#/additionalProperties",
                keyword: "additionalProperties",
                params: { additionalProperty: P },
                message: "must NOT have additional properties"
              }
            ], !1;
        if (Y === e) {
          if (r.method !== void 0) {
            let P = r.method;
            const X = e;
            if (typeof P != "string")
              return ce.errors = [
                {
                  instancePath: t + "/method",
                  schemaPath: "#/definitions/HTTPMethod/type",
                  keyword: "type",
                  params: { type: "string" },
                  message: "must be string"
                }
              ], !1;
            if (!(P === "GET" || P === "POST" || P === "HEAD" || P === "OPTIONS" || P === "PATCH" || P === "PUT" || P === "DELETE"))
              return ce.errors = [
                {
                  instancePath: t + "/method",
                  schemaPath: "#/definitions/HTTPMethod/enum",
                  keyword: "enum",
                  params: { allowedValues: Rr.enum },
                  message: "must be equal to one of the allowed values"
                }
              ], !1;
            var d = X === e;
          } else
            var d = !0;
          if (d) {
            if (r.url !== void 0) {
              const P = e;
              if (typeof r.url != "string")
                return ce.errors = [
                  {
                    instancePath: t + "/url",
                    schemaPath: "#/properties/url/type",
                    keyword: "type",
                    params: { type: "string" },
                    message: "must be string"
                  }
                ], !1;
              var d = P === e;
            } else
              var d = !0;
            if (d) {
              if (r.headers !== void 0) {
                let P = r.headers;
                const X = e;
                if (e === e)
                  if (P && typeof P == "object" && !Array.isArray(P))
                    for (const l in P) {
                      const j = e;
                      if (typeof P[l] != "string")
                        return ce.errors = [
                          {
                            instancePath: t + "/headers/" + l.replace(
                              /~/g,
                              "~0"
                            ).replace(
                              /\//g,
                              "~1"
                            ),
                            schemaPath: "#/definitions/PHPRequestHeaders/additionalProperties/type",
                            keyword: "type",
                            params: {
                              type: "string"
                            },
                            message: "must be string"
                          }
                        ], !1;
                      var h = j === e;
                      if (!h)
                        break;
                    }
                  else
                    return ce.errors = [
                      {
                        instancePath: t + "/headers",
                        schemaPath: "#/definitions/PHPRequestHeaders/type",
                        keyword: "type",
                        params: { type: "object" },
                        message: "must be object"
                      }
                    ], !1;
                var d = X === e;
              } else
                var d = !0;
              if (d)
                if (r.body !== void 0) {
                  let P = r.body;
                  const X = e, z = e;
                  let ee = !1;
                  const l = e;
                  if (typeof P != "string") {
                    const $ = {
                      instancePath: t + "/body",
                      schemaPath: "#/properties/body/anyOf/0/type",
                      keyword: "type",
                      params: { type: "string" },
                      message: "must be string"
                    };
                    s === null ? s = [$] : s.push($), e++;
                  }
                  var D = l === e;
                  if (ee = ee || D, !ee) {
                    const $ = e;
                    if (e === $)
                      if (P && typeof P == "object" && !Array.isArray(P)) {
                        let w;
                        if (P.BYTES_PER_ELEMENT === void 0 && (w = "BYTES_PER_ELEMENT") || P.buffer === void 0 && (w = "buffer") || P.byteLength === void 0 && (w = "byteLength") || P.byteOffset === void 0 && (w = "byteOffset") || P.length === void 0 && (w = "length")) {
                          const b = {
                            instancePath: t + "/body",
                            schemaPath: "#/properties/body/anyOf/1/required",
                            keyword: "required",
                            params: {
                              missingProperty: w
                            },
                            message: "must have required property '" + w + "'"
                          };
                          s === null ? s = [b] : s.push(b), e++;
                        } else {
                          const b = e;
                          for (const g in P)
                            if (!(g === "BYTES_PER_ELEMENT" || g === "buffer" || g === "byteLength" || g === "byteOffset" || g === "length")) {
                              let y = P[g];
                              const E = e;
                              if (!(typeof y == "number" && isFinite(
                                y
                              ))) {
                                const L = {
                                  instancePath: t + "/body/" + g.replace(
                                    /~/g,
                                    "~0"
                                  ).replace(
                                    /\//g,
                                    "~1"
                                  ),
                                  schemaPath: "#/properties/body/anyOf/1/additionalProperties/type",
                                  keyword: "type",
                                  params: {
                                    type: "number"
                                  },
                                  message: "must be number"
                                };
                                s === null ? s = [
                                  L
                                ] : s.push(
                                  L
                                ), e++;
                              }
                              var S = E === e;
                              if (!S)
                                break;
                            }
                          if (b === e) {
                            if (P.BYTES_PER_ELEMENT !== void 0) {
                              let g = P.BYTES_PER_ELEMENT;
                              const y = e;
                              if (!(typeof g == "number" && isFinite(
                                g
                              ))) {
                                const E = {
                                  instancePath: t + "/body/BYTES_PER_ELEMENT",
                                  schemaPath: "#/properties/body/anyOf/1/properties/BYTES_PER_ELEMENT/type",
                                  keyword: "type",
                                  params: {
                                    type: "number"
                                  },
                                  message: "must be number"
                                };
                                s === null ? s = [
                                  E
                                ] : s.push(
                                  E
                                ), e++;
                              }
                              var T = y === e;
                            } else
                              var T = !0;
                            if (T) {
                              if (P.buffer !== void 0) {
                                let g = P.buffer;
                                const y = e;
                                if (e === y)
                                  if (g && typeof g == "object" && !Array.isArray(
                                    g
                                  )) {
                                    let L;
                                    if (g.byteLength === void 0 && (L = "byteLength")) {
                                      const x = {
                                        instancePath: t + "/body/buffer",
                                        schemaPath: "#/properties/body/anyOf/1/properties/buffer/required",
                                        keyword: "required",
                                        params: {
                                          missingProperty: L
                                        },
                                        message: "must have required property '" + L + "'"
                                      };
                                      s === null ? s = [
                                        x
                                      ] : s.push(
                                        x
                                      ), e++;
                                    } else {
                                      const x = e;
                                      for (const F in g)
                                        if (F !== "byteLength") {
                                          const U = {
                                            instancePath: t + "/body/buffer",
                                            schemaPath: "#/properties/body/anyOf/1/properties/buffer/additionalProperties",
                                            keyword: "additionalProperties",
                                            params: {
                                              additionalProperty: F
                                            },
                                            message: "must NOT have additional properties"
                                          };
                                          s === null ? s = [
                                            U
                                          ] : s.push(
                                            U
                                          ), e++;
                                          break;
                                        }
                                      if (x === e && g.byteLength !== void 0) {
                                        let F = g.byteLength;
                                        if (!(typeof F == "number" && isFinite(
                                          F
                                        ))) {
                                          const U = {
                                            instancePath: t + "/body/buffer/byteLength",
                                            schemaPath: "#/properties/body/anyOf/1/properties/buffer/properties/byteLength/type",
                                            keyword: "type",
                                            params: {
                                              type: "number"
                                            },
                                            message: "must be number"
                                          };
                                          s === null ? s = [
                                            U
                                          ] : s.push(
                                            U
                                          ), e++;
                                        }
                                      }
                                    }
                                  } else {
                                    const L = {
                                      instancePath: t + "/body/buffer",
                                      schemaPath: "#/properties/body/anyOf/1/properties/buffer/type",
                                      keyword: "type",
                                      params: {
                                        type: "object"
                                      },
                                      message: "must be object"
                                    };
                                    s === null ? s = [
                                      L
                                    ] : s.push(
                                      L
                                    ), e++;
                                  }
                                var T = y === e;
                              } else
                                var T = !0;
                              if (T) {
                                if (P.byteLength !== void 0) {
                                  let g = P.byteLength;
                                  const y = e;
                                  if (!(typeof g == "number" && isFinite(
                                    g
                                  ))) {
                                    const L = {
                                      instancePath: t + "/body/byteLength",
                                      schemaPath: "#/properties/body/anyOf/1/properties/byteLength/type",
                                      keyword: "type",
                                      params: {
                                        type: "number"
                                      },
                                      message: "must be number"
                                    };
                                    s === null ? s = [
                                      L
                                    ] : s.push(
                                      L
                                    ), e++;
                                  }
                                  var T = y === e;
                                } else
                                  var T = !0;
                                if (T) {
                                  if (P.byteOffset !== void 0) {
                                    let g = P.byteOffset;
                                    const y = e;
                                    if (!(typeof g == "number" && isFinite(
                                      g
                                    ))) {
                                      const L = {
                                        instancePath: t + "/body/byteOffset",
                                        schemaPath: "#/properties/body/anyOf/1/properties/byteOffset/type",
                                        keyword: "type",
                                        params: {
                                          type: "number"
                                        },
                                        message: "must be number"
                                      };
                                      s === null ? s = [
                                        L
                                      ] : s.push(
                                        L
                                      ), e++;
                                    }
                                    var T = y === e;
                                  } else
                                    var T = !0;
                                  if (T)
                                    if (P.length !== void 0) {
                                      let g = P.length;
                                      const y = e;
                                      if (!(typeof g == "number" && isFinite(
                                        g
                                      ))) {
                                        const L = {
                                          instancePath: t + "/body/length",
                                          schemaPath: "#/properties/body/anyOf/1/properties/length/type",
                                          keyword: "type",
                                          params: {
                                            type: "number"
                                          },
                                          message: "must be number"
                                        };
                                        s === null ? s = [
                                          L
                                        ] : s.push(
                                          L
                                        ), e++;
                                      }
                                      var T = y === e;
                                    } else
                                      var T = !0;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        const w = {
                          instancePath: t + "/body",
                          schemaPath: "#/properties/body/anyOf/1/type",
                          keyword: "type",
                          params: { type: "object" },
                          message: "must be object"
                        };
                        s === null ? s = [w] : s.push(w), e++;
                      }
                    var D = $ === e;
                    if (ee = ee || D, !ee) {
                      const w = e;
                      if (e === w)
                        if (P && typeof P == "object" && !Array.isArray(P))
                          for (const g in P) {
                            let y = P[g];
                            const E = e, L = e;
                            let x = !1;
                            const F = e;
                            if (typeof y != "string") {
                              const U = {
                                instancePath: t + "/body/" + g.replace(
                                  /~/g,
                                  "~0"
                                ).replace(
                                  /\//g,
                                  "~1"
                                ),
                                schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/0/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              };
                              s === null ? s = [
                                U
                              ] : s.push(
                                U
                              ), e++;
                            }
                            var _ = F === e;
                            if (x = x || _, !x) {
                              const U = e;
                              if (e === U)
                                if (y && typeof y == "object" && !Array.isArray(
                                  y
                                )) {
                                  let I;
                                  if (y.BYTES_PER_ELEMENT === void 0 && (I = "BYTES_PER_ELEMENT") || y.buffer === void 0 && (I = "buffer") || y.byteLength === void 0 && (I = "byteLength") || y.byteOffset === void 0 && (I = "byteOffset") || y.length === void 0 && (I = "length")) {
                                    const K = {
                                      instancePath: t + "/body/" + g.replace(
                                        /~/g,
                                        "~0"
                                      ).replace(
                                        /\//g,
                                        "~1"
                                      ),
                                      schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/required",
                                      keyword: "required",
                                      params: {
                                        missingProperty: I
                                      },
                                      message: "must have required property '" + I + "'"
                                    };
                                    s === null ? s = [
                                      K
                                    ] : s.push(
                                      K
                                    ), e++;
                                  } else {
                                    const K = e;
                                    for (const A in y)
                                      if (!(A === "BYTES_PER_ELEMENT" || A === "buffer" || A === "byteLength" || A === "byteOffset" || A === "length")) {
                                        let Z = y[A];
                                        const B = e;
                                        if (!(typeof Z == "number" && isFinite(
                                          Z
                                        ))) {
                                          const V = {
                                            instancePath: t + "/body/" + g.replace(
                                              /~/g,
                                              "~0"
                                            ).replace(
                                              /\//g,
                                              "~1"
                                            ) + "/" + A.replace(
                                              /~/g,
                                              "~0"
                                            ).replace(
                                              /\//g,
                                              "~1"
                                            ),
                                            schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/additionalProperties/type",
                                            keyword: "type",
                                            params: {
                                              type: "number"
                                            },
                                            message: "must be number"
                                          };
                                          s === null ? s = [
                                            V
                                          ] : s.push(
                                            V
                                          ), e++;
                                        }
                                        var k = B === e;
                                        if (!k)
                                          break;
                                      }
                                    if (K === e) {
                                      if (y.BYTES_PER_ELEMENT !== void 0) {
                                        let A = y.BYTES_PER_ELEMENT;
                                        const Z = e;
                                        if (!(typeof A == "number" && isFinite(
                                          A
                                        ))) {
                                          const B = {
                                            instancePath: t + "/body/" + g.replace(
                                              /~/g,
                                              "~0"
                                            ).replace(
                                              /\//g,
                                              "~1"
                                            ) + "/BYTES_PER_ELEMENT",
                                            schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/BYTES_PER_ELEMENT/type",
                                            keyword: "type",
                                            params: {
                                              type: "number"
                                            },
                                            message: "must be number"
                                          };
                                          s === null ? s = [
                                            B
                                          ] : s.push(
                                            B
                                          ), e++;
                                        }
                                        var R = Z === e;
                                      } else
                                        var R = !0;
                                      if (R) {
                                        if (y.buffer !== void 0) {
                                          let A = y.buffer;
                                          const Z = e;
                                          if (e === Z)
                                            if (A && typeof A == "object" && !Array.isArray(
                                              A
                                            )) {
                                              let V;
                                              if (A.byteLength === void 0 && (V = "byteLength")) {
                                                const ie = {
                                                  instancePath: t + "/body/" + g.replace(
                                                    /~/g,
                                                    "~0"
                                                  ).replace(
                                                    /\//g,
                                                    "~1"
                                                  ) + "/buffer",
                                                  schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/required",
                                                  keyword: "required",
                                                  params: {
                                                    missingProperty: V
                                                  },
                                                  message: "must have required property '" + V + "'"
                                                };
                                                s === null ? s = [
                                                  ie
                                                ] : s.push(
                                                  ie
                                                ), e++;
                                              } else {
                                                const ie = e;
                                                for (const le in A)
                                                  if (le !== "byteLength") {
                                                    const ge = {
                                                      instancePath: t + "/body/" + g.replace(
                                                        /~/g,
                                                        "~0"
                                                      ).replace(
                                                        /\//g,
                                                        "~1"
                                                      ) + "/buffer",
                                                      schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/additionalProperties",
                                                      keyword: "additionalProperties",
                                                      params: {
                                                        additionalProperty: le
                                                      },
                                                      message: "must NOT have additional properties"
                                                    };
                                                    s === null ? s = [
                                                      ge
                                                    ] : s.push(
                                                      ge
                                                    ), e++;
                                                    break;
                                                  }
                                                if (ie === e && A.byteLength !== void 0) {
                                                  let le = A.byteLength;
                                                  if (!(typeof le == "number" && isFinite(
                                                    le
                                                  ))) {
                                                    const ge = {
                                                      instancePath: t + "/body/" + g.replace(
                                                        /~/g,
                                                        "~0"
                                                      ).replace(
                                                        /\//g,
                                                        "~1"
                                                      ) + "/buffer/byteLength",
                                                      schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/properties/byteLength/type",
                                                      keyword: "type",
                                                      params: {
                                                        type: "number"
                                                      },
                                                      message: "must be number"
                                                    };
                                                    s === null ? s = [
                                                      ge
                                                    ] : s.push(
                                                      ge
                                                    ), e++;
                                                  }
                                                }
                                              }
                                            } else {
                                              const V = {
                                                instancePath: t + "/body/" + g.replace(
                                                  /~/g,
                                                  "~0"
                                                ).replace(
                                                  /\//g,
                                                  "~1"
                                                ) + "/buffer",
                                                schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/type",
                                                keyword: "type",
                                                params: {
                                                  type: "object"
                                                },
                                                message: "must be object"
                                              };
                                              s === null ? s = [
                                                V
                                              ] : s.push(
                                                V
                                              ), e++;
                                            }
                                          var R = Z === e;
                                        } else
                                          var R = !0;
                                        if (R) {
                                          if (y.byteLength !== void 0) {
                                            let A = y.byteLength;
                                            const Z = e;
                                            if (!(typeof A == "number" && isFinite(
                                              A
                                            ))) {
                                              const V = {
                                                instancePath: t + "/body/" + g.replace(
                                                  /~/g,
                                                  "~0"
                                                ).replace(
                                                  /\//g,
                                                  "~1"
                                                ) + "/byteLength",
                                                schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/byteLength/type",
                                                keyword: "type",
                                                params: {
                                                  type: "number"
                                                },
                                                message: "must be number"
                                              };
                                              s === null ? s = [
                                                V
                                              ] : s.push(
                                                V
                                              ), e++;
                                            }
                                            var R = Z === e;
                                          } else
                                            var R = !0;
                                          if (R) {
                                            if (y.byteOffset !== void 0) {
                                              let A = y.byteOffset;
                                              const Z = e;
                                              if (!(typeof A == "number" && isFinite(
                                                A
                                              ))) {
                                                const V = {
                                                  instancePath: t + "/body/" + g.replace(
                                                    /~/g,
                                                    "~0"
                                                  ).replace(
                                                    /\//g,
                                                    "~1"
                                                  ) + "/byteOffset",
                                                  schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/byteOffset/type",
                                                  keyword: "type",
                                                  params: {
                                                    type: "number"
                                                  },
                                                  message: "must be number"
                                                };
                                                s === null ? s = [
                                                  V
                                                ] : s.push(
                                                  V
                                                ), e++;
                                              }
                                              var R = Z === e;
                                            } else
                                              var R = !0;
                                            if (R)
                                              if (y.length !== void 0) {
                                                let A = y.length;
                                                const Z = e;
                                                if (!(typeof A == "number" && isFinite(
                                                  A
                                                ))) {
                                                  const V = {
                                                    instancePath: t + "/body/" + g.replace(
                                                      /~/g,
                                                      "~0"
                                                    ).replace(
                                                      /\//g,
                                                      "~1"
                                                    ) + "/length",
                                                    schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/length/type",
                                                    keyword: "type",
                                                    params: {
                                                      type: "number"
                                                    },
                                                    message: "must be number"
                                                  };
                                                  s === null ? s = [
                                                    V
                                                  ] : s.push(
                                                    V
                                                  ), e++;
                                                }
                                                var R = Z === e;
                                              } else
                                                var R = !0;
                                          }
                                        }
                                      }
                                    }
                                  }
                                } else {
                                  const I = {
                                    instancePath: t + "/body/" + g.replace(
                                      /~/g,
                                      "~0"
                                    ).replace(
                                      /\//g,
                                      "~1"
                                    ),
                                    schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/1/type",
                                    keyword: "type",
                                    params: {
                                      type: "object"
                                    },
                                    message: "must be object"
                                  };
                                  s === null ? s = [
                                    I
                                  ] : s.push(
                                    I
                                  ), e++;
                                }
                              var _ = U === e;
                              if (x = x || _, !x) {
                                const I = e;
                                if (e === I)
                                  if (y && typeof y == "object" && !Array.isArray(
                                    y
                                  )) {
                                    let A;
                                    if (y.lastModified === void 0 && (A = "lastModified") || y.name === void 0 && (A = "name") || y.size === void 0 && (A = "size") || y.type === void 0 && (A = "type") || y.webkitRelativePath === void 0 && (A = "webkitRelativePath")) {
                                      const Z = {
                                        instancePath: t + "/body/" + g.replace(
                                          /~/g,
                                          "~0"
                                        ).replace(
                                          /\//g,
                                          "~1"
                                        ),
                                        schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/2/required",
                                        keyword: "required",
                                        params: {
                                          missingProperty: A
                                        },
                                        message: "must have required property '" + A + "'"
                                      };
                                      s === null ? s = [
                                        Z
                                      ] : s.push(
                                        Z
                                      ), e++;
                                    } else {
                                      const Z = e;
                                      for (const B in y)
                                        if (!(B === "size" || B === "type" || B === "lastModified" || B === "name" || B === "webkitRelativePath")) {
                                          const V = {
                                            instancePath: t + "/body/" + g.replace(
                                              /~/g,
                                              "~0"
                                            ).replace(
                                              /\//g,
                                              "~1"
                                            ),
                                            schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/2/additionalProperties",
                                            keyword: "additionalProperties",
                                            params: {
                                              additionalProperty: B
                                            },
                                            message: "must NOT have additional properties"
                                          };
                                          s === null ? s = [
                                            V
                                          ] : s.push(
                                            V
                                          ), e++;
                                          break;
                                        }
                                      if (Z === e) {
                                        if (y.size !== void 0) {
                                          let B = y.size;
                                          const V = e;
                                          if (!(typeof B == "number" && isFinite(
                                            B
                                          ))) {
                                            const ie = {
                                              instancePath: t + "/body/" + g.replace(
                                                /~/g,
                                                "~0"
                                              ).replace(
                                                /\//g,
                                                "~1"
                                              ) + "/size",
                                              schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/size/type",
                                              keyword: "type",
                                              params: {
                                                type: "number"
                                              },
                                              message: "must be number"
                                            };
                                            s === null ? s = [
                                              ie
                                            ] : s.push(
                                              ie
                                            ), e++;
                                          }
                                          var m = V === e;
                                        } else
                                          var m = !0;
                                        if (m) {
                                          if (y.type !== void 0) {
                                            const B = e;
                                            if (typeof y.type != "string") {
                                              const ie = {
                                                instancePath: t + "/body/" + g.replace(
                                                  /~/g,
                                                  "~0"
                                                ).replace(
                                                  /\//g,
                                                  "~1"
                                                ) + "/type",
                                                schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/type/type",
                                                keyword: "type",
                                                params: {
                                                  type: "string"
                                                },
                                                message: "must be string"
                                              };
                                              s === null ? s = [
                                                ie
                                              ] : s.push(
                                                ie
                                              ), e++;
                                            }
                                            var m = B === e;
                                          } else
                                            var m = !0;
                                          if (m) {
                                            if (y.lastModified !== void 0) {
                                              let B = y.lastModified;
                                              const V = e;
                                              if (!(typeof B == "number" && isFinite(
                                                B
                                              ))) {
                                                const le = {
                                                  instancePath: t + "/body/" + g.replace(
                                                    /~/g,
                                                    "~0"
                                                  ).replace(
                                                    /\//g,
                                                    "~1"
                                                  ) + "/lastModified",
                                                  schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/lastModified/type",
                                                  keyword: "type",
                                                  params: {
                                                    type: "number"
                                                  },
                                                  message: "must be number"
                                                };
                                                s === null ? s = [
                                                  le
                                                ] : s.push(
                                                  le
                                                ), e++;
                                              }
                                              var m = V === e;
                                            } else
                                              var m = !0;
                                            if (m) {
                                              if (y.name !== void 0) {
                                                const B = e;
                                                if (typeof y.name != "string") {
                                                  const ie = {
                                                    instancePath: t + "/body/" + g.replace(
                                                      /~/g,
                                                      "~0"
                                                    ).replace(
                                                      /\//g,
                                                      "~1"
                                                    ) + "/name",
                                                    schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/name/type",
                                                    keyword: "type",
                                                    params: {
                                                      type: "string"
                                                    },
                                                    message: "must be string"
                                                  };
                                                  s === null ? s = [
                                                    ie
                                                  ] : s.push(
                                                    ie
                                                  ), e++;
                                                }
                                                var m = B === e;
                                              } else
                                                var m = !0;
                                              if (m)
                                                if (y.webkitRelativePath !== void 0) {
                                                  const B = e;
                                                  if (typeof y.webkitRelativePath != "string") {
                                                    const ie = {
                                                      instancePath: t + "/body/" + g.replace(
                                                        /~/g,
                                                        "~0"
                                                      ).replace(
                                                        /\//g,
                                                        "~1"
                                                      ) + "/webkitRelativePath",
                                                      schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/webkitRelativePath/type",
                                                      keyword: "type",
                                                      params: {
                                                        type: "string"
                                                      },
                                                      message: "must be string"
                                                    };
                                                    s === null ? s = [
                                                      ie
                                                    ] : s.push(
                                                      ie
                                                    ), e++;
                                                  }
                                                  var m = B === e;
                                                } else
                                                  var m = !0;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  } else {
                                    const A = {
                                      instancePath: t + "/body/" + g.replace(
                                        /~/g,
                                        "~0"
                                      ).replace(
                                        /\//g,
                                        "~1"
                                      ),
                                      schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf/2/type",
                                      keyword: "type",
                                      params: {
                                        type: "object"
                                      },
                                      message: "must be object"
                                    };
                                    s === null ? s = [
                                      A
                                    ] : s.push(
                                      A
                                    ), e++;
                                  }
                                var _ = I === e;
                                x = x || _;
                              }
                            }
                            if (x)
                              e = L, s !== null && (L ? s.length = L : s = null);
                            else {
                              const U = {
                                instancePath: t + "/body/" + g.replace(
                                  /~/g,
                                  "~0"
                                ).replace(
                                  /\//g,
                                  "~1"
                                ),
                                schemaPath: "#/properties/body/anyOf/2/additionalProperties/anyOf",
                                keyword: "anyOf",
                                params: {},
                                message: "must match a schema in anyOf"
                              };
                              s === null ? s = [
                                U
                              ] : s.push(
                                U
                              ), e++;
                            }
                            var W = E === e;
                            if (!W)
                              break;
                          }
                        else {
                          const g = {
                            instancePath: t + "/body",
                            schemaPath: "#/properties/body/anyOf/2/type",
                            keyword: "type",
                            params: {
                              type: "object"
                            },
                            message: "must be object"
                          };
                          s === null ? s = [g] : s.push(g), e++;
                        }
                      var D = w === e;
                      ee = ee || D;
                    }
                  }
                  if (ee)
                    e = z, s !== null && (z ? s.length = z : s = null);
                  else {
                    const $ = {
                      instancePath: t + "/body",
                      schemaPath: "#/properties/body/anyOf",
                      keyword: "anyOf",
                      params: {},
                      message: "must match a schema in anyOf"
                    };
                    return s === null ? s = [$] : s.push($), e++, ce.errors = s, !1;
                  }
                  var d = X === e;
                } else
                  var d = !0;
            }
          }
        }
      }
    } else
      return ce.errors = [
        {
          instancePath: t,
          schemaPath: "#/type",
          keyword: "type",
          params: { type: "object" },
          message: "must be object"
        }
      ], !1;
  return ce.errors = s, e === 0;
}
const Ht = {
  properties: {
    relativeUri: {
      type: "string",
      description: "Request path following the domain:port part."
    },
    scriptPath: {
      type: "string",
      description: "Path of the .php file to execute."
    },
    protocol: { type: "string", description: "Request protocol." },
    method: {
      $ref: "#/definitions/HTTPMethod",
      description: "Request method. Default: `GET`."
    },
    headers: {
      $ref: "#/definitions/PHPRequestHeaders",
      description: "Request headers."
    },
    body: {
      anyOf: [
        { type: "string" },
        {
          type: "object",
          properties: {
            BYTES_PER_ELEMENT: { type: "number" },
            buffer: {
              type: "object",
              properties: { byteLength: { type: "number" } },
              required: ["byteLength"],
              additionalProperties: !1
            },
            byteLength: { type: "number" },
            byteOffset: { type: "number" },
            length: { type: "number" }
          },
          required: [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          additionalProperties: { type: "number" }
        }
      ],
      description: "Request body."
    },
    env: {
      type: "object",
      additionalProperties: { type: "string" },
      description: "Environment variables to set for this run."
    },
    $_SERVER: {
      type: "object",
      additionalProperties: { type: "string" },
      description: "$_SERVER entries to set for this run."
    },
    code: {
      type: "string",
      description: "The code snippet to eval instead of a php file."
    }
  }
};
function ne(r, { instancePath: t = "", parentData: p, parentDataProperty: u, rootData: c = r } = {}) {
  let s = null, e = 0;
  if (e === 0)
    if (r && typeof r == "object" && !Array.isArray(r)) {
      const R = e;
      for (const m in r)
        if (!Ar.call(Ht.properties, m))
          return ne.errors = [
            {
              instancePath: t,
              schemaPath: "#/additionalProperties",
              keyword: "additionalProperties",
              params: { additionalProperty: m },
              message: "must NOT have additional properties"
            }
          ], !1;
      if (R === e) {
        if (r.relativeUri !== void 0) {
          const m = e;
          if (typeof r.relativeUri != "string")
            return ne.errors = [
              {
                instancePath: t + "/relativeUri",
                schemaPath: "#/properties/relativeUri/type",
                keyword: "type",
                params: { type: "string" },
                message: "must be string"
              }
            ], !1;
          var d = m === e;
        } else
          var d = !0;
        if (d) {
          if (r.scriptPath !== void 0) {
            const m = e;
            if (typeof r.scriptPath != "string")
              return ne.errors = [
                {
                  instancePath: t + "/scriptPath",
                  schemaPath: "#/properties/scriptPath/type",
                  keyword: "type",
                  params: { type: "string" },
                  message: "must be string"
                }
              ], !1;
            var d = m === e;
          } else
            var d = !0;
          if (d) {
            if (r.protocol !== void 0) {
              const m = e;
              if (typeof r.protocol != "string")
                return ne.errors = [
                  {
                    instancePath: t + "/protocol",
                    schemaPath: "#/properties/protocol/type",
                    keyword: "type",
                    params: { type: "string" },
                    message: "must be string"
                  }
                ], !1;
              var d = m === e;
            } else
              var d = !0;
            if (d) {
              if (r.method !== void 0) {
                let m = r.method;
                const W = e;
                if (typeof m != "string")
                  return ne.errors = [
                    {
                      instancePath: t + "/method",
                      schemaPath: "#/definitions/HTTPMethod/type",
                      keyword: "type",
                      params: { type: "string" },
                      message: "must be string"
                    }
                  ], !1;
                if (!(m === "GET" || m === "POST" || m === "HEAD" || m === "OPTIONS" || m === "PATCH" || m === "PUT" || m === "DELETE"))
                  return ne.errors = [
                    {
                      instancePath: t + "/method",
                      schemaPath: "#/definitions/HTTPMethod/enum",
                      keyword: "enum",
                      params: {
                        allowedValues: Rr.enum
                      },
                      message: "must be equal to one of the allowed values"
                    }
                  ], !1;
                var d = W === e;
              } else
                var d = !0;
              if (d) {
                if (r.headers !== void 0) {
                  let m = r.headers;
                  const W = e;
                  if (e === e)
                    if (m && typeof m == "object" && !Array.isArray(m))
                      for (const P in m) {
                        const X = e;
                        if (typeof m[P] != "string")
                          return ne.errors = [
                            {
                              instancePath: t + "/headers/" + P.replace(
                                /~/g,
                                "~0"
                              ).replace(
                                /\//g,
                                "~1"
                              ),
                              schemaPath: "#/definitions/PHPRequestHeaders/additionalProperties/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        var h = X === e;
                        if (!h)
                          break;
                      }
                    else
                      return ne.errors = [
                        {
                          instancePath: t + "/headers",
                          schemaPath: "#/definitions/PHPRequestHeaders/type",
                          keyword: "type",
                          params: { type: "object" },
                          message: "must be object"
                        }
                      ], !1;
                  var d = W === e;
                } else
                  var d = !0;
                if (d) {
                  if (r.body !== void 0) {
                    let m = r.body;
                    const W = e, M = e;
                    let Y = !1;
                    const P = e;
                    if (typeof m != "string") {
                      const z = {
                        instancePath: t + "/body",
                        schemaPath: "#/properties/body/anyOf/0/type",
                        keyword: "type",
                        params: { type: "string" },
                        message: "must be string"
                      };
                      s === null ? s = [z] : s.push(z), e++;
                    }
                    var D = P === e;
                    if (Y = Y || D, !Y) {
                      const z = e;
                      if (e === z)
                        if (m && typeof m == "object" && !Array.isArray(m)) {
                          let l;
                          if (m.BYTES_PER_ELEMENT === void 0 && (l = "BYTES_PER_ELEMENT") || m.buffer === void 0 && (l = "buffer") || m.byteLength === void 0 && (l = "byteLength") || m.byteOffset === void 0 && (l = "byteOffset") || m.length === void 0 && (l = "length")) {
                            const j = {
                              instancePath: t + "/body",
                              schemaPath: "#/properties/body/anyOf/1/required",
                              keyword: "required",
                              params: {
                                missingProperty: l
                              },
                              message: "must have required property '" + l + "'"
                            };
                            s === null ? s = [j] : s.push(j), e++;
                          } else {
                            const j = e;
                            for (const $ in m)
                              if (!($ === "BYTES_PER_ELEMENT" || $ === "buffer" || $ === "byteLength" || $ === "byteOffset" || $ === "length")) {
                                let v = m[$];
                                const w = e;
                                if (!(typeof v == "number" && isFinite(
                                  v
                                ))) {
                                  const b = {
                                    instancePath: t + "/body/" + $.replace(
                                      /~/g,
                                      "~0"
                                    ).replace(
                                      /\//g,
                                      "~1"
                                    ),
                                    schemaPath: "#/properties/body/anyOf/1/additionalProperties/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  };
                                  s === null ? s = [
                                    b
                                  ] : s.push(
                                    b
                                  ), e++;
                                }
                                var S = w === e;
                                if (!S)
                                  break;
                              }
                            if (j === e) {
                              if (m.BYTES_PER_ELEMENT !== void 0) {
                                let $ = m.BYTES_PER_ELEMENT;
                                const v = e;
                                if (!(typeof $ == "number" && isFinite(
                                  $
                                ))) {
                                  const w = {
                                    instancePath: t + "/body/BYTES_PER_ELEMENT",
                                    schemaPath: "#/properties/body/anyOf/1/properties/BYTES_PER_ELEMENT/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  };
                                  s === null ? s = [
                                    w
                                  ] : s.push(
                                    w
                                  ), e++;
                                }
                                var T = v === e;
                              } else
                                var T = !0;
                              if (T) {
                                if (m.buffer !== void 0) {
                                  let $ = m.buffer;
                                  const v = e;
                                  if (e === v)
                                    if ($ && typeof $ == "object" && !Array.isArray(
                                      $
                                    )) {
                                      let b;
                                      if ($.byteLength === void 0 && (b = "byteLength")) {
                                        const g = {
                                          instancePath: t + "/body/buffer",
                                          schemaPath: "#/properties/body/anyOf/1/properties/buffer/required",
                                          keyword: "required",
                                          params: {
                                            missingProperty: b
                                          },
                                          message: "must have required property '" + b + "'"
                                        };
                                        s === null ? s = [
                                          g
                                        ] : s.push(
                                          g
                                        ), e++;
                                      } else {
                                        const g = e;
                                        for (const y in $)
                                          if (y !== "byteLength") {
                                            const E = {
                                              instancePath: t + "/body/buffer",
                                              schemaPath: "#/properties/body/anyOf/1/properties/buffer/additionalProperties",
                                              keyword: "additionalProperties",
                                              params: {
                                                additionalProperty: y
                                              },
                                              message: "must NOT have additional properties"
                                            };
                                            s === null ? s = [
                                              E
                                            ] : s.push(
                                              E
                                            ), e++;
                                            break;
                                          }
                                        if (g === e && $.byteLength !== void 0) {
                                          let y = $.byteLength;
                                          if (!(typeof y == "number" && isFinite(
                                            y
                                          ))) {
                                            const E = {
                                              instancePath: t + "/body/buffer/byteLength",
                                              schemaPath: "#/properties/body/anyOf/1/properties/buffer/properties/byteLength/type",
                                              keyword: "type",
                                              params: {
                                                type: "number"
                                              },
                                              message: "must be number"
                                            };
                                            s === null ? s = [
                                              E
                                            ] : s.push(
                                              E
                                            ), e++;
                                          }
                                        }
                                      }
                                    } else {
                                      const b = {
                                        instancePath: t + "/body/buffer",
                                        schemaPath: "#/properties/body/anyOf/1/properties/buffer/type",
                                        keyword: "type",
                                        params: {
                                          type: "object"
                                        },
                                        message: "must be object"
                                      };
                                      s === null ? s = [
                                        b
                                      ] : s.push(
                                        b
                                      ), e++;
                                    }
                                  var T = v === e;
                                } else
                                  var T = !0;
                                if (T) {
                                  if (m.byteLength !== void 0) {
                                    let $ = m.byteLength;
                                    const v = e;
                                    if (!(typeof $ == "number" && isFinite(
                                      $
                                    ))) {
                                      const b = {
                                        instancePath: t + "/body/byteLength",
                                        schemaPath: "#/properties/body/anyOf/1/properties/byteLength/type",
                                        keyword: "type",
                                        params: {
                                          type: "number"
                                        },
                                        message: "must be number"
                                      };
                                      s === null ? s = [
                                        b
                                      ] : s.push(
                                        b
                                      ), e++;
                                    }
                                    var T = v === e;
                                  } else
                                    var T = !0;
                                  if (T) {
                                    if (m.byteOffset !== void 0) {
                                      let $ = m.byteOffset;
                                      const v = e;
                                      if (!(typeof $ == "number" && isFinite(
                                        $
                                      ))) {
                                        const b = {
                                          instancePath: t + "/body/byteOffset",
                                          schemaPath: "#/properties/body/anyOf/1/properties/byteOffset/type",
                                          keyword: "type",
                                          params: {
                                            type: "number"
                                          },
                                          message: "must be number"
                                        };
                                        s === null ? s = [
                                          b
                                        ] : s.push(
                                          b
                                        ), e++;
                                      }
                                      var T = v === e;
                                    } else
                                      var T = !0;
                                    if (T)
                                      if (m.length !== void 0) {
                                        let $ = m.length;
                                        const v = e;
                                        if (!(typeof $ == "number" && isFinite(
                                          $
                                        ))) {
                                          const b = {
                                            instancePath: t + "/body/length",
                                            schemaPath: "#/properties/body/anyOf/1/properties/length/type",
                                            keyword: "type",
                                            params: {
                                              type: "number"
                                            },
                                            message: "must be number"
                                          };
                                          s === null ? s = [
                                            b
                                          ] : s.push(
                                            b
                                          ), e++;
                                        }
                                        var T = v === e;
                                      } else
                                        var T = !0;
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          const l = {
                            instancePath: t + "/body",
                            schemaPath: "#/properties/body/anyOf/1/type",
                            keyword: "type",
                            params: {
                              type: "object"
                            },
                            message: "must be object"
                          };
                          s === null ? s = [l] : s.push(l), e++;
                        }
                      var D = z === e;
                      Y = Y || D;
                    }
                    if (Y)
                      e = M, s !== null && (M ? s.length = M : s = null);
                    else {
                      const z = {
                        instancePath: t + "/body",
                        schemaPath: "#/properties/body/anyOf",
                        keyword: "anyOf",
                        params: {},
                        message: "must match a schema in anyOf"
                      };
                      return s === null ? s = [z] : s.push(z), e++, ne.errors = s, !1;
                    }
                    var d = W === e;
                  } else
                    var d = !0;
                  if (d) {
                    if (r.env !== void 0) {
                      let m = r.env;
                      const W = e;
                      if (e === W)
                        if (m && typeof m == "object" && !Array.isArray(m))
                          for (const Y in m) {
                            const P = e;
                            if (typeof m[Y] != "string")
                              return ne.errors = [
                                {
                                  instancePath: t + "/env/" + Y.replace(
                                    /~/g,
                                    "~0"
                                  ).replace(
                                    /\//g,
                                    "~1"
                                  ),
                                  schemaPath: "#/properties/env/additionalProperties/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            var _ = P === e;
                            if (!_)
                              break;
                          }
                        else
                          return ne.errors = [
                            {
                              instancePath: t + "/env",
                              schemaPath: "#/properties/env/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var d = W === e;
                    } else
                      var d = !0;
                    if (d) {
                      if (r.$_SERVER !== void 0) {
                        let m = r.$_SERVER;
                        const W = e;
                        if (e === W)
                          if (m && typeof m == "object" && !Array.isArray(m))
                            for (const Y in m) {
                              const P = e;
                              if (typeof m[Y] != "string")
                                return ne.errors = [
                                  {
                                    instancePath: t + "/$_SERVER/" + Y.replace(
                                      /~/g,
                                      "~0"
                                    ).replace(
                                      /\//g,
                                      "~1"
                                    ),
                                    schemaPath: "#/properties/%24_SERVER/additionalProperties/type",
                                    keyword: "type",
                                    params: {
                                      type: "string"
                                    },
                                    message: "must be string"
                                  }
                                ], !1;
                              var k = P === e;
                              if (!k)
                                break;
                            }
                          else
                            return ne.errors = [
                              {
                                instancePath: t + "/$_SERVER",
                                schemaPath: "#/properties/%24_SERVER/type",
                                keyword: "type",
                                params: {
                                  type: "object"
                                },
                                message: "must be object"
                              }
                            ], !1;
                        var d = W === e;
                      } else
                        var d = !0;
                      if (d)
                        if (r.code !== void 0) {
                          const m = e;
                          if (typeof r.code != "string")
                            return ne.errors = [
                              {
                                instancePath: t + "/code",
                                schemaPath: "#/properties/code/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var d = m === e;
                        } else
                          var d = !0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else
      return ne.errors = [
        {
          instancePath: t,
          schemaPath: "#/type",
          keyword: "type",
          params: { type: "object" },
          message: "must be object"
        }
      ], !1;
  return ne.errors = s, e === 0;
}
function o(r, { instancePath: t = "", parentData: p, parentDataProperty: u, rootData: c = r } = {}) {
  let s = null, e = 0;
  if (e === 0)
    if (r && typeof r == "object" && !Array.isArray(r)) {
      let tr;
      if (r.step === void 0 && (tr = "step"))
        return o.errors = [
          {
            instancePath: t,
            schemaPath: "#/required",
            keyword: "required",
            params: { missingProperty: tr },
            message: "must have required property '" + tr + "'"
          }
        ], !1;
      {
        const G = r.step;
        if (typeof G == "string")
          if (G === "activatePlugin") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.pluginPath === void 0 && (f = "pluginPath") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/0/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "pluginPath" || i === "pluginName"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/0/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/0/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/0/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var d = q === e;
                            } else
                              var d = !0;
                            if (d)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/0/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var d = a === e;
                              } else
                                var d = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/0/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var h = n === e;
                    } else
                      var h = !0;
                    if (h) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/0/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "activatePlugin")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/0/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "activatePlugin"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var h = n === e;
                      } else
                        var h = !0;
                      if (h) {
                        if (r.pluginPath !== void 0) {
                          const i = e;
                          if (typeof r.pluginPath != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/pluginPath",
                                schemaPath: "#/oneOf/0/properties/pluginPath/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var h = i === e;
                        } else
                          var h = !0;
                        if (h)
                          if (r.pluginName !== void 0) {
                            const i = e;
                            if (typeof r.pluginName != "string")
                              return o.errors = [
                                {
                                  instancePath: t + "/pluginName",
                                  schemaPath: "#/oneOf/0/properties/pluginName/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            var h = i === e;
                          } else
                            var h = !0;
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/0/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "activateTheme") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.step === void 0 && (f = "step") || r.themeFolderName === void 0 && (f = "themeFolderName"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/1/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "themeFolderName"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/1/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/1/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/1/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var D = q === e;
                            } else
                              var D = !0;
                            if (D)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/1/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var D = a === e;
                              } else
                                var D = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/1/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var S = n === e;
                    } else
                      var S = !0;
                    if (S) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/1/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "activateTheme")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/1/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "activateTheme"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var S = n === e;
                      } else
                        var S = !0;
                      if (S)
                        if (r.themeFolderName !== void 0) {
                          const i = e;
                          if (typeof r.themeFolderName != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/themeFolderName",
                                schemaPath: "#/oneOf/1/properties/themeFolderName/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var S = i === e;
                        } else
                          var S = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/1/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "cp") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.fromPath === void 0 && (f = "fromPath") || r.step === void 0 && (f = "step") || r.toPath === void 0 && (f = "toPath"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/2/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "fromPath" || i === "toPath"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/2/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/2/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/2/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var T = q === e;
                            } else
                              var T = !0;
                            if (T)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/2/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var T = a === e;
                              } else
                                var T = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/2/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var _ = n === e;
                    } else
                      var _ = !0;
                    if (_) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/2/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "cp")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/2/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "cp"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var _ = n === e;
                      } else
                        var _ = !0;
                      if (_) {
                        if (r.fromPath !== void 0) {
                          const i = e;
                          if (typeof r.fromPath != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/fromPath",
                                schemaPath: "#/oneOf/2/properties/fromPath/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var _ = i === e;
                        } else
                          var _ = !0;
                        if (_)
                          if (r.toPath !== void 0) {
                            const i = e;
                            if (typeof r.toPath != "string")
                              return o.errors = [
                                {
                                  instancePath: t + "/toPath",
                                  schemaPath: "#/oneOf/2/properties/toPath/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            var _ = i === e;
                          } else
                            var _ = !0;
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/2/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "defineWpConfigConsts") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.consts === void 0 && (f = "consts") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/3/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "consts" || i === "method" || i === "virtualize"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/3/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/3/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/3/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var k = q === e;
                            } else
                              var k = !0;
                            if (k)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/3/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var k = a === e;
                              } else
                                var k = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/3/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var R = n === e;
                    } else
                      var R = !0;
                    if (R) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/3/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "defineWpConfigConsts")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/3/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "defineWpConfigConsts"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var R = n === e;
                      } else
                        var R = !0;
                      if (R) {
                        if (r.consts !== void 0) {
                          let i = r.consts;
                          const n = e;
                          if (e === n && !(i && typeof i == "object" && !Array.isArray(
                            i
                          )))
                            return o.errors = [
                              {
                                instancePath: t + "/consts",
                                schemaPath: "#/oneOf/3/properties/consts/type",
                                keyword: "type",
                                params: {
                                  type: "object"
                                },
                                message: "must be object"
                              }
                            ], !1;
                          var R = n === e;
                        } else
                          var R = !0;
                        if (R) {
                          if (r.method !== void 0) {
                            let i = r.method;
                            const n = e;
                            if (typeof i != "string")
                              return o.errors = [
                                {
                                  instancePath: t + "/method",
                                  schemaPath: "#/oneOf/3/properties/method/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            if (!(i === "rewrite-wp-config" || i === "define-before-run"))
                              return o.errors = [
                                {
                                  instancePath: t + "/method",
                                  schemaPath: "#/oneOf/3/properties/method/enum",
                                  keyword: "enum",
                                  params: {
                                    allowedValues: Xe.oneOf[3].properties.method.enum
                                  },
                                  message: "must be equal to one of the allowed values"
                                }
                              ], !1;
                            var R = n === e;
                          } else
                            var R = !0;
                          if (R)
                            if (r.virtualize !== void 0) {
                              const i = e;
                              if (typeof r.virtualize != "boolean")
                                return o.errors = [
                                  {
                                    instancePath: t + "/virtualize",
                                    schemaPath: "#/oneOf/3/properties/virtualize/type",
                                    keyword: "type",
                                    params: {
                                      type: "boolean"
                                    },
                                    message: "must be boolean"
                                  }
                                ], !1;
                              var R = i === e;
                            } else
                              var R = !0;
                        }
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/3/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "defineSiteUrl") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.siteUrl === void 0 && (f = "siteUrl") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/4/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "siteUrl"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/4/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/4/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/4/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var m = q === e;
                            } else
                              var m = !0;
                            if (m)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/4/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var m = a === e;
                              } else
                                var m = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/4/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var W = n === e;
                    } else
                      var W = !0;
                    if (W) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/4/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "defineSiteUrl")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/4/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "defineSiteUrl"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var W = n === e;
                      } else
                        var W = !0;
                      if (W)
                        if (r.siteUrl !== void 0) {
                          const i = e;
                          if (typeof r.siteUrl != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/siteUrl",
                                schemaPath: "#/oneOf/4/properties/siteUrl/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var W = i === e;
                        } else
                          var W = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/4/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "enableMultisite") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/5/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "wpCliPath"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/5/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/5/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/5/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var M = q === e;
                            } else
                              var M = !0;
                            if (M)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/5/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var M = a === e;
                              } else
                                var M = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/5/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var Y = n === e;
                    } else
                      var Y = !0;
                    if (Y) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/5/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "enableMultisite")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/5/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "enableMultisite"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var Y = n === e;
                      } else
                        var Y = !0;
                      if (Y)
                        if (r.wpCliPath !== void 0) {
                          const i = e;
                          if (typeof r.wpCliPath != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/wpCliPath",
                                schemaPath: "#/oneOf/5/properties/wpCliPath/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var Y = i === e;
                        } else
                          var Y = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/5/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "importWxr") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.file === void 0 && (f = "file") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/6/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "file" || i === "importer"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/6/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/6/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/6/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var P = q === e;
                            } else
                              var P = !0;
                            if (P)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/6/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var P = a === e;
                              } else
                                var P = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/6/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var X = n === e;
                    } else
                      var X = !0;
                    if (X) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/6/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "importWxr")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/6/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "importWxr"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var X = n === e;
                      } else
                        var X = !0;
                      if (X) {
                        if (r.file !== void 0) {
                          const i = e;
                          Q(r.file, {
                            instancePath: t + "/file",
                            parentData: r,
                            parentDataProperty: "file",
                            rootData: c
                          }) || (s = s === null ? Q.errors : s.concat(
                            Q.errors
                          ), e = s.length);
                          var X = i === e;
                        } else
                          var X = !0;
                        if (X)
                          if (r.importer !== void 0) {
                            let i = r.importer;
                            const n = e;
                            if (typeof i != "string")
                              return o.errors = [
                                {
                                  instancePath: t + "/importer",
                                  schemaPath: "#/oneOf/6/properties/importer/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            if (!(i === "data-liberation" || i === "default"))
                              return o.errors = [
                                {
                                  instancePath: t + "/importer",
                                  schemaPath: "#/oneOf/6/properties/importer/enum",
                                  keyword: "enum",
                                  params: {
                                    allowedValues: Xe.oneOf[6].properties.importer.enum
                                  },
                                  message: "must be equal to one of the allowed values"
                                }
                              ], !1;
                            var X = n === e;
                          } else
                            var X = !0;
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/6/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "importThemeStarterContent") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/7/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "themeSlug"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/7/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/7/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/7/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var z = q === e;
                            } else
                              var z = !0;
                            if (z)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/7/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var z = a === e;
                              } else
                                var z = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/7/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var ee = n === e;
                    } else
                      var ee = !0;
                    if (ee) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/7/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "importThemeStarterContent")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/7/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "importThemeStarterContent"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var ee = n === e;
                      } else
                        var ee = !0;
                      if (ee)
                        if (r.themeSlug !== void 0) {
                          const i = e;
                          if (typeof r.themeSlug != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/themeSlug",
                                schemaPath: "#/oneOf/7/properties/themeSlug/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var ee = i === e;
                        } else
                          var ee = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/7/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "importWordPressFiles") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.step === void 0 && (f = "step") || r.wordPressFilesZip === void 0 && (f = "wordPressFilesZip"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/8/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "wordPressFilesZip" || i === "pathInZip"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/8/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/8/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/8/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var l = q === e;
                            } else
                              var l = !0;
                            if (l)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/8/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var l = a === e;
                              } else
                                var l = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/8/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var j = n === e;
                    } else
                      var j = !0;
                    if (j) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/8/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "importWordPressFiles")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/8/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "importWordPressFiles"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var j = n === e;
                      } else
                        var j = !0;
                      if (j) {
                        if (r.wordPressFilesZip !== void 0) {
                          const i = e;
                          Q(
                            r.wordPressFilesZip,
                            {
                              instancePath: t + "/wordPressFilesZip",
                              parentData: r,
                              parentDataProperty: "wordPressFilesZip",
                              rootData: c
                            }
                          ) || (s = s === null ? Q.errors : s.concat(
                            Q.errors
                          ), e = s.length);
                          var j = i === e;
                        } else
                          var j = !0;
                        if (j)
                          if (r.pathInZip !== void 0) {
                            const i = e;
                            if (typeof r.pathInZip != "string")
                              return o.errors = [
                                {
                                  instancePath: t + "/pathInZip",
                                  schemaPath: "#/oneOf/8/properties/pathInZip/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            var j = i === e;
                          } else
                            var j = !0;
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/8/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "installPlugin") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.pluginData === void 0 && (f = "pluginData") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/9/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "ifAlreadyInstalled" || i === "step" || i === "pluginData" || i === "pluginZipFile" || i === "options"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/9/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/9/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/9/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var $ = q === e;
                            } else
                              var $ = !0;
                            if ($)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/9/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var $ = a === e;
                              } else
                                var $ = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/9/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var v = n === e;
                    } else
                      var v = !0;
                    if (v) {
                      if (r.ifAlreadyInstalled !== void 0) {
                        let i = r.ifAlreadyInstalled;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/ifAlreadyInstalled",
                              schemaPath: "#/oneOf/9/properties/ifAlreadyInstalled/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (!(i === "overwrite" || i === "skip" || i === "error"))
                          return o.errors = [
                            {
                              instancePath: t + "/ifAlreadyInstalled",
                              schemaPath: "#/oneOf/9/properties/ifAlreadyInstalled/enum",
                              keyword: "enum",
                              params: {
                                allowedValues: Xe.oneOf[9].properties.ifAlreadyInstalled.enum
                              },
                              message: "must be equal to one of the allowed values"
                            }
                          ], !1;
                        var v = n === e;
                      } else
                        var v = !0;
                      if (v) {
                        if (r.step !== void 0) {
                          let i = r.step;
                          const n = e;
                          if (typeof i != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/step",
                                schemaPath: "#/oneOf/9/properties/step/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          if (i !== "installPlugin")
                            return o.errors = [
                              {
                                instancePath: t + "/step",
                                schemaPath: "#/oneOf/9/properties/step/const",
                                keyword: "const",
                                params: {
                                  allowedValue: "installPlugin"
                                },
                                message: "must be equal to constant"
                              }
                            ], !1;
                          var v = n === e;
                        } else
                          var v = !0;
                        if (v) {
                          if (r.pluginData !== void 0) {
                            let i = r.pluginData;
                            const n = e, O = e;
                            let a = !1;
                            const q = e;
                            Q(
                              i,
                              {
                                instancePath: t + "/pluginData",
                                parentData: r,
                                parentDataProperty: "pluginData",
                                rootData: c
                              }
                            ) || (s = s === null ? Q.errors : s.concat(
                              Q.errors
                            ), e = s.length);
                            var w = q === e;
                            if (a = a || w, !a) {
                              const oe = e;
                              he(
                                i,
                                {
                                  instancePath: t + "/pluginData",
                                  parentData: r,
                                  parentDataProperty: "pluginData",
                                  rootData: c
                                }
                              ) || (s = s === null ? he.errors : s.concat(
                                he.errors
                              ), e = s.length);
                              var w = oe === e;
                              a = a || w;
                            }
                            if (a)
                              e = O, s !== null && (O ? s.length = O : s = null);
                            else {
                              const oe = {
                                instancePath: t + "/pluginData",
                                schemaPath: "#/oneOf/9/properties/pluginData/anyOf",
                                keyword: "anyOf",
                                params: {},
                                message: "must match a schema in anyOf"
                              };
                              return s === null ? s = [
                                oe
                              ] : s.push(
                                oe
                              ), e++, o.errors = s, !1;
                            }
                            var v = n === e;
                          } else
                            var v = !0;
                          if (v) {
                            if (r.pluginZipFile !== void 0) {
                              const i = e;
                              Q(
                                r.pluginZipFile,
                                {
                                  instancePath: t + "/pluginZipFile",
                                  parentData: r,
                                  parentDataProperty: "pluginZipFile",
                                  rootData: c
                                }
                              ) || (s = s === null ? Q.errors : s.concat(
                                Q.errors
                              ), e = s.length);
                              var v = i === e;
                            } else
                              var v = !0;
                            if (v)
                              if (r.options !== void 0) {
                                let i = r.options;
                                const n = e;
                                if (e === e)
                                  if (i && typeof i == "object" && !Array.isArray(
                                    i
                                  )) {
                                    const q = e;
                                    for (const te in i)
                                      if (!(te === "activate" || te === "targetFolderName"))
                                        return o.errors = [
                                          {
                                            instancePath: t + "/options",
                                            schemaPath: "#/definitions/InstallPluginOptions/additionalProperties",
                                            keyword: "additionalProperties",
                                            params: {
                                              additionalProperty: te
                                            },
                                            message: "must NOT have additional properties"
                                          }
                                        ], !1;
                                    if (q === e) {
                                      if (i.activate !== void 0) {
                                        const te = e;
                                        if (typeof i.activate != "boolean")
                                          return o.errors = [
                                            {
                                              instancePath: t + "/options/activate",
                                              schemaPath: "#/definitions/InstallPluginOptions/properties/activate/type",
                                              keyword: "type",
                                              params: {
                                                type: "boolean"
                                              },
                                              message: "must be boolean"
                                            }
                                          ], !1;
                                        var b = te === e;
                                      } else
                                        var b = !0;
                                      if (b)
                                        if (i.targetFolderName !== void 0) {
                                          const te = e;
                                          if (typeof i.targetFolderName != "string")
                                            return o.errors = [
                                              {
                                                instancePath: t + "/options/targetFolderName",
                                                schemaPath: "#/definitions/InstallPluginOptions/properties/targetFolderName/type",
                                                keyword: "type",
                                                params: {
                                                  type: "string"
                                                },
                                                message: "must be string"
                                              }
                                            ], !1;
                                          var b = te === e;
                                        } else
                                          var b = !0;
                                    }
                                  } else
                                    return o.errors = [
                                      {
                                        instancePath: t + "/options",
                                        schemaPath: "#/definitions/InstallPluginOptions/type",
                                        keyword: "type",
                                        params: {
                                          type: "object"
                                        },
                                        message: "must be object"
                                      }
                                    ], !1;
                                var v = n === e;
                              } else
                                var v = !0;
                          }
                        }
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/9/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "installTheme") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.step === void 0 && (f = "step") || r.themeData === void 0 && (f = "themeData"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/10/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "ifAlreadyInstalled" || i === "step" || i === "themeData" || i === "themeZipFile" || i === "options"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/10/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/10/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/10/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var g = q === e;
                            } else
                              var g = !0;
                            if (g)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/10/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var g = a === e;
                              } else
                                var g = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/10/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var y = n === e;
                    } else
                      var y = !0;
                    if (y) {
                      if (r.ifAlreadyInstalled !== void 0) {
                        let i = r.ifAlreadyInstalled;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/ifAlreadyInstalled",
                              schemaPath: "#/oneOf/10/properties/ifAlreadyInstalled/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (!(i === "overwrite" || i === "skip" || i === "error"))
                          return o.errors = [
                            {
                              instancePath: t + "/ifAlreadyInstalled",
                              schemaPath: "#/oneOf/10/properties/ifAlreadyInstalled/enum",
                              keyword: "enum",
                              params: {
                                allowedValues: Xe.oneOf[10].properties.ifAlreadyInstalled.enum
                              },
                              message: "must be equal to one of the allowed values"
                            }
                          ], !1;
                        var y = n === e;
                      } else
                        var y = !0;
                      if (y) {
                        if (r.step !== void 0) {
                          let i = r.step;
                          const n = e;
                          if (typeof i != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/step",
                                schemaPath: "#/oneOf/10/properties/step/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          if (i !== "installTheme")
                            return o.errors = [
                              {
                                instancePath: t + "/step",
                                schemaPath: "#/oneOf/10/properties/step/const",
                                keyword: "const",
                                params: {
                                  allowedValue: "installTheme"
                                },
                                message: "must be equal to constant"
                              }
                            ], !1;
                          var y = n === e;
                        } else
                          var y = !0;
                        if (y) {
                          if (r.themeData !== void 0) {
                            let i = r.themeData;
                            const n = e, O = e;
                            let a = !1;
                            const q = e;
                            Q(
                              i,
                              {
                                instancePath: t + "/themeData",
                                parentData: r,
                                parentDataProperty: "themeData",
                                rootData: c
                              }
                            ) || (s = s === null ? Q.errors : s.concat(
                              Q.errors
                            ), e = s.length);
                            var E = q === e;
                            if (a = a || E, !a) {
                              const oe = e;
                              he(
                                i,
                                {
                                  instancePath: t + "/themeData",
                                  parentData: r,
                                  parentDataProperty: "themeData",
                                  rootData: c
                                }
                              ) || (s = s === null ? he.errors : s.concat(
                                he.errors
                              ), e = s.length);
                              var E = oe === e;
                              a = a || E;
                            }
                            if (a)
                              e = O, s !== null && (O ? s.length = O : s = null);
                            else {
                              const oe = {
                                instancePath: t + "/themeData",
                                schemaPath: "#/oneOf/10/properties/themeData/anyOf",
                                keyword: "anyOf",
                                params: {},
                                message: "must match a schema in anyOf"
                              };
                              return s === null ? s = [
                                oe
                              ] : s.push(
                                oe
                              ), e++, o.errors = s, !1;
                            }
                            var y = n === e;
                          } else
                            var y = !0;
                          if (y) {
                            if (r.themeZipFile !== void 0) {
                              const i = e;
                              Q(
                                r.themeZipFile,
                                {
                                  instancePath: t + "/themeZipFile",
                                  parentData: r,
                                  parentDataProperty: "themeZipFile",
                                  rootData: c
                                }
                              ) || (s = s === null ? Q.errors : s.concat(
                                Q.errors
                              ), e = s.length);
                              var y = i === e;
                            } else
                              var y = !0;
                            if (y)
                              if (r.options !== void 0) {
                                let i = r.options;
                                const n = e;
                                if (e === e)
                                  if (i && typeof i == "object" && !Array.isArray(
                                    i
                                  )) {
                                    const q = e;
                                    for (const te in i)
                                      if (!(te === "activate" || te === "importStarterContent" || te === "targetFolderName"))
                                        return o.errors = [
                                          {
                                            instancePath: t + "/options",
                                            schemaPath: "#/definitions/InstallThemeOptions/additionalProperties",
                                            keyword: "additionalProperties",
                                            params: {
                                              additionalProperty: te
                                            },
                                            message: "must NOT have additional properties"
                                          }
                                        ], !1;
                                    if (q === e) {
                                      if (i.activate !== void 0) {
                                        const te = e;
                                        if (typeof i.activate != "boolean")
                                          return o.errors = [
                                            {
                                              instancePath: t + "/options/activate",
                                              schemaPath: "#/definitions/InstallThemeOptions/properties/activate/type",
                                              keyword: "type",
                                              params: {
                                                type: "boolean"
                                              },
                                              message: "must be boolean"
                                            }
                                          ], !1;
                                        var L = te === e;
                                      } else
                                        var L = !0;
                                      if (L) {
                                        if (i.importStarterContent !== void 0) {
                                          const te = e;
                                          if (typeof i.importStarterContent != "boolean")
                                            return o.errors = [
                                              {
                                                instancePath: t + "/options/importStarterContent",
                                                schemaPath: "#/definitions/InstallThemeOptions/properties/importStarterContent/type",
                                                keyword: "type",
                                                params: {
                                                  type: "boolean"
                                                },
                                                message: "must be boolean"
                                              }
                                            ], !1;
                                          var L = te === e;
                                        } else
                                          var L = !0;
                                        if (L)
                                          if (i.targetFolderName !== void 0) {
                                            const te = e;
                                            if (typeof i.targetFolderName != "string")
                                              return o.errors = [
                                                {
                                                  instancePath: t + "/options/targetFolderName",
                                                  schemaPath: "#/definitions/InstallThemeOptions/properties/targetFolderName/type",
                                                  keyword: "type",
                                                  params: {
                                                    type: "string"
                                                  },
                                                  message: "must be string"
                                                }
                                              ], !1;
                                            var L = te === e;
                                          } else
                                            var L = !0;
                                      }
                                    }
                                  } else
                                    return o.errors = [
                                      {
                                        instancePath: t + "/options",
                                        schemaPath: "#/definitions/InstallThemeOptions/type",
                                        keyword: "type",
                                        params: {
                                          type: "object"
                                        },
                                        message: "must be object"
                                      }
                                    ], !1;
                                var y = n === e;
                              } else
                                var y = !0;
                          }
                        }
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/10/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "login") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/11/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "username" || i === "password"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/11/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/11/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/11/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var x = q === e;
                            } else
                              var x = !0;
                            if (x)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/11/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var x = a === e;
                              } else
                                var x = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/11/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var F = n === e;
                    } else
                      var F = !0;
                    if (F) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/11/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "login")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/11/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "login"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var F = n === e;
                      } else
                        var F = !0;
                      if (F) {
                        if (r.username !== void 0) {
                          const i = e;
                          if (typeof r.username != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/username",
                                schemaPath: "#/oneOf/11/properties/username/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var F = i === e;
                        } else
                          var F = !0;
                        if (F)
                          if (r.password !== void 0) {
                            const i = e;
                            if (typeof r.password != "string")
                              return o.errors = [
                                {
                                  instancePath: t + "/password",
                                  schemaPath: "#/oneOf/11/properties/password/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            var F = i === e;
                          } else
                            var F = !0;
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/11/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "mkdir") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.path === void 0 && (f = "path") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/12/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "path"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/12/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/12/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/12/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var U = q === e;
                            } else
                              var U = !0;
                            if (U)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/12/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var U = a === e;
                              } else
                                var U = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/12/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var C = n === e;
                    } else
                      var C = !0;
                    if (C) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/12/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "mkdir")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/12/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "mkdir"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var C = n === e;
                      } else
                        var C = !0;
                      if (C)
                        if (r.path !== void 0) {
                          const i = e;
                          if (typeof r.path != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/path",
                                schemaPath: "#/oneOf/12/properties/path/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var C = i === e;
                        } else
                          var C = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/12/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "mv") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.fromPath === void 0 && (f = "fromPath") || r.step === void 0 && (f = "step") || r.toPath === void 0 && (f = "toPath"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/13/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "fromPath" || i === "toPath"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/13/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/13/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/13/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var I = q === e;
                            } else
                              var I = !0;
                            if (I)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/13/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var I = a === e;
                              } else
                                var I = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/13/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var K = n === e;
                    } else
                      var K = !0;
                    if (K) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/13/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "mv")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/13/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "mv"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var K = n === e;
                      } else
                        var K = !0;
                      if (K) {
                        if (r.fromPath !== void 0) {
                          const i = e;
                          if (typeof r.fromPath != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/fromPath",
                                schemaPath: "#/oneOf/13/properties/fromPath/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var K = i === e;
                        } else
                          var K = !0;
                        if (K)
                          if (r.toPath !== void 0) {
                            const i = e;
                            if (typeof r.toPath != "string")
                              return o.errors = [
                                {
                                  instancePath: t + "/toPath",
                                  schemaPath: "#/oneOf/13/properties/toPath/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            var K = i === e;
                          } else
                            var K = !0;
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/13/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "resetData") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/14/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/14/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/14/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/14/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var A = q === e;
                            } else
                              var A = !0;
                            if (A)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/14/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var A = a === e;
                              } else
                                var A = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/14/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var Z = n === e;
                    } else
                      var Z = !0;
                    if (Z)
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/14/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "resetData")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/14/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "resetData"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var Z = n === e;
                      } else
                        var Z = !0;
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/14/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "request") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.request === void 0 && (f = "request") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/15/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "request"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/15/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/15/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/15/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var B = q === e;
                            } else
                              var B = !0;
                            if (B)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/15/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var B = a === e;
                              } else
                                var B = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/15/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var V = n === e;
                    } else
                      var V = !0;
                    if (V) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/15/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "request")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/15/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "request"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var V = n === e;
                      } else
                        var V = !0;
                      if (V)
                        if (r.request !== void 0) {
                          const i = e;
                          ce(
                            r.request,
                            {
                              instancePath: t + "/request",
                              parentData: r,
                              parentDataProperty: "request",
                              rootData: c
                            }
                          ) || (s = s === null ? ce.errors : s.concat(
                            ce.errors
                          ), e = s.length);
                          var V = i === e;
                        } else
                          var V = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/15/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "rm") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.path === void 0 && (f = "path") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/16/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "path"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/16/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/16/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/16/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var ie = q === e;
                            } else
                              var ie = !0;
                            if (ie)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/16/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var ie = a === e;
                              } else
                                var ie = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/16/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var le = n === e;
                    } else
                      var le = !0;
                    if (le) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/16/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "rm")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/16/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "rm"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var le = n === e;
                      } else
                        var le = !0;
                      if (le)
                        if (r.path !== void 0) {
                          const i = e;
                          if (typeof r.path != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/path",
                                schemaPath: "#/oneOf/16/properties/path/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var le = i === e;
                        } else
                          var le = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/16/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "rmdir") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.path === void 0 && (f = "path") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/17/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "path"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/17/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/17/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/17/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var ge = q === e;
                            } else
                              var ge = !0;
                            if (ge)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/17/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var ge = a === e;
                              } else
                                var ge = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/17/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var Te = n === e;
                    } else
                      var Te = !0;
                    if (Te) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/17/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "rmdir")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/17/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "rmdir"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var Te = n === e;
                      } else
                        var Te = !0;
                      if (Te)
                        if (r.path !== void 0) {
                          const i = e;
                          if (typeof r.path != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/path",
                                schemaPath: "#/oneOf/17/properties/path/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var Te = i === e;
                        } else
                          var Te = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/17/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "runPHP") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.code === void 0 && (f = "code") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/18/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "code"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/18/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/18/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/18/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var xe = q === e;
                            } else
                              var xe = !0;
                            if (xe)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/18/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var xe = a === e;
                              } else
                                var xe = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/18/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var je = n === e;
                    } else
                      var je = !0;
                    if (je) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/18/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "runPHP")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/18/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "runPHP"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var je = n === e;
                      } else
                        var je = !0;
                      if (je)
                        if (r.code !== void 0) {
                          const i = e;
                          if (typeof r.code != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/code",
                                schemaPath: "#/oneOf/18/properties/code/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var je = i === e;
                        } else
                          var je = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/18/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "runPHPWithOptions") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.options === void 0 && (f = "options") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/19/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "options"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/19/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/19/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/19/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var De = q === e;
                            } else
                              var De = !0;
                            if (De)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/19/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var De = a === e;
                              } else
                                var De = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/19/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var Ee = n === e;
                    } else
                      var Ee = !0;
                    if (Ee) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/19/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "runPHPWithOptions")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/19/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "runPHPWithOptions"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var Ee = n === e;
                      } else
                        var Ee = !0;
                      if (Ee)
                        if (r.options !== void 0) {
                          const i = e;
                          ne(
                            r.options,
                            {
                              instancePath: t + "/options",
                              parentData: r,
                              parentDataProperty: "options",
                              rootData: c
                            }
                          ) || (s = s === null ? ne.errors : s.concat(
                            ne.errors
                          ), e = s.length);
                          var Ee = i === e;
                        } else
                          var Ee = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/19/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "runWpInstallationWizard") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.options === void 0 && (f = "options") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/20/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "options"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/20/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/20/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/20/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var Ce = q === e;
                            } else
                              var Ce = !0;
                            if (Ce)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/20/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var Ce = a === e;
                              } else
                                var Ce = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/20/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var qe = n === e;
                    } else
                      var qe = !0;
                    if (qe) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/20/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "runWpInstallationWizard")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/20/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "runWpInstallationWizard"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var qe = n === e;
                      } else
                        var qe = !0;
                      if (qe)
                        if (r.options !== void 0) {
                          let i = r.options;
                          const n = e;
                          if (e === e)
                            if (i && typeof i == "object" && !Array.isArray(
                              i
                            )) {
                              const q = e;
                              for (const te in i)
                                if (!(te === "adminUsername" || te === "adminPassword"))
                                  return o.errors = [
                                    {
                                      instancePath: t + "/options",
                                      schemaPath: "#/definitions/WordPressInstallationOptions/additionalProperties",
                                      keyword: "additionalProperties",
                                      params: {
                                        additionalProperty: te
                                      },
                                      message: "must NOT have additional properties"
                                    }
                                  ], !1;
                              if (q === e) {
                                if (i.adminUsername !== void 0) {
                                  const te = e;
                                  if (typeof i.adminUsername != "string")
                                    return o.errors = [
                                      {
                                        instancePath: t + "/options/adminUsername",
                                        schemaPath: "#/definitions/WordPressInstallationOptions/properties/adminUsername/type",
                                        keyword: "type",
                                        params: {
                                          type: "string"
                                        },
                                        message: "must be string"
                                      }
                                    ], !1;
                                  var Ie = te === e;
                                } else
                                  var Ie = !0;
                                if (Ie)
                                  if (i.adminPassword !== void 0) {
                                    const te = e;
                                    if (typeof i.adminPassword != "string")
                                      return o.errors = [
                                        {
                                          instancePath: t + "/options/adminPassword",
                                          schemaPath: "#/definitions/WordPressInstallationOptions/properties/adminPassword/type",
                                          keyword: "type",
                                          params: {
                                            type: "string"
                                          },
                                          message: "must be string"
                                        }
                                      ], !1;
                                    var Ie = te === e;
                                  } else
                                    var Ie = !0;
                              }
                            } else
                              return o.errors = [
                                {
                                  instancePath: t + "/options",
                                  schemaPath: "#/definitions/WordPressInstallationOptions/type",
                                  keyword: "type",
                                  params: {
                                    type: "object"
                                  },
                                  message: "must be object"
                                }
                              ], !1;
                          var qe = n === e;
                        } else
                          var qe = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/20/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "runSql") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.sql === void 0 && (f = "sql") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/21/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "sql"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/21/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/21/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/21/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var We = q === e;
                            } else
                              var We = !0;
                            if (We)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/21/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var We = a === e;
                              } else
                                var We = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/21/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var $e = n === e;
                    } else
                      var $e = !0;
                    if ($e) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/21/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "runSql")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/21/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "runSql"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var $e = n === e;
                      } else
                        var $e = !0;
                      if ($e)
                        if (r.sql !== void 0) {
                          const i = e;
                          Q(r.sql, {
                            instancePath: t + "/sql",
                            parentData: r,
                            parentDataProperty: "sql",
                            rootData: c
                          }) || (s = s === null ? Q.errors : s.concat(
                            Q.errors
                          ), e = s.length);
                          var $e = i === e;
                        } else
                          var $e = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/21/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "setSiteOptions") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.options === void 0 && (f = "options") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/22/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "options"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/22/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/22/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/22/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var Ue = q === e;
                            } else
                              var Ue = !0;
                            if (Ue)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/22/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var Ue = a === e;
                              } else
                                var Ue = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/22/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var Ae = n === e;
                    } else
                      var Ae = !0;
                    if (Ae) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/22/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "setSiteOptions")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/22/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "setSiteOptions"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var Ae = n === e;
                      } else
                        var Ae = !0;
                      if (Ae)
                        if (r.options !== void 0) {
                          let i = r.options;
                          const n = e;
                          if (e === n && !(i && typeof i == "object" && !Array.isArray(
                            i
                          )))
                            return o.errors = [
                              {
                                instancePath: t + "/options",
                                schemaPath: "#/oneOf/22/properties/options/type",
                                keyword: "type",
                                params: {
                                  type: "object"
                                },
                                message: "must be object"
                              }
                            ], !1;
                          var Ae = n === e;
                        } else
                          var Ae = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/22/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "unzip") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.extractToPath === void 0 && (f = "extractToPath") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/23/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "zipFile" || i === "zipPath" || i === "extractToPath"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/23/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/23/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/23/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var ze = q === e;
                            } else
                              var ze = !0;
                            if (ze)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/23/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var ze = a === e;
                              } else
                                var ze = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/23/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var fe = n === e;
                    } else
                      var fe = !0;
                    if (fe) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/23/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "unzip")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/23/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "unzip"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var fe = n === e;
                      } else
                        var fe = !0;
                      if (fe) {
                        if (r.zipFile !== void 0) {
                          const i = e;
                          Q(
                            r.zipFile,
                            {
                              instancePath: t + "/zipFile",
                              parentData: r,
                              parentDataProperty: "zipFile",
                              rootData: c
                            }
                          ) || (s = s === null ? Q.errors : s.concat(
                            Q.errors
                          ), e = s.length);
                          var fe = i === e;
                        } else
                          var fe = !0;
                        if (fe) {
                          if (r.zipPath !== void 0) {
                            const i = e;
                            if (typeof r.zipPath != "string")
                              return o.errors = [
                                {
                                  instancePath: t + "/zipPath",
                                  schemaPath: "#/oneOf/23/properties/zipPath/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            var fe = i === e;
                          } else
                            var fe = !0;
                          if (fe)
                            if (r.extractToPath !== void 0) {
                              const i = e;
                              if (typeof r.extractToPath != "string")
                                return o.errors = [
                                  {
                                    instancePath: t + "/extractToPath",
                                    schemaPath: "#/oneOf/23/properties/extractToPath/type",
                                    keyword: "type",
                                    params: {
                                      type: "string"
                                    },
                                    message: "must be string"
                                  }
                                ], !1;
                              var fe = i === e;
                            } else
                              var fe = !0;
                        }
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/23/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "updateUserMeta") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.meta === void 0 && (f = "meta") || r.step === void 0 && (f = "step") || r.userId === void 0 && (f = "userId"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/24/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "meta" || i === "userId"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/24/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/24/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/24/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var Be = q === e;
                            } else
                              var Be = !0;
                            if (Be)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/24/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var Be = a === e;
                              } else
                                var Be = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/24/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var be = n === e;
                    } else
                      var be = !0;
                    if (be) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/24/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "updateUserMeta")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/24/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "updateUserMeta"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var be = n === e;
                      } else
                        var be = !0;
                      if (be) {
                        if (r.meta !== void 0) {
                          let i = r.meta;
                          const n = e;
                          if (e === n && !(i && typeof i == "object" && !Array.isArray(
                            i
                          )))
                            return o.errors = [
                              {
                                instancePath: t + "/meta",
                                schemaPath: "#/oneOf/24/properties/meta/type",
                                keyword: "type",
                                params: {
                                  type: "object"
                                },
                                message: "must be object"
                              }
                            ], !1;
                          var be = n === e;
                        } else
                          var be = !0;
                        if (be)
                          if (r.userId !== void 0) {
                            let i = r.userId;
                            const n = e;
                            if (!(typeof i == "number" && isFinite(
                              i
                            )))
                              return o.errors = [
                                {
                                  instancePath: t + "/userId",
                                  schemaPath: "#/oneOf/24/properties/userId/type",
                                  keyword: "type",
                                  params: {
                                    type: "number"
                                  },
                                  message: "must be number"
                                }
                              ], !1;
                            var be = n === e;
                          } else
                            var be = !0;
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/24/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "writeFile") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.data === void 0 && (f = "data") || r.path === void 0 && (f = "path") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/25/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "path" || i === "data"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/25/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/25/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/25/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var Me = q === e;
                            } else
                              var Me = !0;
                            if (Me)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/25/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var Me = a === e;
                              } else
                                var Me = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/25/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var we = n === e;
                    } else
                      var we = !0;
                    if (we) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/25/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "writeFile")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/25/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "writeFile"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var we = n === e;
                      } else
                        var we = !0;
                      if (we) {
                        if (r.path !== void 0) {
                          const i = e;
                          if (typeof r.path != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/path",
                                schemaPath: "#/oneOf/25/properties/path/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var we = i === e;
                        } else
                          var we = !0;
                        if (we)
                          if (r.data !== void 0) {
                            let i = r.data;
                            const n = e, O = e;
                            let a = !1;
                            const q = e;
                            Q(
                              i,
                              {
                                instancePath: t + "/data",
                                parentData: r,
                                parentDataProperty: "data",
                                rootData: c
                              }
                            ) || (s = s === null ? Q.errors : s.concat(
                              Q.errors
                            ), e = s.length);
                            var Fe = q === e;
                            if (a = a || Fe, !a) {
                              const oe = e;
                              if (typeof i != "string") {
                                const _e = {
                                  instancePath: t + "/data",
                                  schemaPath: "#/oneOf/25/properties/data/anyOf/1/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                };
                                s === null ? s = [
                                  _e
                                ] : s.push(
                                  _e
                                ), e++;
                              }
                              var Fe = oe === e;
                              if (a = a || Fe, !a) {
                                const _e = e;
                                if (e === _e)
                                  if (i && typeof i == "object" && !Array.isArray(
                                    i
                                  )) {
                                    let me;
                                    if (i.BYTES_PER_ELEMENT === void 0 && (me = "BYTES_PER_ELEMENT") || i.buffer === void 0 && (me = "buffer") || i.byteLength === void 0 && (me = "byteLength") || i.byteOffset === void 0 && (me = "byteOffset") || i.length === void 0 && (me = "length")) {
                                      const Ge = {
                                        instancePath: t + "/data",
                                        schemaPath: "#/oneOf/25/properties/data/anyOf/2/required",
                                        keyword: "required",
                                        params: {
                                          missingProperty: me
                                        },
                                        message: "must have required property '" + me + "'"
                                      };
                                      s === null ? s = [
                                        Ge
                                      ] : s.push(
                                        Ge
                                      ), e++;
                                    } else {
                                      const Ge = e;
                                      for (const J in i)
                                        if (!(J === "BYTES_PER_ELEMENT" || J === "buffer" || J === "byteLength" || J === "byteOffset" || J === "length")) {
                                          let ue = i[J];
                                          const Qe = e;
                                          if (!(typeof ue == "number" && isFinite(
                                            ue
                                          ))) {
                                            const pe = {
                                              instancePath: t + "/data/" + J.replace(
                                                /~/g,
                                                "~0"
                                              ).replace(
                                                /\//g,
                                                "~1"
                                              ),
                                              schemaPath: "#/oneOf/25/properties/data/anyOf/2/additionalProperties/type",
                                              keyword: "type",
                                              params: {
                                                type: "number"
                                              },
                                              message: "must be number"
                                            };
                                            s === null ? s = [
                                              pe
                                            ] : s.push(
                                              pe
                                            ), e++;
                                          }
                                          var Fr = Qe === e;
                                          if (!Fr)
                                            break;
                                        }
                                      if (Ge === e) {
                                        if (i.BYTES_PER_ELEMENT !== void 0) {
                                          let J = i.BYTES_PER_ELEMENT;
                                          const ue = e;
                                          if (!(typeof J == "number" && isFinite(
                                            J
                                          ))) {
                                            const Qe = {
                                              instancePath: t + "/data/BYTES_PER_ELEMENT",
                                              schemaPath: "#/oneOf/25/properties/data/anyOf/2/properties/BYTES_PER_ELEMENT/type",
                                              keyword: "type",
                                              params: {
                                                type: "number"
                                              },
                                              message: "must be number"
                                            };
                                            s === null ? s = [
                                              Qe
                                            ] : s.push(
                                              Qe
                                            ), e++;
                                          }
                                          var de = ue === e;
                                        } else
                                          var de = !0;
                                        if (de) {
                                          if (i.buffer !== void 0) {
                                            let J = i.buffer;
                                            const ue = e;
                                            if (e === ue)
                                              if (J && typeof J == "object" && !Array.isArray(
                                                J
                                              )) {
                                                let pe;
                                                if (J.byteLength === void 0 && (pe = "byteLength")) {
                                                  const Je = {
                                                    instancePath: t + "/data/buffer",
                                                    schemaPath: "#/oneOf/25/properties/data/anyOf/2/properties/buffer/required",
                                                    keyword: "required",
                                                    params: {
                                                      missingProperty: pe
                                                    },
                                                    message: "must have required property '" + pe + "'"
                                                  };
                                                  s === null ? s = [
                                                    Je
                                                  ] : s.push(
                                                    Je
                                                  ), e++;
                                                } else {
                                                  const Je = e;
                                                  for (const Se in J)
                                                    if (Se !== "byteLength") {
                                                      const Ne = {
                                                        instancePath: t + "/data/buffer",
                                                        schemaPath: "#/oneOf/25/properties/data/anyOf/2/properties/buffer/additionalProperties",
                                                        keyword: "additionalProperties",
                                                        params: {
                                                          additionalProperty: Se
                                                        },
                                                        message: "must NOT have additional properties"
                                                      };
                                                      s === null ? s = [
                                                        Ne
                                                      ] : s.push(
                                                        Ne
                                                      ), e++;
                                                      break;
                                                    }
                                                  if (Je === e && J.byteLength !== void 0) {
                                                    let Se = J.byteLength;
                                                    if (!(typeof Se == "number" && isFinite(
                                                      Se
                                                    ))) {
                                                      const Ne = {
                                                        instancePath: t + "/data/buffer/byteLength",
                                                        schemaPath: "#/oneOf/25/properties/data/anyOf/2/properties/buffer/properties/byteLength/type",
                                                        keyword: "type",
                                                        params: {
                                                          type: "number"
                                                        },
                                                        message: "must be number"
                                                      };
                                                      s === null ? s = [
                                                        Ne
                                                      ] : s.push(
                                                        Ne
                                                      ), e++;
                                                    }
                                                  }
                                                }
                                              } else {
                                                const pe = {
                                                  instancePath: t + "/data/buffer",
                                                  schemaPath: "#/oneOf/25/properties/data/anyOf/2/properties/buffer/type",
                                                  keyword: "type",
                                                  params: {
                                                    type: "object"
                                                  },
                                                  message: "must be object"
                                                };
                                                s === null ? s = [
                                                  pe
                                                ] : s.push(
                                                  pe
                                                ), e++;
                                              }
                                            var de = ue === e;
                                          } else
                                            var de = !0;
                                          if (de) {
                                            if (i.byteLength !== void 0) {
                                              let J = i.byteLength;
                                              const ue = e;
                                              if (!(typeof J == "number" && isFinite(
                                                J
                                              ))) {
                                                const pe = {
                                                  instancePath: t + "/data/byteLength",
                                                  schemaPath: "#/oneOf/25/properties/data/anyOf/2/properties/byteLength/type",
                                                  keyword: "type",
                                                  params: {
                                                    type: "number"
                                                  },
                                                  message: "must be number"
                                                };
                                                s === null ? s = [
                                                  pe
                                                ] : s.push(
                                                  pe
                                                ), e++;
                                              }
                                              var de = ue === e;
                                            } else
                                              var de = !0;
                                            if (de) {
                                              if (i.byteOffset !== void 0) {
                                                let J = i.byteOffset;
                                                const ue = e;
                                                if (!(typeof J == "number" && isFinite(
                                                  J
                                                ))) {
                                                  const pe = {
                                                    instancePath: t + "/data/byteOffset",
                                                    schemaPath: "#/oneOf/25/properties/data/anyOf/2/properties/byteOffset/type",
                                                    keyword: "type",
                                                    params: {
                                                      type: "number"
                                                    },
                                                    message: "must be number"
                                                  };
                                                  s === null ? s = [
                                                    pe
                                                  ] : s.push(
                                                    pe
                                                  ), e++;
                                                }
                                                var de = ue === e;
                                              } else
                                                var de = !0;
                                              if (de)
                                                if (i.length !== void 0) {
                                                  let J = i.length;
                                                  const ue = e;
                                                  if (!(typeof J == "number" && isFinite(
                                                    J
                                                  ))) {
                                                    const pe = {
                                                      instancePath: t + "/data/length",
                                                      schemaPath: "#/oneOf/25/properties/data/anyOf/2/properties/length/type",
                                                      keyword: "type",
                                                      params: {
                                                        type: "number"
                                                      },
                                                      message: "must be number"
                                                    };
                                                    s === null ? s = [
                                                      pe
                                                    ] : s.push(
                                                      pe
                                                    ), e++;
                                                  }
                                                  var de = ue === e;
                                                } else
                                                  var de = !0;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  } else {
                                    const me = {
                                      instancePath: t + "/data",
                                      schemaPath: "#/oneOf/25/properties/data/anyOf/2/type",
                                      keyword: "type",
                                      params: {
                                        type: "object"
                                      },
                                      message: "must be object"
                                    };
                                    s === null ? s = [
                                      me
                                    ] : s.push(
                                      me
                                    ), e++;
                                  }
                                var Fe = _e === e;
                                a = a || Fe;
                              }
                            }
                            if (a)
                              e = O, s !== null && (O ? s.length = O : s = null);
                            else {
                              const oe = {
                                instancePath: t + "/data",
                                schemaPath: "#/oneOf/25/properties/data/anyOf",
                                keyword: "anyOf",
                                params: {},
                                message: "must match a schema in anyOf"
                              };
                              return s === null ? s = [
                                oe
                              ] : s.push(
                                oe
                              ), e++, o.errors = s, !1;
                            }
                            var we = n === e;
                          } else
                            var we = !0;
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/25/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "writeFiles") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.filesTree === void 0 && (f = "filesTree") || r.step === void 0 && (f = "step") || r.writeToPath === void 0 && (f = "writeToPath"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/26/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "writeToPath" || i === "filesTree"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/26/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/26/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/26/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var Ve = q === e;
                            } else
                              var Ve = !0;
                            if (Ve)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/26/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var Ve = a === e;
                              } else
                                var Ve = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/26/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var ve = n === e;
                    } else
                      var ve = !0;
                    if (ve) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/26/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "writeFiles")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/26/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "writeFiles"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var ve = n === e;
                      } else
                        var ve = !0;
                      if (ve) {
                        if (r.writeToPath !== void 0) {
                          const i = e;
                          if (typeof r.writeToPath != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/writeToPath",
                                schemaPath: "#/oneOf/26/properties/writeToPath/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var ve = i === e;
                        } else
                          var ve = !0;
                        if (ve)
                          if (r.filesTree !== void 0) {
                            const i = e;
                            he(
                              r.filesTree,
                              {
                                instancePath: t + "/filesTree",
                                parentData: r,
                                parentDataProperty: "filesTree",
                                rootData: c
                              }
                            ) || (s = s === null ? he.errors : s.concat(
                              he.errors
                            ), e = s.length);
                            var ve = i === e;
                          } else
                            var ve = !0;
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/26/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "wp-cli") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.command === void 0 && (f = "command") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/27/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "command" || i === "wpCliPath"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/27/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/27/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/27/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var He = q === e;
                            } else
                              var He = !0;
                            if (He)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/27/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var He = a === e;
                              } else
                                var He = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/27/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var Pe = n === e;
                    } else
                      var Pe = !0;
                    if (Pe) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/27/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "wp-cli")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/27/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "wp-cli"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var Pe = n === e;
                      } else
                        var Pe = !0;
                      if (Pe) {
                        if (r.command !== void 0) {
                          let i = r.command;
                          const n = e, O = e;
                          let a = !1;
                          const q = e;
                          if (typeof i != "string") {
                            const oe = {
                              instancePath: t + "/command",
                              schemaPath: "#/oneOf/27/properties/command/anyOf/0/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            };
                            s === null ? s = [oe] : s.push(oe), e++;
                          }
                          var rr = q === e;
                          if (a = a || rr, !a) {
                            const oe = e;
                            if (e === oe)
                              if (Array.isArray(
                                i
                              )) {
                                var fr = !0;
                                const _e = i.length;
                                for (let Ye = 0; Ye < _e; Ye++) {
                                  const me = e;
                                  if (typeof i[Ye] != "string") {
                                    const J = {
                                      instancePath: t + "/command/" + Ye,
                                      schemaPath: "#/oneOf/27/properties/command/anyOf/1/items/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    };
                                    s === null ? s = [
                                      J
                                    ] : s.push(
                                      J
                                    ), e++;
                                  }
                                  var fr = me === e;
                                  if (!fr)
                                    break;
                                }
                              } else {
                                const _e = {
                                  instancePath: t + "/command",
                                  schemaPath: "#/oneOf/27/properties/command/anyOf/1/type",
                                  keyword: "type",
                                  params: {
                                    type: "array"
                                  },
                                  message: "must be array"
                                };
                                s === null ? s = [
                                  _e
                                ] : s.push(
                                  _e
                                ), e++;
                              }
                            var rr = oe === e;
                            a = a || rr;
                          }
                          if (a)
                            e = O, s !== null && (O ? s.length = O : s = null);
                          else {
                            const oe = {
                              instancePath: t + "/command",
                              schemaPath: "#/oneOf/27/properties/command/anyOf",
                              keyword: "anyOf",
                              params: {},
                              message: "must match a schema in anyOf"
                            };
                            return s === null ? s = [oe] : s.push(oe), e++, o.errors = s, !1;
                          }
                          var Pe = n === e;
                        } else
                          var Pe = !0;
                        if (Pe)
                          if (r.wpCliPath !== void 0) {
                            const i = e;
                            if (typeof r.wpCliPath != "string")
                              return o.errors = [
                                {
                                  instancePath: t + "/wpCliPath",
                                  schemaPath: "#/oneOf/27/properties/wpCliPath/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            var Pe = i === e;
                          } else
                            var Pe = !0;
                      }
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/27/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else if (G === "setSiteLanguage") {
            if (e === e)
              if (r && typeof r == "object" && !Array.isArray(r)) {
                let f;
                if (r.language === void 0 && (f = "language") || r.step === void 0 && (f = "step"))
                  return o.errors = [
                    {
                      instancePath: t,
                      schemaPath: "#/oneOf/28/required",
                      keyword: "required",
                      params: {
                        missingProperty: f
                      },
                      message: "must have required property '" + f + "'"
                    }
                  ], !1;
                {
                  const N = e;
                  for (const i in r)
                    if (!(i === "progress" || i === "step" || i === "language"))
                      return o.errors = [
                        {
                          instancePath: t,
                          schemaPath: "#/oneOf/28/additionalProperties",
                          keyword: "additionalProperties",
                          params: {
                            additionalProperty: i
                          },
                          message: "must NOT have additional properties"
                        }
                      ], !1;
                  if (N === e) {
                    if (r.progress !== void 0) {
                      let i = r.progress;
                      const n = e;
                      if (e === n)
                        if (i && typeof i == "object" && !Array.isArray(i)) {
                          const O = e;
                          for (const a in i)
                            if (!(a === "weight" || a === "caption"))
                              return o.errors = [
                                {
                                  instancePath: t + "/progress",
                                  schemaPath: "#/oneOf/28/properties/progress/additionalProperties",
                                  keyword: "additionalProperties",
                                  params: {
                                    additionalProperty: a
                                  },
                                  message: "must NOT have additional properties"
                                }
                              ], !1;
                          if (O === e) {
                            if (i.weight !== void 0) {
                              let a = i.weight;
                              const q = e;
                              if (!(typeof a == "number" && isFinite(
                                a
                              )))
                                return o.errors = [
                                  {
                                    instancePath: t + "/progress/weight",
                                    schemaPath: "#/oneOf/28/properties/progress/properties/weight/type",
                                    keyword: "type",
                                    params: {
                                      type: "number"
                                    },
                                    message: "must be number"
                                  }
                                ], !1;
                              var Ze = q === e;
                            } else
                              var Ze = !0;
                            if (Ze)
                              if (i.caption !== void 0) {
                                const a = e;
                                if (typeof i.caption != "string")
                                  return o.errors = [
                                    {
                                      instancePath: t + "/progress/caption",
                                      schemaPath: "#/oneOf/28/properties/progress/properties/caption/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var Ze = a === e;
                              } else
                                var Ze = !0;
                          }
                        } else
                          return o.errors = [
                            {
                              instancePath: t + "/progress",
                              schemaPath: "#/oneOf/28/properties/progress/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var Re = n === e;
                    } else
                      var Re = !0;
                    if (Re) {
                      if (r.step !== void 0) {
                        let i = r.step;
                        const n = e;
                        if (typeof i != "string")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/28/properties/step/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        if (i !== "setSiteLanguage")
                          return o.errors = [
                            {
                              instancePath: t + "/step",
                              schemaPath: "#/oneOf/28/properties/step/const",
                              keyword: "const",
                              params: {
                                allowedValue: "setSiteLanguage"
                              },
                              message: "must be equal to constant"
                            }
                          ], !1;
                        var Re = n === e;
                      } else
                        var Re = !0;
                      if (Re)
                        if (r.language !== void 0) {
                          const i = e;
                          if (typeof r.language != "string")
                            return o.errors = [
                              {
                                instancePath: t + "/language",
                                schemaPath: "#/oneOf/28/properties/language/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var Re = i === e;
                        } else
                          var Re = !0;
                    }
                  }
                }
              } else
                return o.errors = [
                  {
                    instancePath: t,
                    schemaPath: "#/oneOf/28/type",
                    keyword: "type",
                    params: { type: "object" },
                    message: "must be object"
                  }
                ], !1;
          } else
            return o.errors = [
              {
                instancePath: t,
                schemaPath: "#/discriminator",
                keyword: "discriminator",
                params: {
                  error: "mapping",
                  tag: "step",
                  tagValue: G
                },
                message: 'value of tag "step" must be in oneOf'
              }
            ], !1;
        else
          return o.errors = [
            {
              instancePath: t,
              schemaPath: "#/discriminator",
              keyword: "discriminator",
              params: {
                error: "tag",
                tag: "step",
                tagValue: G
              },
              message: 'tag "step" must be string'
            }
          ], !1;
      }
    } else
      return o.errors = [
        {
          instancePath: t,
          schemaPath: "#/type",
          keyword: "type",
          params: { type: "object" },
          message: "must be object"
        }
      ], !1;
  return o.errors = s, e === 0;
}
function H(r, { instancePath: t = "", parentData: p, parentDataProperty: u, rootData: c = r } = {}) {
  let s = null, e = 0;
  if (e === 0)
    if (r && typeof r == "object" && !Array.isArray(r)) {
      const ee = e;
      for (const l in r)
        if (!Ar.call(zt.properties, l))
          return H.errors = [
            {
              instancePath: t,
              schemaPath: "#/additionalProperties",
              keyword: "additionalProperties",
              params: { additionalProperty: l },
              message: "must NOT have additional properties"
            }
          ], !1;
      if (ee === e) {
        if (r.landingPage !== void 0) {
          const l = e;
          if (typeof r.landingPage != "string")
            return H.errors = [
              {
                instancePath: t + "/landingPage",
                schemaPath: "#/properties/landingPage/type",
                keyword: "type",
                params: { type: "string" },
                message: "must be string"
              }
            ], !1;
          var d = l === e;
        } else
          var d = !0;
        if (d) {
          if (r.description !== void 0) {
            const l = e;
            if (typeof r.description != "string")
              return H.errors = [
                {
                  instancePath: t + "/description",
                  schemaPath: "#/properties/description/type",
                  keyword: "type",
                  params: { type: "string" },
                  message: "must be string"
                }
              ], !1;
            var d = l === e;
          } else
            var d = !0;
          if (d) {
            if (r.meta !== void 0) {
              let l = r.meta;
              const j = e;
              if (e === j)
                if (l && typeof l == "object" && !Array.isArray(l)) {
                  let v;
                  if (l.title === void 0 && (v = "title") || l.author === void 0 && (v = "author"))
                    return H.errors = [
                      {
                        instancePath: t + "/meta",
                        schemaPath: "#/properties/meta/required",
                        keyword: "required",
                        params: {
                          missingProperty: v
                        },
                        message: "must have required property '" + v + "'"
                      }
                    ], !1;
                  {
                    const w = e;
                    for (const b in l)
                      if (!(b === "title" || b === "description" || b === "author" || b === "categories"))
                        return H.errors = [
                          {
                            instancePath: t + "/meta",
                            schemaPath: "#/properties/meta/additionalProperties",
                            keyword: "additionalProperties",
                            params: {
                              additionalProperty: b
                            },
                            message: "must NOT have additional properties"
                          }
                        ], !1;
                    if (w === e) {
                      if (l.title !== void 0) {
                        const b = e;
                        if (typeof l.title != "string")
                          return H.errors = [
                            {
                              instancePath: t + "/meta/title",
                              schemaPath: "#/properties/meta/properties/title/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            }
                          ], !1;
                        var h = b === e;
                      } else
                        var h = !0;
                      if (h) {
                        if (l.description !== void 0) {
                          const b = e;
                          if (typeof l.description != "string")
                            return H.errors = [
                              {
                                instancePath: t + "/meta/description",
                                schemaPath: "#/properties/meta/properties/description/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          var h = b === e;
                        } else
                          var h = !0;
                        if (h) {
                          if (l.author !== void 0) {
                            const b = e;
                            if (typeof l.author != "string")
                              return H.errors = [
                                {
                                  instancePath: t + "/meta/author",
                                  schemaPath: "#/properties/meta/properties/author/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            var h = b === e;
                          } else
                            var h = !0;
                          if (h)
                            if (l.categories !== void 0) {
                              let b = l.categories;
                              const g = e;
                              if (e === g)
                                if (Array.isArray(
                                  b
                                )) {
                                  var D = !0;
                                  const E = b.length;
                                  for (let L = 0; L < E; L++) {
                                    const x = e;
                                    if (typeof b[L] != "string")
                                      return H.errors = [
                                        {
                                          instancePath: t + "/meta/categories/" + L,
                                          schemaPath: "#/properties/meta/properties/categories/items/type",
                                          keyword: "type",
                                          params: {
                                            type: "string"
                                          },
                                          message: "must be string"
                                        }
                                      ], !1;
                                    var D = x === e;
                                    if (!D)
                                      break;
                                  }
                                } else
                                  return H.errors = [
                                    {
                                      instancePath: t + "/meta/categories",
                                      schemaPath: "#/properties/meta/properties/categories/type",
                                      keyword: "type",
                                      params: {
                                        type: "array"
                                      },
                                      message: "must be array"
                                    }
                                  ], !1;
                              var h = g === e;
                            } else
                              var h = !0;
                        }
                      }
                    }
                  }
                } else
                  return H.errors = [
                    {
                      instancePath: t + "/meta",
                      schemaPath: "#/properties/meta/type",
                      keyword: "type",
                      params: { type: "object" },
                      message: "must be object"
                    }
                  ], !1;
              var d = j === e;
            } else
              var d = !0;
            if (d) {
              if (r.preferredVersions !== void 0) {
                let l = r.preferredVersions;
                const j = e;
                if (e === j)
                  if (l && typeof l == "object" && !Array.isArray(l)) {
                    let v;
                    if (l.php === void 0 && (v = "php") || l.wp === void 0 && (v = "wp"))
                      return H.errors = [
                        {
                          instancePath: t + "/preferredVersions",
                          schemaPath: "#/properties/preferredVersions/required",
                          keyword: "required",
                          params: {
                            missingProperty: v
                          },
                          message: "must have required property '" + v + "'"
                        }
                      ], !1;
                    {
                      const w = e;
                      for (const b in l)
                        if (!(b === "php" || b === "wp"))
                          return H.errors = [
                            {
                              instancePath: t + "/preferredVersions",
                              schemaPath: "#/properties/preferredVersions/additionalProperties",
                              keyword: "additionalProperties",
                              params: {
                                additionalProperty: b
                              },
                              message: "must NOT have additional properties"
                            }
                          ], !1;
                      if (w === e) {
                        if (l.php !== void 0) {
                          let b = l.php;
                          const g = e, y = e;
                          let E = !1;
                          const L = e;
                          if (typeof b != "string") {
                            const x = {
                              instancePath: t + "/preferredVersions/php",
                              schemaPath: "#/definitions/SupportedPHPVersion/type",
                              keyword: "type",
                              params: {
                                type: "string"
                              },
                              message: "must be string"
                            };
                            s === null ? s = [x] : s.push(x), e++;
                          }
                          if (!(b === "8.4" || b === "8.3" || b === "8.2" || b === "8.1" || b === "8.0" || b === "7.4" || b === "7.3" || b === "7.2")) {
                            const x = {
                              instancePath: t + "/preferredVersions/php",
                              schemaPath: "#/definitions/SupportedPHPVersion/enum",
                              keyword: "enum",
                              params: {
                                allowedValues: Bt.enum
                              },
                              message: "must be equal to one of the allowed values"
                            };
                            s === null ? s = [x] : s.push(x), e++;
                          }
                          var S = L === e;
                          if (E = E || S, !E) {
                            const x = e;
                            if (typeof b != "string") {
                              const U = {
                                instancePath: t + "/preferredVersions/php",
                                schemaPath: "#/properties/preferredVersions/properties/php/anyOf/1/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              };
                              s === null ? s = [
                                U
                              ] : s.push(
                                U
                              ), e++;
                            }
                            if (b !== "latest") {
                              const U = {
                                instancePath: t + "/preferredVersions/php",
                                schemaPath: "#/properties/preferredVersions/properties/php/anyOf/1/const",
                                keyword: "const",
                                params: {
                                  allowedValue: "latest"
                                },
                                message: "must be equal to constant"
                              };
                              s === null ? s = [
                                U
                              ] : s.push(
                                U
                              ), e++;
                            }
                            var S = x === e;
                            E = E || S;
                          }
                          if (E)
                            e = y, s !== null && (y ? s.length = y : s = null);
                          else {
                            const x = {
                              instancePath: t + "/preferredVersions/php",
                              schemaPath: "#/properties/preferredVersions/properties/php/anyOf",
                              keyword: "anyOf",
                              params: {},
                              message: "must match a schema in anyOf"
                            };
                            return s === null ? s = [x] : s.push(x), e++, H.errors = s, !1;
                          }
                          var T = g === e;
                        } else
                          var T = !0;
                        if (T)
                          if (l.wp !== void 0) {
                            const b = e;
                            if (typeof l.wp != "string")
                              return H.errors = [
                                {
                                  instancePath: t + "/preferredVersions/wp",
                                  schemaPath: "#/properties/preferredVersions/properties/wp/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                }
                              ], !1;
                            var T = b === e;
                          } else
                            var T = !0;
                      }
                    }
                  } else
                    return H.errors = [
                      {
                        instancePath: t + "/preferredVersions",
                        schemaPath: "#/properties/preferredVersions/type",
                        keyword: "type",
                        params: { type: "object" },
                        message: "must be object"
                      }
                    ], !1;
                var d = j === e;
              } else
                var d = !0;
              if (d) {
                if (r.features !== void 0) {
                  let l = r.features;
                  const j = e;
                  if (e === j)
                    if (l && typeof l == "object" && !Array.isArray(l)) {
                      const v = e;
                      for (const w in l)
                        if (!(w === "intl" || w === "networking"))
                          return H.errors = [
                            {
                              instancePath: t + "/features",
                              schemaPath: "#/properties/features/additionalProperties",
                              keyword: "additionalProperties",
                              params: {
                                additionalProperty: w
                              },
                              message: "must NOT have additional properties"
                            }
                          ], !1;
                      if (v === e) {
                        if (l.intl !== void 0) {
                          const w = e;
                          if (typeof l.intl != "boolean")
                            return H.errors = [
                              {
                                instancePath: t + "/features/intl",
                                schemaPath: "#/properties/features/properties/intl/type",
                                keyword: "type",
                                params: {
                                  type: "boolean"
                                },
                                message: "must be boolean"
                              }
                            ], !1;
                          var _ = w === e;
                        } else
                          var _ = !0;
                        if (_)
                          if (l.networking !== void 0) {
                            const w = e;
                            if (typeof l.networking != "boolean")
                              return H.errors = [
                                {
                                  instancePath: t + "/features/networking",
                                  schemaPath: "#/properties/features/properties/networking/type",
                                  keyword: "type",
                                  params: {
                                    type: "boolean"
                                  },
                                  message: "must be boolean"
                                }
                              ], !1;
                            var _ = w === e;
                          } else
                            var _ = !0;
                      }
                    } else
                      return H.errors = [
                        {
                          instancePath: t + "/features",
                          schemaPath: "#/properties/features/type",
                          keyword: "type",
                          params: { type: "object" },
                          message: "must be object"
                        }
                      ], !1;
                  var d = j === e;
                } else
                  var d = !0;
                if (d) {
                  if (r.extraLibraries !== void 0) {
                    let l = r.extraLibraries;
                    const j = e;
                    if (e === j)
                      if (Array.isArray(l)) {
                        var k = !0;
                        const v = l.length;
                        for (let w = 0; w < v; w++) {
                          let b = l[w];
                          const g = e;
                          if (typeof b != "string")
                            return H.errors = [
                              {
                                instancePath: t + "/extraLibraries/" + w,
                                schemaPath: "#/definitions/ExtraLibrary/type",
                                keyword: "type",
                                params: {
                                  type: "string"
                                },
                                message: "must be string"
                              }
                            ], !1;
                          if (b !== "wp-cli")
                            return H.errors = [
                              {
                                instancePath: t + "/extraLibraries/" + w,
                                schemaPath: "#/definitions/ExtraLibrary/const",
                                keyword: "const",
                                params: {
                                  allowedValue: "wp-cli"
                                },
                                message: "must be equal to constant"
                              }
                            ], !1;
                          var k = g === e;
                          if (!k)
                            break;
                        }
                      } else
                        return H.errors = [
                          {
                            instancePath: t + "/extraLibraries",
                            schemaPath: "#/properties/extraLibraries/type",
                            keyword: "type",
                            params: {
                              type: "array"
                            },
                            message: "must be array"
                          }
                        ], !1;
                    var d = j === e;
                  } else
                    var d = !0;
                  if (d) {
                    if (r.constants !== void 0) {
                      let l = r.constants;
                      const j = e;
                      if (e === e)
                        if (l && typeof l == "object" && !Array.isArray(l))
                          for (const w in l) {
                            let b = l[w];
                            const g = e;
                            if (typeof b != "string" && typeof b != "boolean" && !(typeof b == "number" && isFinite(b)))
                              return H.errors = [
                                {
                                  instancePath: t + "/constants/" + w.replace(
                                    /~/g,
                                    "~0"
                                  ).replace(
                                    /\//g,
                                    "~1"
                                  ),
                                  schemaPath: "#/definitions/PHPConstants/additionalProperties/type",
                                  keyword: "type",
                                  params: {
                                    type: Mt.additionalProperties.type
                                  },
                                  message: "must be string,boolean,number"
                                }
                              ], !1;
                            var R = g === e;
                            if (!R)
                              break;
                          }
                        else
                          return H.errors = [
                            {
                              instancePath: t + "/constants",
                              schemaPath: "#/definitions/PHPConstants/type",
                              keyword: "type",
                              params: {
                                type: "object"
                              },
                              message: "must be object"
                            }
                          ], !1;
                      var d = j === e;
                    } else
                      var d = !0;
                    if (d) {
                      if (r.plugins !== void 0) {
                        let l = r.plugins;
                        const j = e;
                        if (e === j)
                          if (Array.isArray(l)) {
                            var m = !0;
                            const v = l.length;
                            for (let w = 0; w < v; w++) {
                              let b = l[w];
                              const g = e, y = e;
                              let E = !1;
                              const L = e;
                              if (typeof b != "string") {
                                const F = {
                                  instancePath: t + "/plugins/" + w,
                                  schemaPath: "#/properties/plugins/items/anyOf/0/type",
                                  keyword: "type",
                                  params: {
                                    type: "string"
                                  },
                                  message: "must be string"
                                };
                                s === null ? s = [
                                  F
                                ] : s.push(
                                  F
                                ), e++;
                              }
                              var W = L === e;
                              if (E = E || W, !E) {
                                const F = e;
                                Q(
                                  b,
                                  {
                                    instancePath: t + "/plugins/" + w,
                                    parentData: l,
                                    parentDataProperty: w,
                                    rootData: c
                                  }
                                ) || (s = s === null ? Q.errors : s.concat(
                                  Q.errors
                                ), e = s.length);
                                var W = F === e;
                                E = E || W;
                              }
                              if (E)
                                e = y, s !== null && (y ? s.length = y : s = null);
                              else {
                                const F = {
                                  instancePath: t + "/plugins/" + w,
                                  schemaPath: "#/properties/plugins/items/anyOf",
                                  keyword: "anyOf",
                                  params: {},
                                  message: "must match a schema in anyOf"
                                };
                                return s === null ? s = [
                                  F
                                ] : s.push(
                                  F
                                ), e++, H.errors = s, !1;
                              }
                              var m = g === e;
                              if (!m)
                                break;
                            }
                          } else
                            return H.errors = [
                              {
                                instancePath: t + "/plugins",
                                schemaPath: "#/properties/plugins/type",
                                keyword: "type",
                                params: {
                                  type: "array"
                                },
                                message: "must be array"
                              }
                            ], !1;
                        var d = j === e;
                      } else
                        var d = !0;
                      if (d) {
                        if (r.siteOptions !== void 0) {
                          let l = r.siteOptions;
                          const j = e;
                          if (e === j)
                            if (l && typeof l == "object" && !Array.isArray(
                              l
                            )) {
                              const v = e;
                              for (const w in l)
                                if (w !== "blogname") {
                                  const b = e;
                                  if (typeof l[w] != "string")
                                    return H.errors = [
                                      {
                                        instancePath: t + "/siteOptions/" + w.replace(
                                          /~/g,
                                          "~0"
                                        ).replace(
                                          /\//g,
                                          "~1"
                                        ),
                                        schemaPath: "#/properties/siteOptions/additionalProperties/type",
                                        keyword: "type",
                                        params: {
                                          type: "string"
                                        },
                                        message: "must be string"
                                      }
                                    ], !1;
                                  var M = b === e;
                                  if (!M)
                                    break;
                                }
                              if (v === e && l.blogname !== void 0 && typeof l.blogname != "string")
                                return H.errors = [
                                  {
                                    instancePath: t + "/siteOptions/blogname",
                                    schemaPath: "#/properties/siteOptions/properties/blogname/type",
                                    keyword: "type",
                                    params: {
                                      type: "string"
                                    },
                                    message: "must be string"
                                  }
                                ], !1;
                            } else
                              return H.errors = [
                                {
                                  instancePath: t + "/siteOptions",
                                  schemaPath: "#/properties/siteOptions/type",
                                  keyword: "type",
                                  params: {
                                    type: "object"
                                  },
                                  message: "must be object"
                                }
                              ], !1;
                          var d = j === e;
                        } else
                          var d = !0;
                        if (d) {
                          if (r.login !== void 0) {
                            let l = r.login;
                            const j = e, $ = e;
                            let v = !1;
                            const w = e;
                            if (typeof l != "boolean") {
                              const g = {
                                instancePath: t + "/login",
                                schemaPath: "#/properties/login/anyOf/0/type",
                                keyword: "type",
                                params: {
                                  type: "boolean"
                                },
                                message: "must be boolean"
                              };
                              s === null ? s = [
                                g
                              ] : s.push(
                                g
                              ), e++;
                            }
                            var Y = w === e;
                            if (v = v || Y, !v) {
                              const g = e;
                              if (e === g)
                                if (l && typeof l == "object" && !Array.isArray(
                                  l
                                )) {
                                  let E;
                                  if (l.username === void 0 && (E = "username") || l.password === void 0 && (E = "password")) {
                                    const L = {
                                      instancePath: t + "/login",
                                      schemaPath: "#/properties/login/anyOf/1/required",
                                      keyword: "required",
                                      params: {
                                        missingProperty: E
                                      },
                                      message: "must have required property '" + E + "'"
                                    };
                                    s === null ? s = [
                                      L
                                    ] : s.push(
                                      L
                                    ), e++;
                                  } else {
                                    const L = e;
                                    for (const x in l)
                                      if (!(x === "username" || x === "password")) {
                                        const F = {
                                          instancePath: t + "/login",
                                          schemaPath: "#/properties/login/anyOf/1/additionalProperties",
                                          keyword: "additionalProperties",
                                          params: {
                                            additionalProperty: x
                                          },
                                          message: "must NOT have additional properties"
                                        };
                                        s === null ? s = [
                                          F
                                        ] : s.push(
                                          F
                                        ), e++;
                                        break;
                                      }
                                    if (L === e) {
                                      if (l.username !== void 0) {
                                        const x = e;
                                        if (typeof l.username != "string") {
                                          const F = {
                                            instancePath: t + "/login/username",
                                            schemaPath: "#/properties/login/anyOf/1/properties/username/type",
                                            keyword: "type",
                                            params: {
                                              type: "string"
                                            },
                                            message: "must be string"
                                          };
                                          s === null ? s = [
                                            F
                                          ] : s.push(
                                            F
                                          ), e++;
                                        }
                                        var P = x === e;
                                      } else
                                        var P = !0;
                                      if (P)
                                        if (l.password !== void 0) {
                                          const x = e;
                                          if (typeof l.password != "string") {
                                            const U = {
                                              instancePath: t + "/login/password",
                                              schemaPath: "#/properties/login/anyOf/1/properties/password/type",
                                              keyword: "type",
                                              params: {
                                                type: "string"
                                              },
                                              message: "must be string"
                                            };
                                            s === null ? s = [
                                              U
                                            ] : s.push(
                                              U
                                            ), e++;
                                          }
                                          var P = x === e;
                                        } else
                                          var P = !0;
                                    }
                                  }
                                } else {
                                  const E = {
                                    instancePath: t + "/login",
                                    schemaPath: "#/properties/login/anyOf/1/type",
                                    keyword: "type",
                                    params: {
                                      type: "object"
                                    },
                                    message: "must be object"
                                  };
                                  s === null ? s = [
                                    E
                                  ] : s.push(
                                    E
                                  ), e++;
                                }
                              var Y = g === e;
                              v = v || Y;
                            }
                            if (v)
                              e = $, s !== null && ($ ? s.length = $ : s = null);
                            else {
                              const g = {
                                instancePath: t + "/login",
                                schemaPath: "#/properties/login/anyOf",
                                keyword: "anyOf",
                                params: {},
                                message: "must match a schema in anyOf"
                              };
                              return s === null ? s = [
                                g
                              ] : s.push(
                                g
                              ), e++, H.errors = s, !1;
                            }
                            var d = j === e;
                          } else
                            var d = !0;
                          if (d) {
                            if (r.steps !== void 0) {
                              let l = r.steps;
                              const j = e;
                              if (e === j)
                                if (Array.isArray(
                                  l
                                )) {
                                  var X = !0;
                                  const v = l.length;
                                  for (let w = 0; w < v; w++) {
                                    let b = l[w];
                                    const g = e, y = e;
                                    let E = !1;
                                    const L = e;
                                    o(
                                      b,
                                      {
                                        instancePath: t + "/steps/" + w,
                                        parentData: l,
                                        parentDataProperty: w,
                                        rootData: c
                                      }
                                    ) || (s = s === null ? o.errors : s.concat(
                                      o.errors
                                    ), e = s.length);
                                    var z = L === e;
                                    if (E = E || z, !E) {
                                      const F = e;
                                      if (typeof b != "string") {
                                        const C = {
                                          instancePath: t + "/steps/" + w,
                                          schemaPath: "#/properties/steps/items/anyOf/1/type",
                                          keyword: "type",
                                          params: {
                                            type: "string"
                                          },
                                          message: "must be string"
                                        };
                                        s === null ? s = [
                                          C
                                        ] : s.push(
                                          C
                                        ), e++;
                                      }
                                      var z = F === e;
                                      if (E = E || z, !E) {
                                        const C = e, I = {
                                          instancePath: t + "/steps/" + w,
                                          schemaPath: "#/properties/steps/items/anyOf/2/not",
                                          keyword: "not",
                                          params: {},
                                          message: "must NOT be valid"
                                        };
                                        s === null ? s = [
                                          I
                                        ] : s.push(
                                          I
                                        ), e++;
                                        var z = C === e;
                                        if (E = E || z, !E) {
                                          const A = e;
                                          if (typeof b != "boolean") {
                                            const B = {
                                              instancePath: t + "/steps/" + w,
                                              schemaPath: "#/properties/steps/items/anyOf/3/type",
                                              keyword: "type",
                                              params: {
                                                type: "boolean"
                                              },
                                              message: "must be boolean"
                                            };
                                            s === null ? s = [
                                              B
                                            ] : s.push(
                                              B
                                            ), e++;
                                          }
                                          if (b !== !1) {
                                            const B = {
                                              instancePath: t + "/steps/" + w,
                                              schemaPath: "#/properties/steps/items/anyOf/3/const",
                                              keyword: "const",
                                              params: {
                                                allowedValue: !1
                                              },
                                              message: "must be equal to constant"
                                            };
                                            s === null ? s = [
                                              B
                                            ] : s.push(
                                              B
                                            ), e++;
                                          }
                                          var z = A === e;
                                          if (E = E || z, !E) {
                                            const B = e;
                                            if (b !== null) {
                                              const ie = {
                                                instancePath: t + "/steps/" + w,
                                                schemaPath: "#/properties/steps/items/anyOf/4/type",
                                                keyword: "type",
                                                params: {
                                                  type: "null"
                                                },
                                                message: "must be null"
                                              };
                                              s === null ? s = [
                                                ie
                                              ] : s.push(
                                                ie
                                              ), e++;
                                            }
                                            var z = B === e;
                                            E = E || z;
                                          }
                                        }
                                      }
                                    }
                                    if (E)
                                      e = y, s !== null && (y ? s.length = y : s = null);
                                    else {
                                      const F = {
                                        instancePath: t + "/steps/" + w,
                                        schemaPath: "#/properties/steps/items/anyOf",
                                        keyword: "anyOf",
                                        params: {},
                                        message: "must match a schema in anyOf"
                                      };
                                      return s === null ? s = [
                                        F
                                      ] : s.push(
                                        F
                                      ), e++, H.errors = s, !1;
                                    }
                                    var X = g === e;
                                    if (!X)
                                      break;
                                  }
                                } else
                                  return H.errors = [
                                    {
                                      instancePath: t + "/steps",
                                      schemaPath: "#/properties/steps/type",
                                      keyword: "type",
                                      params: {
                                        type: "array"
                                      },
                                      message: "must be array"
                                    }
                                  ], !1;
                              var d = j === e;
                            } else
                              var d = !0;
                            if (d)
                              if (r.$schema !== void 0) {
                                const l = e;
                                if (typeof r.$schema != "string")
                                  return H.errors = [
                                    {
                                      instancePath: t + "/$schema",
                                      schemaPath: "#/properties/%24schema/type",
                                      keyword: "type",
                                      params: {
                                        type: "string"
                                      },
                                      message: "must be string"
                                    }
                                  ], !1;
                                var d = l === e;
                              } else
                                var d = !0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else
      return H.errors = [
        {
          instancePath: t,
          schemaPath: "#/type",
          keyword: "type",
          params: { type: "object" },
          message: "must be object"
        }
      ], !1;
  return H.errors = s, e === 0;
}
function Ke(r, { instancePath: t = "", parentData: p, parentDataProperty: u, rootData: c = r } = {}) {
  let s = null, e = 0;
  return H(r, {
    instancePath: t,
    parentData: p,
    parentDataProperty: u,
    rootData: c
  }) || (s = s === null ? H.errors : s.concat(H.errors), e = s.length), Ke.errors = s, e === 0;
}
const { wpCLI: Zt, ...ur } = Et, Yt = {
  ...ur,
  "wp-cli": Zt,
  importFile: ur.importWxr
};
async function ms(r, t = {}) {
  const p = {
    ...t
  };
  let u;
  return Lr(r) ? (u = await Gt(r), p.streamBundledFile = function(...c) {
    return r.read(...c);
  }) : u = r, Qt(u, p);
}
function Lr(r) {
  return r && "read" in r && typeof r.read == "function";
}
async function Gt(r) {
  if (!Lr(r))
    return r;
  const p = await (await r.read("blueprint.json")).text();
  return JSON.parse(p);
}
function Qt(r, {
  progress: t = new zr(),
  semaphore: p = new hr({ concurrency: 3 }),
  onStepCompleted: u = () => {
  },
  corsProxy: c,
  streamBundledFile: s
} = {}) {
  var k, R, m, W, M, Y, P, X, z, ee;
  r = structuredClone(r), r = {
    ...r,
    steps: (r.steps || []).filter(Kt).filter(es)
  };
  for (const l of r.steps)
    !l || typeof l != "object" || (l.step === "importFile" ? (l.step = "importWxr", ae.warn(
      'The "importFile" step is deprecated. Use "importWxr" instead.'
    )) : (l == null ? void 0 : l.step) === "installPlugin" && "pluginZipFile" in l ? (l.pluginData = l.pluginZipFile, ae.warn(
      'The "pluginZipFile" option of the "installPlugin" step is deprecated. Use "pluginData" instead.'
    )) : (l == null ? void 0 : l.step) === "installTheme" && "themeZipFile" in l && (l.themeData = l.themeZipFile, ae.warn(
      'The "themeZipFile" option of the "installTheme" step is deprecated. Use "themeData" instead.'
    )));
  if (r.constants && r.steps.unshift({
    step: "defineWpConfigConsts",
    consts: r.constants
  }), r.siteOptions && r.steps.unshift({
    step: "setSiteOptions",
    options: r.siteOptions
  }), r.plugins) {
    const l = r.plugins.map((j) => typeof j == "string" ? j.startsWith("https://") ? {
      resource: "url",
      url: j
    } : {
      resource: "wordpress.org/plugins",
      slug: j
    } : j).map((j) => ({
      step: "installPlugin",
      pluginData: j
    }));
    r.steps.unshift(...l);
  }
  r.login && r.steps.push({
    step: "login",
    ...r.login === !0 ? { username: "admin" } : r.login
  });
  const e = ((k = r.steps) == null ? void 0 : k.findIndex(
    (l) => typeof l == "object" && (l == null ? void 0 : l.step) && ["wp-cli", "enableMultisite"].includes(l.step)
  )) ?? -1;
  if ((R = r == null ? void 0 : r.extraLibraries) != null && R.includes("wp-cli") || e !== -1) {
    const l = {
      step: "writeFile",
      data: ot,
      path: ar
    };
    e === -1 ? (m = r.steps) == null || m.push(l) : (W = r.steps) == null || W.splice(
      e,
      0,
      l
    );
  }
  const d = (M = r.steps) == null ? void 0 : M.findIndex(
    (l) => typeof l == "object" && (l == null ? void 0 : l.step) === "importWxr"
  );
  d !== void 0 && d > -1 && ((Y = r.steps) == null || Y.splice(d, 0, {
    step: "installPlugin",
    pluginData: {
      resource: "url",
      url: "https://playground.wordpress.net/wordpress-importer.zip",
      caption: "Downloading the WordPress Importer plugin"
    }
  }));
  const { valid: h, errors: D } = Jt(r);
  if (!h) {
    const l = new Error(
      `Invalid blueprint: ${D[0].message} at ${D[0].instancePath}`
    );
    throw l.errors = D, l;
  }
  const S = r.steps || [], T = S.reduce(
    (l, j) => {
      var $;
      return l + ((($ = j.progress) == null ? void 0 : $.weight) || 1);
    },
    0
  ), _ = S.map(
    (l) => rs(l, {
      semaphore: p,
      rootProgressTracker: t,
      totalProgressWeight: T,
      corsProxy: c,
      streamBundledFile: s
    })
  );
  return {
    versions: {
      php: Xt(
        (P = r.preferredVersions) == null ? void 0 : P.php,
        Ir,
        Cr
      ),
      wp: ((X = r.preferredVersions) == null ? void 0 : X.wp) || "latest"
    },
    features: {
      // Disable intl by default to reduce the transfer size
      intl: ((z = r.features) == null ? void 0 : z.intl) ?? !1,
      // Enable network access by default
      networking: ((ee = r.features) == null ? void 0 : ee.networking) ?? !0
    },
    extraLibraries: r.extraLibraries || [],
    run: async (l) => {
      try {
        for (const { resources: j } of _)
          for (const $ of j)
            $.setPlayground(l), $.isAsync && $.resolve().catch(() => {
            });
        for (const [j, { run: $, step: v }] of Object.entries(_))
          try {
            const w = await $(l);
            u(w, v);
          } catch (w) {
            throw new Error(
              `Error when executing the blueprint step #${j} (${JSON.stringify(
                v
              )}) ${w instanceof Error ? `: ${w.message}` : w}`,
              { cause: w }
            );
          }
      } finally {
        try {
          await l.goTo(
            r.landingPage || "/"
          );
        } catch {
        }
        t.finish();
      }
    }
  };
}
function Jt(r) {
  var c;
  const t = Ke(r);
  if (t)
    return { valid: t };
  const p = /* @__PURE__ */ new Set();
  for (const s of Ke.errors)
    s.schemaPath.startsWith("#/properties/steps/items/anyOf") || p.add(s.instancePath);
  const u = (c = Ke.errors) == null ? void 0 : c.filter(
    (s) => !(s.schemaPath.startsWith("#/properties/steps/items/anyOf") && p.has(s.instancePath))
  );
  return {
    valid: t,
    errors: u
  };
}
function Xt(r, t, p) {
  return r && t.includes(r) ? r : p;
}
function Kt(r) {
  return !!(typeof r == "object" && r);
}
function es(r) {
  return ["setPhpIniEntry", "request"].includes(r.step) ? (ae.warn(
    `The "${r.step}" Blueprint is no longer supported and you can remove it from your Blueprint.`
  ), !1) : !0;
}
function rs(r, {
  semaphore: t,
  rootProgressTracker: p,
  totalProgressWeight: u,
  corsProxy: c,
  streamBundledFile: s
}) {
  var _;
  const e = p.stage(
    (((_ = r.progress) == null ? void 0 : _.weight) || 1) / u
  ), d = {};
  for (const k of Object.keys(r)) {
    let R = r[k];
    $t(R) && (R = Oe.create(R, {
      semaphore: t,
      corsProxy: c,
      streamBundledFile: s
    })), d[k] = R;
  }
  const h = async (k) => {
    var R;
    try {
      return e.fillSlowly(), await Yt[r.step](
        k,
        await ts(d),
        {
          tracker: e,
          initialCaption: (R = r.progress) == null ? void 0 : R.caption
        }
      );
    } finally {
      e.finish();
    }
  }, D = cr(d), S = cr(d).filter(
    (k) => k.isAsync
  ), T = 1 / (S.length + 1);
  for (const k of S)
    k.progress = e.stage(T);
  return { run: h, step: r, resources: D };
}
function cr(r) {
  const t = [];
  for (const p in r) {
    const u = r[p];
    u instanceof Oe && t.push(u);
  }
  return t;
}
async function ts(r) {
  const t = {};
  for (const p in r) {
    const u = r[p];
    u instanceof Oe ? t[p] = await u.resolve() : t[p] = u;
  }
  return t;
}
async function ys(r, t) {
  await r.run(t);
}
async function hs(r) {
  const t = await fetch(r, {
    credentials: "omit"
  });
  if (!t.ok)
    throw new Error(`Failed to fetch blueprint from ${r}`);
  const p = await t.arrayBuffer();
  try {
    const u = new TextDecoder().decode(p);
    return JSON.parse(u), new Zr([
      new Yr({
        "blueprint.json": u
      }),
      new Gr({
        baseUrl: r
      })
    ]);
  } catch {
    if (await ss(p))
      return Qr.fromArrayBuffer(p);
    throw new Error(
      `Blueprint file at ${r} is neither a valid JSON nor a ZIP file.`
    );
  }
}
async function ss(r) {
  if (r.byteLength < 4)
    return !1;
  const t = new Uint8Array(r, 0, 4);
  return t[0] === 80 && t[1] === 75 && t[2] === 3 && t[3] === 4;
}
function gs() {
}
export {
  wr as activatePlugin,
  vr as activateTheme,
  ms as compileBlueprint,
  pt as cp,
  Tr as defineSiteUrl,
  or as defineWpConfigConsts,
  nt as enableMultisite,
  ht as exportWXR,
  Gt as getBlueprintDeclaration,
  jr as importThemeStarterContent,
  yt as importWordPressFiles,
  ct as importWxr,
  gt as installPlugin,
  bt as installTheme,
  Lr as isBlueprintBundle,
  wt as login,
  ft as mkdir,
  lt as mv,
  tt as request,
  vt as resetData,
  hs as resolveRemoteBlueprint,
  Pr as rm,
  dt as rmdir,
  ys as runBlueprintSteps,
  Kr as runPHP,
  et as runPHPWithOptions,
  rt as runSql,
  Pt as runWpInstallationWizard,
  gs as setPluginProxyURL,
  jt as setSiteLanguage,
  _r as setSiteOptions,
  pr as unzip,
  it as updateUserMeta,
  Or as wpCLI,
  br as wpContentFilesExcludedFromExport,
  nr as writeFile,
  ut as writeFiles,
  _t as zipWpContent
};
//# sourceMappingURL=index.js.map
