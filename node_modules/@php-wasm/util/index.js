const a = Symbol("SleepFinished");
function d(e) {
  return new Promise((t) => {
    setTimeout(() => t(a), e);
  });
}
class g extends Error {
  constructor() {
    super("Acquiring lock timed out");
  }
}
class D {
  constructor({ concurrency: t, timeout: i }) {
    this._running = 0, this.concurrency = t, this.timeout = i, this.queue = [];
  }
  get remaining() {
    return this.concurrency - this.running;
  }
  get running() {
    return this._running;
  }
  async acquire() {
    for (; ; )
      if (this._running >= this.concurrency) {
        const t = new Promise((i) => {
          this.queue.push(i);
        });
        this.timeout !== void 0 ? await Promise.race([t, d(this.timeout)]).then(
          (i) => {
            if (i === a)
              throw new g();
          }
        ) : await t;
      } else {
        this._running++;
        let t = !1;
        return () => {
          t || (t = !0, this._running--, this.queue.length > 0 && this.queue.shift()());
        };
      }
  }
  async run(t) {
    const i = await this.acquire();
    try {
      return await t();
    } finally {
      i();
    }
  }
}
class _ extends Error {
  constructor(t, i) {
    super(t), this.userFriendlyMessage = i ?? t;
  }
}
function T(...e) {
  function t(u) {
    return u.substring(u.length - 1) === "/";
  }
  let i = e.join("/");
  const n = i[0] === "/", r = t(i);
  return i = l(i), !i && !n && (i = "."), i && r && !t(i) && (i += "/"), i;
}
function U(e) {
  if (e === "/")
    return "/";
  e = l(e);
  const t = e.lastIndexOf("/");
  return t === -1 ? "" : t === 0 ? "/" : e.substr(0, t);
}
function A(e) {
  if (e === "/")
    return "/";
  e = l(e);
  const t = e.lastIndexOf("/");
  return t === -1 ? e : e.substr(t + 1);
}
function l(e) {
  const t = e[0] === "/";
  return e = y(
    e.split("/").filter((i) => !!i),
    !t
  ).join("/"), (t ? "/" : "") + e.replace(/\/$/, "");
}
function y(e, t) {
  let i = 0;
  for (let n = e.length - 1; n >= 0; n--) {
    const r = e[n];
    r === "." ? e.splice(n, 1) : r === ".." ? (e.splice(n, 1), i++) : i && (e.splice(n, 1), i--);
  }
  if (t)
    for (; i; i--)
      e.unshift("..");
  return e;
}
function M(e, t) {
  return e === "/" ? !0 : (e = l(e), t = l(t), t.startsWith(e + "/") || t === e);
}
function m(e) {
  let n = 0, r = "";
  const u = [];
  let s = "";
  for (let o = 0; o < e.length; o++) {
    const c = e[o];
    c === "\\" ? ((e[o + 1] === '"' || e[o + 1] === "'") && o++, s += e[o]) : n === 0 ? c === '"' || c === "'" ? (n = 1, r = c) : c.match(/\s/) ? (s.trim().length && u.push(s.trim()), s = c) : u.length && !s ? s = u.pop() + c : s += c : n === 1 && (c === r ? (n = 0, r = "") : s += c);
  }
  return s && u.push(s.trim()), u;
}
function q(e) {
  return function(t, i = [], n = {}) {
    const r = new b(), u = new E(r);
    return setTimeout(async () => {
      let s = [];
      if (i.length)
        s = [t, ...i];
      else if (typeof t == "string")
        s = m(t);
      else if (Array.isArray(t))
        s = t;
      else
        throw new Error("Invalid command ", t);
      try {
        await e(s, u, n);
      } catch (o) {
        r.emit("error", o), typeof o == "object" && o !== null && "message" in o && typeof o.message == "string" && u.stderr(o.message), u.exit(1);
      }
      r.emit("spawn", !0);
    }), r;
  };
}
class f {
  constructor() {
    this.listeners = {};
  }
  emit(t, i) {
    this.listeners[t] && this.listeners[t].forEach(function(n) {
      n(i);
    });
  }
  on(t, i) {
    this.listeners[t] || (this.listeners[t] = []), this.listeners[t].push(i);
  }
}
class E extends f {
  constructor(t) {
    super(), this.exited = !1, this.stdinData = [], this.childProcess = t, t.on("stdin", (i) => {
      this.stdinData ? this.stdinData.push(i.slice()) : this.emit("stdin", i);
    });
  }
  stdout(t) {
    typeof t == "string" && (t = new TextEncoder().encode(t)), this.childProcess.stdout.emit("data", t);
  }
  stdoutEnd() {
    this.childProcess.stdout.emit("end", {});
  }
  stderr(t) {
    typeof t == "string" && (t = new TextEncoder().encode(t)), this.childProcess.stderr.emit("data", t);
  }
  stderrEnd() {
    this.childProcess.stderr.emit("end", {});
  }
  notifySpawn() {
    this.childProcess.emit("spawn", !0);
  }
  exit(t) {
    this.exited || (this.exited = !0, this.childProcess.emit("exit", t));
  }
  flushStdin() {
    if (this.stdinData)
      for (let t = 0; t < this.stdinData.length; t++)
        this.emit("stdin", this.stdinData[t]);
    this.stdinData = null;
  }
}
let p = 9743;
class b extends f {
  constructor(t = p++) {
    super(), this.stdout = new f(), this.stderr = new f();
    const i = this;
    this.pid = t, this.stdin = {
      write: (n) => {
        i.emit("stdin", n);
      }
    };
  }
}
function w(e = 36, t = "!@#$%^&*()_+=-[]/.,<>?") {
  const i = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" + t;
  let n = "";
  for (let r = e; r > 0; --r)
    n += i[Math.floor(Math.random() * i.length)];
  return n;
}
function N() {
  return w(36, "-_");
}
function S(e) {
  return `json_decode(base64_decode('${P(
    JSON.stringify(e)
  )}'), true)`;
}
function k(e) {
  const t = {};
  for (const i in e)
    t[i] = S(e[i]);
  return t;
}
function P(e) {
  return x(new TextEncoder().encode(e));
}
function x(e) {
  const t = String.fromCodePoint(...e);
  return btoa(t);
}
function I(e, ...t) {
  let i = "", n = 0;
  for (let r = 0; r < e.length; r++)
    if (e[r] === "%" && r + 1 < e.length) {
      r++;
      const u = e[r];
      switch (u) {
        case "s": {
          const s = t[n++];
          let o;
          if (typeof s == "object")
            try {
              o = JSON.stringify(
                s,
                // Represent bigint values as strings in JSON.stringify().
                (c, h) => typeof h == "bigint" ? `0x${h.toString(16)}` : h,
                2
              );
            } catch {
            }
          else
            o = String(s);
          i += o;
          break;
        }
        case "d": {
          const s = t[n++];
          typeof s == "bigint" ? i += s.toString() : i += Math.floor(Number(s));
          break;
        }
        case "f": {
          const s = t[n++];
          i += Number(s);
          break;
        }
        case "x": {
          const s = t[n++];
          typeof s == "bigint" ? i += s.toString(16) : i += Math.floor(Number(s)).toString(16);
          break;
        }
        case "%": {
          i += "%";
          break;
        }
        default:
          i += "%" + u;
      }
    } else
      i += e[r];
  return i;
}
function O(e) {
  let t = 0;
  e.forEach((r) => t += r.length);
  const i = new Uint8Array(t);
  let n = 0;
  return e.forEach((r) => {
    i.set(r, n), n += r.length;
  }), i;
}
function Q(e) {
  return O(e.map((t) => new Uint8Array(t))).buffer;
}
export {
  g as AcquireTimeoutError,
  _ as PhpWasmError,
  D as Semaphore,
  A as basename,
  Q as concatArrayBuffers,
  O as concatUint8Arrays,
  q as createSpawnHandler,
  U as dirname,
  M as isParentOf,
  T as joinPaths,
  l as normalizePath,
  S as phpVar,
  k as phpVars,
  N as randomFilename,
  w as randomString,
  I as sprintf
};
//# sourceMappingURL=index.js.map
