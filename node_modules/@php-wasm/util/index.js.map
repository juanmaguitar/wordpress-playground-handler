{"version":3,"file":"index.js","sources":["../../../../packages/php-wasm/util/src/lib/sleep.ts","../../../../packages/php-wasm/util/src/lib/semaphore.ts","../../../../packages/php-wasm/util/src/lib/php-wasm-error.ts","../../../../packages/php-wasm/util/src/lib/paths.ts","../../../../packages/php-wasm/util/src/lib/split-shell-command.ts","../../../../packages/php-wasm/util/src/lib/create-spawn-handler.ts","../../../../packages/php-wasm/util/src/lib/random-string.ts","../../../../packages/php-wasm/util/src/lib/random-filename.ts","../../../../packages/php-wasm/util/src/lib/php-vars.ts","../../../../packages/php-wasm/util/src/lib/sprintf.ts","../../../../packages/php-wasm/util/src/lib/index.ts"],"sourcesContent":["export const SleepFinished = Symbol('SleepFinished');\n\nexport function sleep(ms: number): Promise<typeof SleepFinished> {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(() => resolve(SleepFinished), ms);\n\t});\n}\n","import { SleepFinished, sleep } from './sleep';\n\nexport interface SemaphoreOptions {\n\t/**\n\t * The maximum number of concurrent locks.\n\t */\n\tconcurrency: number;\n\t/**\n\t * The maximum time to wait for a lock to become available.\n\t */\n\ttimeout?: number;\n}\n\nexport class AcquireTimeoutError extends Error {\n\tconstructor() {\n\t\tsuper('Acquiring lock timed out');\n\t}\n}\n\nexport default class Semaphore {\n\tprivate _running = 0;\n\tprivate concurrency: number;\n\tprivate timeout?: number;\n\tprivate queue: (() => void)[];\n\n\tconstructor({ concurrency, timeout }: SemaphoreOptions) {\n\t\tthis.concurrency = concurrency;\n\t\tthis.timeout = timeout;\n\t\tthis.queue = [];\n\t}\n\n\tget remaining(): number {\n\t\treturn this.concurrency - this.running;\n\t}\n\n\tget running(): number {\n\t\treturn this._running;\n\t}\n\n\tasync acquire(): Promise<() => void> {\n\t\twhile (true) {\n\t\t\tif (this._running >= this.concurrency) {\n\t\t\t\t// Concurrency exhausted â€“ wait until a lock is released:\n\t\t\t\tconst acquired = new Promise<void>((resolve) => {\n\t\t\t\t\tthis.queue.push(resolve);\n\t\t\t\t});\n\t\t\t\tif (this.timeout !== undefined) {\n\t\t\t\t\tawait Promise.race([acquired, sleep(this.timeout)]).then(\n\t\t\t\t\t\t(value) => {\n\t\t\t\t\t\t\tif (value === SleepFinished) {\n\t\t\t\t\t\t\t\tthrow new AcquireTimeoutError();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tawait acquired;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Acquire the lock:\n\t\t\t\tthis._running++;\n\t\t\t\tlet released = false;\n\t\t\t\treturn () => {\n\t\t\t\t\tif (released) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treleased = true;\n\t\t\t\t\tthis._running--;\n\t\t\t\t\t// Release the lock:\n\t\t\t\t\tif (this.queue.length > 0) {\n\t\t\t\t\t\tthis.queue.shift()!();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tasync run<T>(fn: () => T | Promise<T>): Promise<T> {\n\t\tconst release = await this.acquire();\n\t\ttry {\n\t\t\treturn await fn();\n\t\t} finally {\n\t\t\trelease();\n\t\t}\n\t}\n}\n","export class PhpWasmError extends Error {\n\tuserFriendlyMessage?: string;\n\tconstructor(message: string, userFriendlyMessage?: string) {\n\t\tsuper(message);\n\t\tthis.userFriendlyMessage = userFriendlyMessage ?? message;\n\t}\n}\n","/**\n * The functions in this module are mostly copied from the generated\n * Emscripten PHP module. This enables features like filesystem journaling,\n * which use some low-level Emscripten APIs and need access to the\n * same path helpers.\n */\n\n/**\n * Joins paths together.\n *\n * For example:\n *\n * > joinPaths('wordpress', 'wp-content')\n * 'wordpress/wp-content'\n *\n * Use this for all PHP paths and **do not** use path.join().\n * This is important because Emscripten paths are **always**\n * POSIX-style paths. Imagine joining paths on Windows:\n *\n * > path.join('wordpress', 'wp-content')\n * '\\\\wordpress\\\\wp-content'  // invalid in PHP.wasm\n *\n * See the path.join issue for more details:\n *\n * https://github.com/WordPress/playground-tools/issues/11#issuecomment-1579074763\n *\n * @param paths Paths segments to join\n * @returns A joined path\n */\nexport function joinPaths(...paths: string[]) {\n\tfunction hasTrailingSlash(p: string) {\n\t\treturn p.substring(p.length - 1) === '/';\n\t}\n\n\tlet path = paths.join('/');\n\tconst isAbsolute = path[0] === '/';\n\tconst trailingSlash = hasTrailingSlash(path);\n\tpath = normalizePath(path);\n\tif (!path && !isAbsolute) {\n\t\tpath = '.';\n\t}\n\tif (path && trailingSlash && !hasTrailingSlash(path)) {\n\t\tpath += '/';\n\t}\n\treturn path;\n}\n\n/**\n * Returns the directory name of a path.\n *\n * @param path\n * @returns\n */\nexport function dirname(path: string) {\n\tif (path === '/') {\n\t\treturn '/';\n\t}\n\n\tpath = normalizePath(path);\n\n\tconst lastSlash = path.lastIndexOf('/');\n\tif (lastSlash === -1) {\n\t\treturn '';\n\t} else if (lastSlash === 0) {\n\t\treturn '/';\n\t}\n\treturn path.substr(0, lastSlash);\n}\n\n/**\n * Returns the last portion of a path.\n *\n * @param path - The path to extract the basename from.\n * @returns The basename of the path.\n */\nexport function basename(path: string) {\n\tif (path === '/') {\n\t\treturn '/';\n\t}\n\n\tpath = normalizePath(path);\n\n\tconst lastSlash = path.lastIndexOf('/');\n\tif (lastSlash === -1) {\n\t\treturn path;\n\t}\n\treturn path.substr(lastSlash + 1);\n}\n\n/**\n * Normalizes a path.\n *\n * For example:\n *\n * > normalizePath('wordpress/wp-content/../')\n * 'wordpress'\n *\n * @param path\n * @returns\n */\nexport function normalizePath(path: string) {\n\tconst isAbsolute = path[0] === '/';\n\tpath = normalizePathsArray(\n\t\tpath.split('/').filter((p: any) => !!p),\n\t\t!isAbsolute\n\t).join('/');\n\treturn (isAbsolute ? '/' : '') + path.replace(/\\/$/, '');\n}\n\n/**\n * Normalizes paths.\n *\n * For example:\n *\n * > normalizePathsArray(['wordpress', 'wp-content', '..', '', '.',\n * 'wp-includes']) ['wordpress', 'wp-includes']\n *\n * @param parts parts of the path to normalize\n * @param allowAboveRoot allow paths above the root\n * @returns normalized paths\n */\nexport function normalizePathsArray(parts: string[], allowAboveRoot: boolean) {\n\tlet up = 0;\n\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\tconst last = parts[i];\n\t\tif (last === '.') {\n\t\t\tparts.splice(i, 1);\n\t\t} else if (last === '..') {\n\t\t\tparts.splice(i, 1);\n\t\t\tup++;\n\t\t} else if (up) {\n\t\t\tparts.splice(i, 1);\n\t\t\tup--;\n\t\t}\n\t}\n\tif (allowAboveRoot) {\n\t\tfor (; up; up--) {\n\t\t\tparts.unshift('..');\n\t\t}\n\t}\n\treturn parts;\n}\n\n/**\n * Checks if the given parent path is an ancestor of the given child path.\n *\n * @param parent The parent path to check.\n * @param child The child path to verify against the parent.\n * @returns Whether the `parent` path is an ancestor of the `child` path.\n */\nexport function isParentOf(parent: string, child: string) {\n\tif (parent === '/') {\n\t\treturn true;\n\t}\n\tparent = normalizePath(parent);\n\tchild = normalizePath(child);\n\treturn child.startsWith(parent + '/') || child === parent;\n}\n","/**\n * Naive shell command parser.\n * Ensures that commands like `wp option set blogname \"My blog name\"` are split\n * into `['wp', 'option', 'set', 'blogname', 'My blog name']` instead of\n * `['wp', 'option', 'set', 'blogname', 'My', 'blog', 'name']`.\n *\n * @param command\n * @returns\n */\nexport function splitShellCommand(command: string) {\n\tconst MODE_UNQUOTED = 0;\n\tconst MODE_IN_QUOTE = 1;\n\n\tlet mode = MODE_UNQUOTED;\n\tlet quote = '';\n\n\tconst parts: string[] = [];\n\tlet currentPart = '';\n\tfor (let i = 0; i < command.length; i++) {\n\t\tconst char = command[i];\n\t\tif (char === '\\\\') {\n\t\t\t// Escaped quotes are treated as normal characters\n\t\t\t// This is a very naive approach to escaping, but it's good enough for\n\t\t\t// now. @TODO: Iterate on this later, perhaps using bun shell. @see https://github.com/WordPress/wordpress-playground/issues/1062\n\t\t\tif (command[i + 1] === '\"' || command[i + 1] === \"'\") {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcurrentPart += command[i];\n\t\t} else if (mode === MODE_UNQUOTED) {\n\t\t\tif (char === '\"' || char === \"'\") {\n\t\t\t\tmode = MODE_IN_QUOTE;\n\t\t\t\tquote = char;\n\t\t\t} else if (char.match(/\\s/)) {\n\t\t\t\tif (currentPart.trim().length) {\n\t\t\t\t\tparts.push(currentPart.trim());\n\t\t\t\t}\n\t\t\t\tcurrentPart = char;\n\t\t\t} else if (parts.length && !currentPart) {\n\t\t\t\t// We just closed a quote to continue the same\n\t\t\t\t// argument with different escaping style, e.g.:\n\t\t\t\t// php -r 'require '\\''vendor/autoload.php'\\''\n\t\t\t\tcurrentPart = parts.pop()! + char;\n\t\t\t} else {\n\t\t\t\tcurrentPart += char;\n\t\t\t}\n\t\t} else if (mode === MODE_IN_QUOTE) {\n\t\t\tif (char === quote) {\n\t\t\t\tmode = MODE_UNQUOTED;\n\t\t\t\tquote = '';\n\t\t\t} else {\n\t\t\t\tcurrentPart += char;\n\t\t\t}\n\t\t}\n\t}\n\tif (currentPart) {\n\t\tparts.push(currentPart.trim());\n\t}\n\treturn parts;\n}\n","import { splitShellCommand } from './split-shell-command';\n\ntype Listener = (...args: any[]) => any;\n\nexport interface ProcessOptions {\n\tcwd?: string;\n\tenv?: Record<string, string>;\n}\n\n/**\n * Usage:\n * ```ts\n * php.setSpawnHandler(\n *   createSpawnHandler(function (command, processApi) {\n *     console.log(processApi.flushStdin());\n *     processApi.stdout('/\\n/tmp\\n/home');\n *\t   processApi.exit(0);\n *   })\n * );\n * ```\n * @param program\n * @returns\n */\nexport function createSpawnHandler(\n\tprogram: (\n\t\tcommand: string[],\n\t\tprocessApi: ProcessApi,\n\t\toptions: ProcessOptions\n\t) => void | Promise<void>\n): any {\n\treturn function (\n\t\tcommand: string | string[],\n\t\targsArray: string[] = [],\n\t\toptions: ProcessOptions = {}\n\t) {\n\t\tconst childProcess = new ChildProcess();\n\t\tconst processApi = new ProcessApi(childProcess);\n\t\t// Give PHP a chance to register listeners\n\t\tsetTimeout(async () => {\n\t\t\tlet commandArray = [];\n\t\t\tif (argsArray.length) {\n\t\t\t\tcommandArray = [command as string, ...argsArray];\n\t\t\t} else if (typeof command === 'string') {\n\t\t\t\tcommandArray = splitShellCommand(command);\n\t\t\t} else if (Array.isArray(command)) {\n\t\t\t\tcommandArray = command;\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid command ', command);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tawait program(commandArray, processApi, options);\n\t\t\t} catch (e) {\n\t\t\t\tchildProcess.emit('error', e);\n\t\t\t\tif (\n\t\t\t\t\ttypeof e === 'object' &&\n\t\t\t\t\te !== null &&\n\t\t\t\t\t'message' in e &&\n\t\t\t\t\ttypeof e.message === 'string'\n\t\t\t\t) {\n\t\t\t\t\tprocessApi.stderr(e.message);\n\t\t\t\t}\n\t\t\t\tprocessApi.exit(1);\n\t\t\t}\n\t\t\tchildProcess.emit('spawn', true);\n\t\t});\n\t\treturn childProcess;\n\t};\n}\n\nclass EventEmitter {\n\tlisteners: Record<string, Listener[]> = {};\n\temit(eventName: string, data: any) {\n\t\tif (this.listeners[eventName]) {\n\t\t\tthis.listeners[eventName].forEach(function (listener) {\n\t\t\t\tlistener(data);\n\t\t\t});\n\t\t}\n\t}\n\ton(eventName: string, listener: Listener) {\n\t\tif (!this.listeners[eventName]) {\n\t\t\tthis.listeners[eventName] = [];\n\t\t}\n\t\tthis.listeners[eventName].push(listener);\n\t}\n}\n\nexport class ProcessApi extends EventEmitter {\n\tprivate exited = false;\n\tprivate stdinData: Uint8Array[] | null = [];\n\tprivate childProcess: ChildProcess;\n\tconstructor(childProcess: ChildProcess) {\n\t\tsuper();\n\t\tthis.childProcess = childProcess;\n\t\tchildProcess.on('stdin', (data: Uint8Array) => {\n\t\t\tif (this.stdinData) {\n\t\t\t\t// Need to clone the data buffer as it's reused by PHP\n\t\t\t\t// and the next data chunk will overwrite the previous one.\n\t\t\t\tthis.stdinData.push(data.slice());\n\t\t\t} else {\n\t\t\t\tthis.emit('stdin', data);\n\t\t\t}\n\t\t});\n\t}\n\tstdout(data: string | ArrayBuffer) {\n\t\tif (typeof data === 'string') {\n\t\t\tdata = new TextEncoder().encode(data);\n\t\t}\n\t\tthis.childProcess.stdout.emit('data', data);\n\t}\n\tstdoutEnd() {\n\t\tthis.childProcess.stdout.emit('end', {});\n\t}\n\tstderr(data: string | ArrayBuffer) {\n\t\tif (typeof data === 'string') {\n\t\t\tdata = new TextEncoder().encode(data);\n\t\t}\n\t\tthis.childProcess.stderr.emit('data', data);\n\t}\n\tstderrEnd() {\n\t\tthis.childProcess.stderr.emit('end', {});\n\t}\n\tnotifySpawn() {\n\t\tthis.childProcess.emit('spawn', true);\n\t}\n\texit(code: number) {\n\t\tif (!this.exited) {\n\t\t\tthis.exited = true;\n\t\t\tthis.childProcess.emit('exit', code);\n\t\t}\n\t}\n\tflushStdin() {\n\t\tif (this.stdinData) {\n\t\t\tfor (let i = 0; i < this.stdinData.length; i++) {\n\t\t\t\tthis.emit('stdin', this.stdinData[i]);\n\t\t\t}\n\t\t}\n\t\tthis.stdinData = null;\n\t}\n}\n\nexport type StdIn = {\n\twrite: (data: string) => void;\n};\n\nlet lastPid = 9743;\nexport class ChildProcess extends EventEmitter {\n\tstdout: EventEmitter = new EventEmitter();\n\tstderr: EventEmitter = new EventEmitter();\n\tstdin: StdIn;\n\tpid: number;\n\tconstructor(pid = lastPid++) {\n\t\tsuper();\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst self = this;\n\t\tthis.pid = pid;\n\t\tthis.stdin = {\n\t\t\twrite: (data: string) => {\n\t\t\t\tself.emit('stdin', data);\n\t\t\t},\n\t\t};\n\t}\n}\n","export function randomString(\n\tlength = 36,\n\tspecialChars = '!@#$%^&*()_+=-[]/.,<>?'\n) {\n\tconst chars =\n\t\t'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n\t\tspecialChars;\n\tlet result = '';\n\tfor (let i = length; i > 0; --i)\n\t\tresult += chars[Math.floor(Math.random() * chars.length)];\n\treturn result;\n}\n","import { randomString } from './random-string';\n\nexport function randomFilename() {\n\treturn randomString(36, '-_');\n}\n","export function phpVar(value: unknown): string {\n\treturn `json_decode(base64_decode('${stringToBase64(\n\t\tJSON.stringify(value)\n\t)}'), true)`;\n}\n\nexport function phpVars<T extends Record<string, unknown>>(\n\tvars: T\n): Record<keyof T, string> {\n\tconst result: Record<string, string> = {};\n\tfor (const key in vars) {\n\t\tresult[key] = phpVar(vars[key]);\n\t}\n\treturn result as Record<keyof T, string>;\n}\n\nfunction stringToBase64(str: string) {\n\treturn bytesToBase64(new TextEncoder().encode(str));\n}\n\nfunction bytesToBase64(bytes: Uint8Array) {\n\tconst binString = String.fromCodePoint(...bytes);\n\treturn btoa(binString);\n}\n","/**\n * Formats a string like sprintf().\n *\n * This function:\n * - Supports basic format specifiers: %s, %d, %f, %x, %%\n * - Supports bigint values\n *\n * The purpose of this function is for use in optional php-wasm tracing.\n * If we use printf-style formatting for trace messages, we let the trace\n * function decide whether to format and do not have to pay for formatting\n * unless tracing is enabled.\n */\nexport function sprintf(format: string, ...args: any[]): string {\n\tlet result = '';\n\tlet argIndex = 0;\n\n\tfor (let i = 0; i < format.length; i++) {\n\t\tif (format[i] === '%' && i + 1 < format.length) {\n\t\t\ti++;\n\t\t\tconst specifier = format[i];\n\n\t\t\tswitch (specifier) {\n\t\t\t\tcase 's': {\n\t\t\t\t\tconst arg = args[argIndex++];\n\t\t\t\t\tlet str;\n\t\t\t\t\tif (typeof arg === 'object') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// If an object doesn't provide its own toString(),\n\t\t\t\t\t\t\t// try to represent it as JSON.\n\t\t\t\t\t\t\tstr = JSON.stringify(\n\t\t\t\t\t\t\t\targ,\n\t\t\t\t\t\t\t\t// Represent bigint values as strings in JSON.stringify().\n\t\t\t\t\t\t\t\t(key, value) => {\n\t\t\t\t\t\t\t\t\tif (typeof value === 'bigint') {\n\t\t\t\t\t\t\t\t\t\treturn `0x${value.toString(16)}`;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t2\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t// Ignore error and use default representation.\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstr = String(arg);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult += str;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'd': {\n\t\t\t\t\tconst arg = args[argIndex++];\n\t\t\t\t\tif (typeof arg === 'bigint') {\n\t\t\t\t\t\tresult += arg.toString();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult += Math.floor(Number(arg));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'f': {\n\t\t\t\t\tconst arg = args[argIndex++];\n\t\t\t\t\tif (typeof arg === 'bigint') {\n\t\t\t\t\t\tresult += Number(arg);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult += Number(arg);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'x': {\n\t\t\t\t\tconst arg = args[argIndex++];\n\t\t\t\t\tif (typeof arg === 'bigint') {\n\t\t\t\t\t\tresult += arg.toString(16);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult += Math.floor(Number(arg)).toString(16);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase '%': {\n\t\t\t\t\tresult += '%';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tresult += '%' + specifier;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tresult += format[i];\n\t\t}\n\t}\n\n\treturn result;\n}\n","import Semaphore, { AcquireTimeoutError } from './semaphore';\nexport { Semaphore, AcquireTimeoutError };\nexport { PhpWasmError } from './php-wasm-error';\nexport type { SemaphoreOptions } from './semaphore';\nexport {\n\tdirname,\n\tjoinPaths,\n\tbasename,\n\tnormalizePath,\n\tisParentOf,\n} from './paths';\nexport { createSpawnHandler } from './create-spawn-handler';\nexport { randomString } from './random-string';\nexport { randomFilename } from './random-filename';\n\nexport * from './php-vars';\n\nexport * from './sprintf';\n\nexport function concatUint8Arrays(arrays: Uint8Array[]): Uint8Array {\n\tlet totalLength = 0;\n\tarrays.forEach((a) => (totalLength += a.length));\n\tconst result = new Uint8Array(totalLength);\n\tlet offset = 0;\n\tarrays.forEach((a) => {\n\t\tresult.set(a, offset);\n\t\toffset += a.length;\n\t});\n\treturn result;\n}\n\nexport function concatArrayBuffers(buffers: ArrayBuffer[]): ArrayBuffer {\n\treturn concatUint8Arrays(buffers.map((b) => new Uint8Array(b))).buffer;\n}\n"],"names":["SleepFinished","sleep","ms","resolve","AcquireTimeoutError","Semaphore","concurrency","timeout","acquired","value","released","fn","release","PhpWasmError","message","userFriendlyMessage","joinPaths","paths","hasTrailingSlash","p","path","isAbsolute","trailingSlash","normalizePath","dirname","lastSlash","basename","normalizePathsArray","parts","allowAboveRoot","up","i","last","isParentOf","parent","child","splitShellCommand","command","mode","quote","currentPart","char","createSpawnHandler","program","argsArray","options","childProcess","ChildProcess","processApi","ProcessApi","commandArray","e","EventEmitter","eventName","data","listener","code","lastPid","pid","self","randomString","length","specialChars","chars","result","randomFilename","phpVar","stringToBase64","phpVars","vars","key","str","bytesToBase64","bytes","binString","sprintf","format","args","argIndex","specifier","arg","concatUint8Arrays","arrays","totalLength","a","offset","concatArrayBuffers","buffers","b"],"mappings":"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"}