{"version":3,"file":"index.js","sources":["../../../../packages/php-wasm/progress/src/lib/emscripten-download-monitor.ts","../../../../packages/php-wasm/progress/src/lib/progress-observer.ts","../../../../packages/php-wasm/progress/src/lib/progress-tracker.ts"],"sourcesContent":["import { logger } from '@php-wasm/logger';\n/*\n * An approximate file length to use when the actual\n * length number of bytes is missing.\n *\n * This may happen when the files are compressed before transmission\n * and no content-length header is being sent.\n *\n * The approximation isn't accurate, but it's better than nothing.\n * It's not about being exact but about giving the user a rough sense\n * of #progress.\n */\nconst FALLBACK_FILE_SIZE = 5 * 1024 * 1024;\n\n/**\n * Monitors the download #progress of Emscripten modules\n *\n * Usage:\n *\n * ```js\n *   const downloadMonitor = new EmscriptenDownloadMonitor();\n * \t const php = await startPHP(\n *       phpLoaderModule,\n *       'web',\n *       downloadMonitor.phpArgs\n *   );\n *   downloadMonitor.addEventListener('#progress', (e) => {\n *     console.log( e.detail.#progress);\n *   })\n * ```\n */\nexport class EmscriptenDownloadMonitor extends EventTarget {\n\t#assetsSizes: Record<string, number> = {};\n\t#progress: Record<string, number> = {};\n\n\texpectAssets(assets: Record<string, number>) {\n\t\tfor (const [urlLike, size] of Object.entries(assets)) {\n\t\t\tconst dummyBaseUrl = 'http://example.com/';\n\t\t\tconst pathname = new URL(urlLike, dummyBaseUrl).pathname;\n\t\t\tconst filename = pathname.split('/').pop()!;\n\t\t\tif (!(filename in this.#assetsSizes)) {\n\t\t\t\tthis.#assetsSizes[filename] = size;\n\t\t\t}\n\t\t\tif (!(filename in this.#progress)) {\n\t\t\t\tthis.#progress[filename] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync monitorFetch(fetchPromise: Promise<Response>): Promise<Response> {\n\t\tconst response = await fetchPromise;\n\t\tconst onProgress = (event: CustomEvent<DownloadProgress>) => {\n\t\t\tthis.#notify(response.url, event.detail.loaded, event.detail.total);\n\t\t};\n\t\treturn cloneResponseMonitorProgress(response, onProgress);\n\t}\n\n\t/**\n\t * Notifies about the download #progress of a file.\n\t *\n\t * @param  file   The file name.\n\t * @param  loaded The number of bytes of that file loaded so far.\n\t * @param  fileSize  The length number of bytes in the loaded file.\n\t */\n\t#notify(file: string, loaded: number, fileSize: number) {\n\t\tconst fileName = new URL(file, 'http://example.com').pathname\n\t\t\t.split('/')\n\t\t\t.pop()!;\n\t\tif (!fileSize) {\n\t\t\tfileSize = this.#assetsSizes[fileName];\n\t\t} else if (!(fileName in this.#assetsSizes)) {\n\t\t\tthis.#assetsSizes[fileName] = fileSize;\n\t\t\tthis.#progress[fileName] = loaded;\n\t\t}\n\t\tif (!(fileName in this.#progress)) {\n\t\t\tlogger.warn(\n\t\t\t\t`Registered a download #progress of an unregistered file \"${fileName}\". ` +\n\t\t\t\t\t`This may cause a sudden **decrease** in the #progress percentage as the ` +\n\t\t\t\t\t`length number of bytes increases during the download.`\n\t\t\t);\n\t\t}\n\n\t\tthis.#progress[fileName] = loaded;\n\t\tthis.dispatchEvent(\n\t\t\tnew CustomEvent('progress', {\n\t\t\t\tdetail: {\n\t\t\t\t\tloaded: sumValues(this.#progress),\n\t\t\t\t\ttotal: sumValues(this.#assetsSizes),\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\t}\n}\n\nfunction sumValues(obj: Record<string, number>) {\n\treturn Object.values(obj).reduce((length, value) => length + value, 0);\n}\n\nexport default EmscriptenDownloadMonitor;\n\nexport interface DownloadProgress {\n\t/**\n\t * The number of bytes loaded so far.\n\t */\n\tloaded: number;\n\t/**\n\t * The length number of bytes to load.\n\t */\n\ttotal: number;\n}\n\n/**\n * Clones a fetch Response object and returns a version\n * that calls the `onProgress` callback as the #progress\n * changes.\n *\n * @param  response   The fetch Response object to clone.\n * @param  onProgress The callback to call when the download #progress changes.\n * @returns The cloned response\n */\nexport function cloneResponseMonitorProgress(\n\tresponse: Response,\n\tonProgress: (event: CustomEvent<DownloadProgress>) => void\n): Response {\n\tconst contentLength = response.headers.get('content-length') || '';\n\tconst length = parseInt(contentLength, 10) || FALLBACK_FILE_SIZE;\n\n\treturn new Response(\n\t\tcloneStreamMonitorProgress(response.body, length, onProgress),\n\t\t{\n\t\t\tstatus: response.status,\n\t\t\tstatusText: response.statusText,\n\t\t\theaders: response.headers,\n\t\t}\n\t);\n}\n\n/**\n * Clones a ReadableStream and returns a version\n * that calls the `onProgress` callback as the #progress\n * changes.\n *\n * @param  stream     The ReadableStream to clone.\n * @param  total     The total number of bytes to load.\n * @param  onProgress The callback to call when the download #progress changes.\n * @returns The cloned ReadableStream\n */\nexport function cloneStreamMonitorProgress(\n\tstream: ReadableStream<Uint8Array> | null,\n\ttotal: number,\n\tonProgress: (event: CustomEvent<DownloadProgress>) => void\n): ReadableStream<Uint8Array> {\n\tfunction notify(loaded: number, total: number) {\n\t\tonProgress(\n\t\t\tnew CustomEvent('progress', {\n\t\t\t\tdetail: {\n\t\t\t\t\tloaded,\n\t\t\t\t\ttotal,\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\t}\n\n\treturn new ReadableStream({\n\t\tasync start(controller) {\n\t\t\tif (!stream) {\n\t\t\t\tcontroller.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst reader = stream.getReader();\n\t\t\tlet loaded = 0;\n\t\t\twhile (true) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { done, value } = await reader.read();\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tloaded += value.byteLength;\n\t\t\t\t\t}\n\t\t\t\t\tif (done) {\n\t\t\t\t\t\tnotify(loaded, loaded);\n\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnotify(loaded, total);\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.error({ e });\n\t\t\t\t\tcontroller.error(e);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n}\n\nexport type DownloadProgressCallback = (progress: DownloadProgress) => void;\n","import type { DownloadProgress } from './emscripten-download-monitor';\n\nexport type ProgressMode =\n\t/**\n\t * Real-time progress is used when we get real-time reports\n\t * about the progress.\n\t */\n\t| 'REAL_TIME'\n\n\t/**\n\t * Slowly increment progress is used when we don't know how long\n\t * an operation will take and just want to keep slowly incrementing\n\t * the progress bar.\n\t */\n\t| 'SLOWLY_INCREMENT';\n\nexport type ProgressObserverEvent = {\n\tprogress: number;\n\tmode: ProgressMode;\n\tcaption: string;\n};\n\nexport class ProgressObserver extends EventTarget {\n\t#observedProgresses: Record<number, number> = {};\n\t#lastObserverId = 0;\n\n\tprogress = 0;\n\tmode: ProgressMode = 'REAL_TIME';\n\tcaption = '';\n\n\tpartialObserver(progressBudget: number, caption = '') {\n\t\tconst id = ++this.#lastObserverId;\n\t\tthis.#observedProgresses[id] = 0;\n\t\treturn (progress: CustomEvent<DownloadProgress>) => {\n\t\t\tconst { loaded, total } = progress?.detail || {};\n\t\t\tthis.#observedProgresses[id] = (loaded / total) * progressBudget;\n\t\t\tthis.#onProgress(this.totalProgress, 'REAL_TIME', caption);\n\t\t};\n\t}\n\n\tslowlyIncrementBy(progress: number) {\n\t\tconst id = ++this.#lastObserverId;\n\t\tthis.#observedProgresses[id] = progress;\n\t\tthis.#onProgress(this.totalProgress, 'SLOWLY_INCREMENT');\n\t}\n\n\tget totalProgress() {\n\t\treturn Object.values(this.#observedProgresses).reduce(\n\t\t\t(total, progress) => total + progress,\n\t\t\t0\n\t\t);\n\t}\n\n\t#onProgress(progress: number, mode: ProgressMode, caption?: string) {\n\t\tthis.dispatchEvent(\n\t\t\tnew CustomEvent('progress', {\n\t\t\t\tdetail: {\n\t\t\t\t\tprogress,\n\t\t\t\t\tmode,\n\t\t\t\t\tcaption,\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\t}\n}\n","/**\n * Options for customizing the progress tracker.\n */\nexport interface ProgressTrackerOptions {\n\t/** The weight of the progress, a number between 0 and 1. */\n\tweight?: number;\n\t/** The caption to display during progress, a string. */\n\tcaption?: string;\n\t/** The time in milliseconds to fill the progress, a number. */\n\tfillTime?: number;\n}\n\n/**\n * Custom event providing information about a loading process.\n */\nexport type LoadingEvent = CustomEvent<{\n\t/** The number representing how much was loaded. */\n\tloaded: number;\n\t/** The number representing how much needs to loaded in total. */\n\ttotal: number;\n}>;\n\n/**\n * Custom event providing progress details.\n */\nexport type ProgressTrackerEvent = CustomEvent<ProgressDetails>;\n\n/**\n * Custom event providing progress details when the task is done.\n */\nexport type DoneEvent = CustomEvent<ProgressDetails>;\n\nexport interface ProgressDetails {\n\t/** The progress percentage as a number between 0 and 100. */\n\tprogress: number;\n\t/** The caption to display during progress, a string. */\n\tcaption: string;\n}\n\n/**\n * ProgressObserver A function that receives progress updates.\n *\n * @param progress The progress percentage as a number between 0 and 100.\n */\ntype ProgressObserver = (progress: number) => void;\n\n/**\n * Listener A function for handling specific event types.\n *\n * @param event The event of type T.\n */\nexport type Listener<T> = (event: T) => void;\n\nexport type TSCompatibleListener<T> =\n\t| EventListenerOrEventListenerObject\n\t| null\n\t| Listener<T>;\n\nexport interface ProgressReceiver {\n\tsetProgress(details: ProgressDetails): any;\n\tsetLoaded(): any;\n}\n\n/*\n * Like Number.EPSILON, but better tuned to tracking progress.\n *\n * With Number.EPSILON, progress like 99.99999999999997 is still\n * considered to be below 100 â€“ this is highly undeisrable.\n */\nconst PROGRESS_EPSILON = 0.00001;\n\n/**\n * The ProgressTracker class is a tool for tracking progress in an operation\n * that is divided into multiple stages. It allows you to create sub-trackers\n * for each stage, with individual weights and captions. The main tracker\n * automatically calculates the progress based on the weighted sum of each\n * sub-tracker's progress. This makes it easy to keep track of a complex,\n * multi-stage process and report progress in a user-friendly way.\n *\n * After creating the sub-trackers, you can call the set() method to update the\n * progress of the current stage. You can also call the finish() method to mark\n * the current stage as complete and move on to the next one. Alternatively,\n * you can call the fillSlowly() method to simulate progress filling up slowly\n * to 100% before calling finish().\n *\n * @example\n * ```ts\n * const tracker = new ProgressTracker();\n * tracker.addEventListener('progress', (e) => {\n * \t\tconsole.log(\n * \t\t\t\te.detail.progress,\n * \t\t\t\te.detail.caption\n * \t\t);\n * });\n *\n * const stage1 = tracker.stage(0.5, 'Calculating pi digits');\n * const stage2 = tracker.stage(0.5, 'Downloading data');\n *\n * stage1.fillSlowly();\n * await calc100DigitsOfPi();\n * stage1.finish();\n *\n * await fetchWithProgress(function onProgress(loaded, total) {\n * \t\tstage2.set( loaded / total * 100);\n * });\n * stage2.finish();\n */\nexport class ProgressTracker extends EventTarget {\n\tprivate _selfWeight = 1;\n\tprivate _selfDone = false;\n\tprivate _selfProgress = 0;\n\tprivate _selfCaption = '';\n\tprivate _weight: number;\n\tprivate _progressObserver?: ProgressObserver;\n\tprivate _loadingListener?: Listener<LoadingEvent>;\n\tprivate _isFilling = false;\n\tprivate _fillTime: number;\n\tprivate _fillInterval?: any;\n\tprivate _subTrackers: ProgressTracker[] = [];\n\n\tconstructor({\n\t\tweight = 1,\n\t\tcaption = '',\n\t\tfillTime = 4,\n\t}: ProgressTrackerOptions = {}) {\n\t\tsuper();\n\t\tthis._weight = weight;\n\t\tthis._selfCaption = caption;\n\t\tthis._fillTime = fillTime;\n\t}\n\n\t/**\n\t * Creates a new sub-tracker with a specific weight.\n\t *\n\t * The weight determines what percentage of the overall progress\n\t * the sub-tracker represents. For example, if the main tracker is\n\t * monitoring a process that has two stages, and the first stage\n\t * is expected to take twice as long as the second stage, you could\n\t * create the first sub-tracker with a weight of 0.67 and the second\n\t * sub-tracker with a weight of 0.33.\n\t *\n\t * The caption is an optional string that describes the current stage\n\t * of the operation. If provided, it will be used as the progress caption\n\t * for the sub-tracker. If not provided, the main tracker will look for\n\t * the next sub-tracker with a non-empty caption and use that as the progress\n\t * caption instead.\n\t *\n\t * Returns the newly-created sub-tracker.\n\t *\n\t * @throws {Error} If the weight of the new stage would cause the total weight of all stages to exceed 1.\n\t *\n\t * @param weight The weight of the new stage, as a decimal value between 0 and 1.\n\t * @param caption The caption for the new stage, which will be used as the progress caption for the sub-tracker.\n\t *\n\t * @example\n\t * ```ts\n\t * const tracker = new ProgressTracker();\n\t * const subTracker1 = tracker.stage(0.67, 'Slow stage');\n\t * const subTracker2 = tracker.stage(0.33, 'Fast stage');\n\t *\n\t * subTracker2.set(50);\n\t * subTracker1.set(75);\n\t * subTracker2.set(100);\n\t * subTracker1.set(100);\n\t * ```\n\t */\n\tstage(weight?: number, caption = ''): ProgressTracker {\n\t\tif (!weight) {\n\t\t\tweight = this._selfWeight;\n\t\t}\n\t\tif (this._selfWeight - weight < -PROGRESS_EPSILON) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot add a stage with weight ${weight} as the total weight of registered stages would exceed 1.`\n\t\t\t);\n\t\t}\n\t\tthis._selfWeight -= weight;\n\n\t\tconst subTracker = new ProgressTracker({\n\t\t\tcaption,\n\t\t\tweight,\n\t\t\tfillTime: this._fillTime,\n\t\t});\n\t\tthis._subTrackers.push(subTracker);\n\t\tsubTracker.addEventListener('progress', () => this.notifyProgress());\n\t\tsubTracker.addEventListener('done', () => {\n\t\t\tif (this.done) {\n\t\t\t\tthis.notifyDone();\n\t\t\t}\n\t\t});\n\t\treturn subTracker;\n\t}\n\n\t/**\n\t * Fills the progress bar slowly over time, simulating progress.\n\t *\n\t * The progress bar is filled in a 100 steps, and each step, the progress\n\t * is increased by 1. If `stopBeforeFinishing` is true, the progress bar\n\t * will stop filling when it reaches 99% so that you can call `finish()`\n\t * explicitly.\n\t *\n\t * If the progress bar is filling or already filled, this method does nothing.\n\t *\n\t * @example\n\t * ```ts\n\t * const progress = new ProgressTracker({ caption: 'Processing...' });\n\t * progress.fillSlowly();\n\t * ```\n\t *\n\t * @param options Optional options.\n\t */\n\tfillSlowly({ stopBeforeFinishing = true } = {}): void {\n\t\tif (this._isFilling) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isFilling = true;\n\t\tconst steps = 100;\n\t\tconst interval = this._fillTime / steps;\n\t\tthis._fillInterval = setInterval(() => {\n\t\t\tthis.set(this._selfProgress + 1);\n\t\t\tif (stopBeforeFinishing && this._selfProgress >= 99) {\n\t\t\t\tclearInterval(this._fillInterval);\n\t\t\t}\n\t\t}, interval);\n\t}\n\n\tset(value: number): void {\n\t\tthis._selfProgress = Math.min(value, 100);\n\t\tthis.notifyProgress();\n\t\tif (this._selfProgress + PROGRESS_EPSILON >= 100) {\n\t\t\tthis.finish();\n\t\t}\n\t}\n\n\tfinish(): void {\n\t\tif (this._fillInterval) {\n\t\t\tclearInterval(this._fillInterval);\n\t\t}\n\t\tthis._selfDone = true;\n\t\tthis._selfProgress = 100;\n\t\tthis._isFilling = false;\n\t\tthis._fillInterval = undefined;\n\t\tthis.notifyProgress();\n\t\tthis.notifyDone();\n\t}\n\n\tget caption(): string {\n\t\tfor (let i = this._subTrackers.length - 1; i >= 0; i--) {\n\t\t\tif (!this._subTrackers[i].done) {\n\t\t\t\tconst captionMaybe = this._subTrackers[i].caption;\n\t\t\t\tif (captionMaybe) {\n\t\t\t\t\treturn captionMaybe;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this._selfCaption;\n\t}\n\n\tsetCaption(caption: string) {\n\t\tthis._selfCaption = caption;\n\t\tthis.notifyProgress();\n\t}\n\n\tget done(): boolean {\n\t\treturn this.progress + PROGRESS_EPSILON >= 100;\n\t}\n\n\tget progress(): number {\n\t\tif (this._selfDone) {\n\t\t\treturn 100;\n\t\t}\n\t\tconst sum = this._subTrackers.reduce(\n\t\t\t(sum, tracker) => sum + tracker.progress * tracker.weight,\n\t\t\tthis._selfProgress * this._selfWeight\n\t\t);\n\t\treturn Math.round(sum * 10000) / 10000;\n\t}\n\n\tget weight(): number {\n\t\treturn this._weight;\n\t}\n\n\tget observer() {\n\t\tif (!this._progressObserver) {\n\t\t\tthis._progressObserver = (progress: number) => {\n\t\t\t\tthis.set(progress);\n\t\t\t};\n\t\t}\n\t\treturn this._progressObserver;\n\t}\n\n\tget loadingListener() {\n\t\tif (!this._loadingListener) {\n\t\t\tthis._loadingListener = (event: LoadingEvent) => {\n\t\t\t\tthis.set((event.detail.loaded / event.detail.total) * 100);\n\t\t\t};\n\t\t}\n\t\treturn this._loadingListener;\n\t}\n\n\tpipe(receiver: ProgressReceiver) {\n\t\treceiver.setProgress({\n\t\t\tprogress: this.progress,\n\t\t\tcaption: this.caption,\n\t\t});\n\t\tthis.addEventListener('progress', (event: ProgressTrackerEvent) => {\n\t\t\treceiver.setProgress({\n\t\t\t\tprogress: event.detail.progress,\n\t\t\t\tcaption: event.detail.caption,\n\t\t\t});\n\t\t});\n\t\tthis.addEventListener('done', () => {\n\t\t\treceiver.setLoaded();\n\t\t});\n\t}\n\n\toverride addEventListener(\n\t\ttype: string,\n\t\tlistener: TSCompatibleListener<ProgressTrackerEvent>\n\t) {\n\t\tsuper.addEventListener(type, listener as any);\n\t}\n\n\toverride removeEventListener(\n\t\ttype: string,\n\t\tlistener: TSCompatibleListener<ProgressTrackerEvent>\n\t) {\n\t\tsuper.removeEventListener(type, listener as any);\n\t}\n\n\tprivate notifyProgress() {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst self = this;\n\t\tthis.dispatchEvent(\n\t\t\tnew CustomEvent('progress', {\n\t\t\t\tdetail: {\n\t\t\t\t\tget progress() {\n\t\t\t\t\t\treturn self.progress;\n\t\t\t\t\t},\n\t\t\t\t\tget caption() {\n\t\t\t\t\t\treturn self.caption;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\t}\n\n\tprivate notifyDone() {\n\t\tthis.dispatchEvent(new CustomEvent('done'));\n\t}\n}\n"],"names":["FALLBACK_FILE_SIZE","EmscriptenDownloadMonitor","__privateAdd","_EmscriptenDownloadMonitor_instances","_assetsSizes","_progress","assets","urlLike","size","dummyBaseUrl","filename","__privateGet","fetchPromise","response","cloneResponseMonitorProgress","event","__privateMethod","notify_fn","file","loaded","fileSize","fileName","logger","sumValues","obj","length","value","onProgress","contentLength","cloneStreamMonitorProgress","stream","total","notify","controller","reader","done","e","ProgressObserver","_ProgressObserver_instances","_observedProgresses","_lastObserverId","__privateSet","progressBudget","caption","id","__privateWrapper","progress","onProgress_fn","mode","PROGRESS_EPSILON","ProgressTracker","weight","fillTime","subTracker","stopBeforeFinishing","interval","i","captionMaybe","sum","tracker","receiver","type","listener","self"],"mappings":"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"}