{"version":3,"file":"index.js","sources":["../../../../packages/php-wasm/universal/src/lib/rethrow-file-system-error.ts","../../../../packages/php-wasm/universal/src/lib/fs-helpers.ts","../../../../packages/php-wasm/universal/src/lib/php-worker.ts","../../../../packages/php-wasm/universal/src/lib/php-response.ts","../../../../packages/php-wasm/universal/src/lib/load-php-runtime.ts","../../../../packages/php-wasm/universal/src/lib/error-event-polyfill.ts","../../../../packages/php-wasm/universal/src/lib/is-exit-code.ts","../../../../packages/php-wasm/universal/src/lib/wasm-error-reporting.ts","../../../../packages/php-wasm/universal/src/lib/php.ts","../../../../packages/php-wasm/universal/src/lib/ini.ts","../../../../packages/php-wasm/universal/src/lib/http-cookie-store.ts","../../../../packages/php-wasm/universal/src/lib/stream-read-file-from-php.ts","../../../../packages/php-wasm/universal/src/lib/iterate-files.ts","../../../../packages/php-wasm/universal/src/lib/write-files-stream-to-php.ts","../../../../packages/php-wasm/universal/src/lib/php-process-manager.ts","../../../../packages/php-wasm/universal/src/lib/supported-php-versions.ts","../../../../packages/php-wasm/universal/src/lib/urls.ts","../../../../packages/php-wasm/universal/src/lib/encode-as-multipart.ts","../../../../packages/php-wasm/universal/src/lib/php-request-handler.ts","../../../../packages/php-wasm/universal/src/lib/rotate-php-runtime.ts","../../../../packages/php-wasm/universal/src/lib/write-files.ts","../../../../packages/php-wasm/universal/src/lib/proxy-file-system.ts","../../../../node_modules/comlink/dist/esm/node-adapter.mjs","../../../../packages/php-wasm/universal/src/lib/api.ts"],"sourcesContent":["/**\n * Emscripten's filesystem-related Exception.\n *\n * @see https://emscripten.org/docs/api_reference/Filesystem-API.html\n * @see https://github.com/emscripten-core/emscripten/blob/main/system/lib/libc/musl/arch/emscripten/bits/errno.h\n * @see https://github.com/emscripten-core/emscripten/blob/38eedc630f17094b3202fd48ac0c2c585dbea31e/system/include/wasi/api.h#L336\n */\n\nexport interface ErrnoError extends Error {\n\tnode?: any;\n\terrno: number;\n\tmessage: string;\n}\n/**\n * @see https://github.com/emscripten-core/emscripten/blob/38eedc630f17094b3202fd48ac0c2c585dbea31e/system/include/wasi/api.h#L336\n */\nexport const FileErrorCodes = {\n\t0: 'No error occurred. System call completed successfully.',\n\t1: 'Argument list too long.',\n\t2: 'Permission denied.',\n\t3: 'Address in use.',\n\t4: 'Address not available.',\n\t5: 'Address family not supported.',\n\t6: 'Resource unavailable, or operation would block.',\n\t7: 'Connection already in progress.',\n\t8: 'Bad file descriptor.',\n\t9: 'Bad message.',\n\t10: 'Device or resource busy.',\n\t11: 'Operation canceled.',\n\t12: 'No child processes.',\n\t13: 'Connection aborted.',\n\t14: 'Connection refused.',\n\t15: 'Connection reset.',\n\t16: 'Resource deadlock would occur.',\n\t17: 'Destination address required.',\n\t18: 'Mathematics argument out of domain of function.',\n\t19: 'Reserved.',\n\t20: 'File exists.',\n\t21: 'Bad address.',\n\t22: 'File too large.',\n\t23: 'Host is unreachable.',\n\t24: 'Identifier removed.',\n\t25: 'Illegal byte sequence.',\n\t26: 'Operation in progress.',\n\t27: 'Interrupted function.',\n\t28: 'Invalid argument.',\n\t29: 'I/O error.',\n\t30: 'Socket is connected.',\n\t31: 'There is a directory under that path.',\n\t32: 'Too many levels of symbolic links.',\n\t33: 'File descriptor value too large.',\n\t34: 'Too many links.',\n\t35: 'Message too large.',\n\t36: 'Reserved.',\n\t37: 'Filename too long.',\n\t38: 'Network is down.',\n\t39: 'Connection aborted by network.',\n\t40: 'Network unreachable.',\n\t41: 'Too many files open in system.',\n\t42: 'No buffer space available.',\n\t43: 'No such device.',\n\t44: 'There is no such file or directory OR the parent directory does not exist.',\n\t45: 'Executable file format error.',\n\t46: 'No locks available.',\n\t47: 'Reserved.',\n\t48: 'Not enough space.',\n\t49: 'No message of the desired type.',\n\t50: 'Protocol not available.',\n\t51: 'No space left on device.',\n\t52: 'Function not supported.',\n\t53: 'The socket is not connected.',\n\t54: 'Not a directory or a symbolic link to a directory.',\n\t55: 'Directory not empty.',\n\t56: 'State not recoverable.',\n\t57: 'Not a socket.',\n\t58: 'Not supported, or operation not supported on socket.',\n\t59: 'Inappropriate I/O control operation.',\n\t60: 'No such device or address.',\n\t61: 'Value too large to be stored in data type.',\n\t62: 'Previous owner died.',\n\t63: 'Operation not permitted.',\n\t64: 'Broken pipe.',\n\t65: 'Protocol error.',\n\t66: 'Protocol not supported.',\n\t67: 'Protocol wrong type for socket.',\n\t68: 'Result too large.',\n\t69: 'Read-only file system.',\n\t70: 'Invalid seek.',\n\t71: 'No such process.',\n\t72: 'Reserved.',\n\t73: 'Connection timed out.',\n\t74: 'Text file busy.',\n\t75: 'Cross-device link.',\n\t76: 'Extension: Capabilities insufficient.',\n} as any;\n\nexport function getEmscriptenFsError(e: any) {\n\tconst errno = typeof e === 'object' ? ((e as any)?.errno as any) : null;\n\tif (errno in FileErrorCodes) {\n\t\treturn FileErrorCodes[errno];\n\t}\n}\n\nexport function rethrowFileSystemError(messagePrefix = '') {\n\treturn function catchFileSystemError(value: (...args: any[]) => any) {\n\t\treturn function (...args: any[]) {\n\t\t\ttry {\n\t\t\t\t// @ts-expect-error Parameter 'this' implicitly has an 'any' type.ts(7006)\n\t\t\t\treturn value.apply(this, args);\n\t\t\t} catch (e) {\n\t\t\t\tconst errno =\n\t\t\t\t\ttypeof e === 'object' ? ((e as any)?.errno as any) : null;\n\t\t\t\tif (errno in FileErrorCodes) {\n\t\t\t\t\tconst errmsg = FileErrorCodes[errno];\n\t\t\t\t\tconst path = typeof args[1] === 'string' ? args[1] : null;\n\t\t\t\t\tconst formattedPrefix =\n\t\t\t\t\t\tpath !== null\n\t\t\t\t\t\t\t? messagePrefix.replaceAll('{path}', path)\n\t\t\t\t\t\t\t: messagePrefix;\n\t\t\t\t\tthrow new Error(`${formattedPrefix}: ${errmsg}`, {\n\t\t\t\t\t\tcause: e,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t};\n\t};\n}\n","import type { Emscripten } from './emscripten-types';\nimport {\n\tgetEmscriptenFsError,\n\trethrowFileSystemError,\n} from './rethrow-file-system-error';\nimport { logger } from '@php-wasm/logger';\nimport { dirname, joinPaths } from '@php-wasm/util';\n\nexport interface RmDirOptions {\n\t/**\n\t * If true, recursively removes the directory and all its contents.\n\t * Default: true.\n\t */\n\trecursive?: boolean;\n}\n\nexport interface ListFilesOptions {\n\t/**\n\t * If true, prepend given folder path to all file names.\n\t * Default: false.\n\t */\n\tprependPath: boolean;\n}\n\nexport class FSHelpers {\n\t/**\n\t * Reads a file from the PHP filesystem and returns it as a string.\n\t *\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the file doesn't exist.\n\t * @param FS\n\t * @param  path - The file path to read.\n\t * @returns The file contents.\n\t */\n\tstatic readFileAsText(FS: Emscripten.RootFS, path: string) {\n\t\treturn new TextDecoder().decode(FSHelpers.readFileAsBuffer(FS, path));\n\t}\n\n\t/**\n\t * Reads a file from the PHP filesystem and returns it as an array buffer.\n\t *\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the file doesn't exist.\n\t * @param FS\n\t * @param  path - The file path to read.\n\t * @returns The file contents.\n\t */\n\tstatic readFileAsBuffer(FS: Emscripten.RootFS, path: string): Uint8Array {\n\t\treturn FS.readFile(path);\n\t}\n\n\t/**\n\t * Overwrites data in a file in the PHP filesystem.\n\t * Creates a new file if one doesn't exist yet.\n\t *\n\t * @param FS\n\t * @param  path - The file path to write to.\n\t * @param  data - The data to write to the file.\n\t */\n\tstatic writeFile(\n\t\tFS: Emscripten.RootFS,\n\t\tpath: string,\n\t\tdata: string | Uint8Array\n\t) {\n\t\tFS.writeFile(path, data);\n\t}\n\n\t/**\n\t * Removes a file from the PHP filesystem.\n\t *\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the file doesn't exist.\n\t * @param FS\n\t * @param  path - The file path to remove.\n\t */\n\tstatic unlink(FS: Emscripten.RootFS, path: string) {\n\t\tFS.unlink(path);\n\t}\n\n\t/**\n\t * Moves a file or directory in the PHP filesystem to a\n\t * new location.\n\t *\n\t * @param FS\n\t * @param fromPath The path to rename.\n\t * @param toPath The new path.\n\t */\n\tstatic mv(FS: Emscripten.RootFS, fromPath: string, toPath: string) {\n\t\ttry {\n\t\t\t// FS.rename moves the inode within the same filesystem.\n\t\t\t// If fromPath and toPath are on different filesystems,\n\t\t\t// the operation will fail. In that case, we need to do\n\t\t\t// a recursive copy of all the files and remove the original.\n\t\t\t// Note this is also what happens in the linux `mv` command.\n\t\t\tconst fromMount = FS.lookupPath(fromPath).node.mount;\n\t\t\tconst toMount = FSHelpers.fileExists(FS, toPath)\n\t\t\t\t? FS.lookupPath(toPath).node.mount\n\t\t\t\t: FS.lookupPath(dirname(toPath)).node.mount;\n\t\t\tconst movingBetweenFilesystems =\n\t\t\t\tfromMount.mountpoint !== toMount.mountpoint;\n\n\t\t\tif (movingBetweenFilesystems) {\n\t\t\t\tFSHelpers.copyRecursive(FS, fromPath, toPath);\n\t\t\t\tif (FSHelpers.isDir(FS, fromPath)) {\n\t\t\t\t\tFSHelpers.rmdir(FS, fromPath, { recursive: true });\n\t\t\t\t} else {\n\t\t\t\t\tFS.unlink(fromPath);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tFS.rename(fromPath, toPath);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconst errmsg = getEmscriptenFsError(e);\n\t\t\tif (!errmsg) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Could not move ${fromPath} to ${toPath}: ${errmsg}`,\n\t\t\t\t{\n\t\t\t\t\tcause: e,\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Removes a directory from the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param path The directory path to remove.\n\t * @param options Options for the removal.\n\t */\n\tstatic rmdir(\n\t\tFS: Emscripten.RootFS,\n\t\tpath: string,\n\t\toptions: RmDirOptions = { recursive: true }\n\t) {\n\t\tif (options?.recursive) {\n\t\t\tFSHelpers.listFiles(FS, path).forEach((file) => {\n\t\t\t\tconst filePath = `${path}/${file}`;\n\t\t\t\tif (FSHelpers.isDir(FS, filePath)) {\n\t\t\t\t\tFSHelpers.rmdir(FS, filePath, options);\n\t\t\t\t} else {\n\t\t\t\t\tFSHelpers.unlink(FS, filePath);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (FS.getPath(FS.lookupPath(path).node) === FS.cwd()) {\n\t\t\tFS.chdir(joinPaths(FS.cwd(), '..'));\n\t\t}\n\t\tFS.rmdir(path);\n\t}\n\n\t/**\n\t * Lists the files and directories in the given directory.\n\t *\n\t * @param FS\n\t * @param  path - The directory path to list.\n\t * @param  options - Options for the listing.\n\t * @returns The list of files and directories in the given directory.\n\t */\n\tstatic listFiles(\n\t\tFS: Emscripten.RootFS,\n\t\tpath: string,\n\t\toptions: ListFilesOptions = { prependPath: false }\n\t): string[] {\n\t\tif (!FSHelpers.fileExists(FS, path)) {\n\t\t\treturn [];\n\t\t}\n\t\ttry {\n\t\t\tconst files = FS.readdir(path).filter(\n\t\t\t\t(name: string) => name !== '.' && name !== '..'\n\t\t\t);\n\t\t\tif (options.prependPath) {\n\t\t\t\tconst prepend = path.replace(/\\/$/, '');\n\t\t\t\treturn files.map((name: string) => `${prepend}/${name}`);\n\t\t\t}\n\t\t\treturn files;\n\t\t} catch (e) {\n\t\t\tlogger.error(e, { path });\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a directory exists in the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param  path – The path to check.\n\t * @returns True if the path is a directory, false otherwise.\n\t */\n\tstatic isDir(FS: Emscripten.RootFS, path: string): boolean {\n\t\tif (!FSHelpers.fileExists(FS, path)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn FS.isDir(FS.lookupPath(path, { follow: true }).node.mode);\n\t}\n\n\t/**\n\t * Checks if a file exists in the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param  path – The path to check.\n\t * @returns True if the path is a file, false otherwise.\n\t */\n\tstatic isFile(FS: Emscripten.RootFS, path: string): boolean {\n\t\tif (!FSHelpers.fileExists(FS, path)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn FS.isFile(FS.lookupPath(path, { follow: true }).node.mode);\n\t}\n\n\t/**\n\t * Creates a symlink in the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param target\n\t * @param link\n\t */\n\tstatic symlink(FS: Emscripten.RootFS, target: string, link: string): any {\n\t\treturn FS.symlink(target, link);\n\t}\n\n\t/**\n\t * Checks if a path is a symlink in the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param path\n\t * @returns True if the path is a symlink, false otherwise.\n\t */\n\tstatic isSymlink(FS: Emscripten.RootFS, path: string): boolean {\n\t\tif (!FSHelpers.fileExists(FS, path)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn FS.isLink(FS.lookupPath(path).node.mode);\n\t}\n\n\t/**\n\t * Reads the target of a symlink in the PHP filesystem.\n\t * @param FS\n\t * @param path\n\t * @returns The target of the symlink.\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the path is not a symlink.\n\t */\n\tstatic readlink(FS: Emscripten.RootFS, path: string): string {\n\t\treturn FS.readlink(path);\n\t}\n\n\t/**\n\t * Gets the real path of a file in the PHP filesystem.\n\t * @param FS\n\t * @param path\n\t *\n\t * @returns The real path of the file.\n\t */\n\tstatic realpath(FS: Emscripten.RootFS, path: string): string {\n\t\treturn FS.lookupPath(path, { follow: true }).path;\n\t}\n\n\t/**\n\t * Checks if a file (or a directory) exists in the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param  path - The file path to check.\n\t * @returns True if the file exists, false otherwise.\n\t */\n\tstatic fileExists(FS: Emscripten.RootFS, path: string): boolean {\n\t\ttry {\n\t\t\tFS.lookupPath(path);\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Recursively creates a directory with the given path in the PHP filesystem.\n\t * For example, if the path is `/root/php/data`, and `/root` already exists,\n\t * it will create the directories `/root/php` and `/root/php/data`.\n\t *\n\t * @param FS\n\t * @param  path - The directory path to create.\n\t */\n\tstatic mkdir(FS: Emscripten.RootFS, path: string) {\n\t\tFS.mkdirTree(path);\n\t}\n\n\tstatic copyRecursive(\n\t\tFS: Emscripten.FileSystemInstance,\n\t\tfromPath: string,\n\t\ttoPath: string\n\t) {\n\t\tconst fromNode = FS.lookupPath(fromPath).node;\n\t\tif (FS.isDir(fromNode.mode)) {\n\t\t\tFS.mkdirTree(toPath);\n\t\t\tconst filenames = FS.readdir(fromPath).filter(\n\t\t\t\t(name: string) => name !== '.' && name !== '..'\n\t\t\t);\n\t\t\tfor (const filename of filenames) {\n\t\t\t\tFSHelpers.copyRecursive(\n\t\t\t\t\tFS,\n\t\t\t\t\tjoinPaths(fromPath, filename),\n\t\t\t\t\tjoinPaths(toPath, filename)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tFS.writeFile(toPath, FS.readFile(fromPath));\n\t\t}\n\t}\n}\n\n// Apply decorators manually until the decorator syntax is supported\n// by Node.js. We do this so we can take advantage of Node.js type stripping\n// in the meantime.\n// TODO: Inline these decorators once Node.js supports it.\nFSHelpers.readFileAsText = rethrowFileSystemError('Could not read \"{path}\"')(\n\tFSHelpers.readFileAsText\n);\nFSHelpers.readFileAsBuffer = rethrowFileSystemError('Could not read \"{path}\"')(\n\tFSHelpers.readFileAsBuffer\n);\nFSHelpers.writeFile = rethrowFileSystemError('Could not write to \"{path}\"')(\n\tFSHelpers.writeFile\n);\nFSHelpers.unlink = rethrowFileSystemError('Could not unlink \"{path}\"')(\n\tFSHelpers.unlink\n);\nFSHelpers.rmdir = rethrowFileSystemError('Could not remove directory \"{path}\"')(\n\tFSHelpers.rmdir\n);\nFSHelpers.listFiles = rethrowFileSystemError(\n\t'Could not list files in \"{path}\"'\n)(FSHelpers.listFiles);\nFSHelpers.isDir = rethrowFileSystemError('Could not stat \"{path}\"')(\n\tFSHelpers.isDir\n);\nFSHelpers.isFile = rethrowFileSystemError('Could not stat \"{path}\"')(\n\tFSHelpers.isFile\n);\nFSHelpers.realpath = rethrowFileSystemError('Could not stat \"{path}\"')(\n\tFSHelpers.realpath\n);\nFSHelpers.fileExists = rethrowFileSystemError('Could not stat \"{path}\"')(\n\tFSHelpers.fileExists\n);\nFSHelpers.mkdir = rethrowFileSystemError('Could not create directory \"{path}\"')(\n\tFSHelpers.mkdir\n);\nFSHelpers.copyRecursive = rethrowFileSystemError(\n\t'Could not copy files from \"{path}\"'\n)(FSHelpers.copyRecursive);\n","import type { EmscriptenDownloadMonitor } from '@php-wasm/progress';\nimport type { PHP } from './php';\nimport type { PHPRequestHandler } from './php-request-handler';\nimport type { PHPResponse } from './php-response';\nimport type {\n\tPHPRequest,\n\tPHPRunOptions,\n\tMessageListener,\n\tPHPEvent,\n\tPHPEventListener,\n} from './universal-php';\nimport type { RmDirOptions, ListFilesOptions } from './fs-helpers';\n\nconst _private = new WeakMap<\n\tPHPWorker,\n\t{\n\t\trequestHandler?: PHPRequestHandler;\n\t\tphp?: PHP;\n\t\tmonitor?: EmscriptenDownloadMonitor;\n\t}\n>();\n\nexport type LimitedPHPApi = Pick<\n\tPHP,\n\t| 'request'\n\t| 'defineConstant'\n\t| 'addEventListener'\n\t| 'removeEventListener'\n\t| 'mkdir'\n\t| 'mkdirTree'\n\t| 'readFileAsText'\n\t| 'readFileAsBuffer'\n\t| 'writeFile'\n\t| 'unlink'\n\t| 'mv'\n\t| 'rmdir'\n\t| 'listFiles'\n\t| 'isDir'\n\t| 'fileExists'\n\t| 'chdir'\n\t| 'run'\n\t| 'onMessage'\n> & {\n\tdocumentRoot: PHP['documentRoot'];\n\tabsoluteUrl: PHP['absoluteUrl'];\n};\n\n/**\n * A PHP client that can be used to run PHP code in the browser.\n */\nexport class PHPWorker implements LimitedPHPApi, AsyncDisposable {\n\t/** @inheritDoc @php-wasm/universal!RequestHandler.absoluteUrl  */\n\tabsoluteUrl = '';\n\t/** @inheritDoc @php-wasm/universal!RequestHandler.documentRoot  */\n\tdocumentRoot = '';\n\n\t/** @inheritDoc */\n\tconstructor(\n\t\trequestHandler?: PHPRequestHandler,\n\t\tmonitor?: EmscriptenDownloadMonitor\n\t) {\n\t\t/**\n\t\t * Workaround for TypeScript limitation.\n\t\t * Declaring a private field using the EcmaScript syntax like this:\n\t\t *\n\t\t *     #php: PHP\n\t\t *\n\t\t * Makes that field a part of the public API of the class. This means\n\t\t * you can no longer assign seemingly compatible objects:\n\t\t *\n\t\t * ```ts\n\t\t *     class PrivateEcma {\n\t\t *       #privateProp: string = '';\n\t\t *       callback() { }\n\t\t *     }\n\t\t *     interface CompatibleInterface {\n\t\t *       callback(): void;\n\t\t *     }\n\t\t *     const compatObj: CompatibleInterface = {} as any;\n\t\t *     const tsObj: PrivateEcma = compatObj;\n\t\t *     // Property '#privateProp' is missing in type 'CompatibleInterface' but\n\t\t *     // required in type 'PrivateEcma'\n\t\t * ```\n\t\t */\n\t\t_private.set(this, {\n\t\t\tmonitor,\n\t\t});\n\t\tif (requestHandler) {\n\t\t\tthis.__internal_setRequestHandler(requestHandler);\n\t\t}\n\t}\n\n\tpublic __internal_setRequestHandler(requestHandler: PHPRequestHandler) {\n\t\tthis.absoluteUrl = requestHandler.absoluteUrl;\n\t\tthis.documentRoot = requestHandler.documentRoot;\n\t\t_private.set(this, {\n\t\t\t..._private.get(this),\n\t\t\trequestHandler,\n\t\t});\n\t}\n\n\t/**\n\t * @internal\n\t * @deprecated\n\t * Do not use this method directly in the code consuming\n\t * the web API. It will change or even be removed without\n\t * a warning.\n\t */\n\tprotected __internal_getPHP() {\n\t\treturn _private.get(this)!.php;\n\t}\n\n\tasync setPrimaryPHP(php: PHP) {\n\t\t_private.set(this, {\n\t\t\t..._private.get(this)!,\n\t\t\tphp,\n\t\t});\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!PHPRequestHandler.pathToInternalUrl  */\n\tpathToInternalUrl(path: string): string {\n\t\treturn _private.get(this)!.requestHandler!.pathToInternalUrl(path);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!PHPRequestHandler.internalUrlToPath  */\n\tinternalUrlToPath(internalUrl: string): string {\n\t\treturn _private\n\t\t\t.get(this)!\n\t\t\t.requestHandler!.internalUrlToPath(internalUrl);\n\t}\n\n\t/**\n\t * The onDownloadProgress event listener.\n\t */\n\tasync onDownloadProgress(\n\t\tcallback: (progress: CustomEvent<ProgressEvent>) => void\n\t): Promise<void> {\n\t\treturn _private\n\t\t\t.get(this)!\n\t\t\t.monitor?.addEventListener('progress', callback as any);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!PHP.mv  */\n\tasync mv(fromPath: string, toPath: string) {\n\t\treturn _private.get(this)!.php!.mv(fromPath, toPath);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!PHP.rmdir  */\n\tasync rmdir(path: string, options?: RmDirOptions) {\n\t\treturn _private.get(this)!.php!.rmdir(path, options);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!PHPRequestHandler.request */\n\tasync request(request: PHPRequest): Promise<PHPResponse> {\n\t\tconst requestHandler = _private.get(this)!.requestHandler!;\n\t\treturn await requestHandler.request(request);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.run */\n\tasync run(request: PHPRunOptions): Promise<PHPResponse> {\n\t\tconst { php, reap } = await _private\n\t\t\t.get(this)!\n\t\t\t.requestHandler!.processManager.acquirePHPInstance();\n\t\ttry {\n\t\t\treturn await php.run(request);\n\t\t} finally {\n\t\t\treap();\n\t\t}\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.chdir */\n\tchdir(path: string): void {\n\t\treturn _private.get(this)!.php!.chdir(path);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.setSapiName */\n\tsetSapiName(newName: string): void {\n\t\t_private.get(this)!.php!.setSapiName(newName);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.mkdir */\n\tmkdir(path: string): void {\n\t\treturn _private.get(this)!.php!.mkdir(path);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.mkdirTree */\n\tmkdirTree(path: string): void {\n\t\treturn _private.get(this)!.php!.mkdirTree(path);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.readFileAsText */\n\treadFileAsText(path: string): string {\n\t\treturn _private.get(this)!.php!.readFileAsText(path);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.readFileAsBuffer */\n\treadFileAsBuffer(path: string): Uint8Array {\n\t\treturn _private.get(this)!.php!.readFileAsBuffer(path);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.writeFile */\n\twriteFile(path: string, data: string | Uint8Array): void {\n\t\treturn _private.get(this)!.php!.writeFile(path, data);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.unlink */\n\tunlink(path: string): void {\n\t\treturn _private.get(this)!.php!.unlink(path);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.listFiles */\n\tlistFiles(path: string, options?: ListFilesOptions): string[] {\n\t\treturn _private.get(this)!.php!.listFiles(path, options);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.isDir */\n\tisDir(path: string): boolean {\n\t\treturn _private.get(this)!.php!.isDir(path);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.isFile */\n\tisFile(path: string): boolean {\n\t\treturn _private.get(this)!.php!.isFile(path);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.fileExists */\n\tfileExists(path: string): boolean {\n\t\treturn _private.get(this)!.php!.fileExists(path);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.onMessage */\n\tonMessage(listener: MessageListener) {\n\t\treturn _private.get(this)!.php!.onMessage(listener);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.defineConstant */\n\tdefineConstant(key: string, value: string | boolean | number | null): void {\n\t\t_private.get(this)!.php!.defineConstant(key, value);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.addEventListener */\n\taddEventListener(\n\t\teventType: PHPEvent['type'],\n\t\tlistener: PHPEventListener\n\t): void {\n\t\t_private.get(this)!.php!.addEventListener(eventType, listener);\n\t}\n\n\t/** @inheritDoc @php-wasm/universal!/PHP.removeEventListener */\n\tremoveEventListener(\n\t\teventType: PHPEvent['type'],\n\t\tlistener: PHPEventListener\n\t): void {\n\t\t_private.get(this)!.php!.removeEventListener(eventType, listener);\n\t}\n\n\tasync [Symbol.asyncDispose]() {\n\t\tawait _private.get(this)!.requestHandler?.[Symbol.asyncDispose]();\n\t}\n}\n","/*\n * This type is used in Comlink.transferHandlers.set('PHPResponse', { ... })\n * so be sure to update that if you change this type.\n */\nexport interface PHPResponseData {\n\t/**\n\t * Response headers.\n\t */\n\treadonly headers: Record<string, string[]>;\n\n\t/**\n\t * Response body. Contains the output from `echo`,\n\t * `print`, inline HTML etc.\n\t */\n\treadonly bytes: Uint8Array;\n\n\t/**\n\t * Stderr contents, if any.\n\t */\n\treadonly errors: string;\n\n\t/**\n\t * The exit code of the script. `0` is a success, while\n\t * `1` and `2` indicate an error.\n\t */\n\treadonly exitCode: number;\n\n\t/**\n\t * Response HTTP status code, e.g. 200.\n\t */\n\treadonly httpStatusCode: number;\n}\n\nconst responseTexts: Record<number, string> = {\n\t500: 'Internal Server Error',\n\t502: 'Bad Gateway',\n\t404: 'Not Found',\n\t403: 'Forbidden',\n\t401: 'Unauthorized',\n\t400: 'Bad Request',\n\t301: 'Moved Permanently',\n\t302: 'Found',\n\t307: 'Temporary Redirect',\n\t308: 'Permanent Redirect',\n\t204: 'No Content',\n\t201: 'Created',\n\t200: 'OK',\n};\n\nexport class StreamedPHPResponse {\n\t/**\n\t * Response headers.\n\t */\n\tprivate readonly headersStream: ReadableStream<Uint8Array>;\n\n\t/**\n\t * Response body. Contains the output from `echo`,\n\t * `print`, inline HTML etc.\n\t */\n\treadonly stdout: ReadableStream<Uint8Array>;\n\n\t/**\n\t * Stderr contents, if any.\n\t */\n\treadonly stderr: ReadableStream<Uint8Array>;\n\n\t/**\n\t * The exit code of the script. `0` is a success, anything\n\t * else is an error.\n\t */\n\treadonly exitCode: Promise<number>;\n\n\tprivate parsedHeaders: Promise<{\n\t\theaders: Record<string, string[]>;\n\t\thttpStatusCode: number;\n\t}> | null = null;\n\n\tprivate cachedStdoutText: Promise<string> | null = null;\n\tprivate cachedStderrText: Promise<string> | null = null;\n\n\tconstructor(\n\t\theaders: ReadableStream<Uint8Array>,\n\t\tstdout: ReadableStream<Uint8Array>,\n\t\tstderr: ReadableStream<Uint8Array>,\n\t\texitCode: Promise<number>\n\t) {\n\t\tthis.headersStream = headers;\n\t\tthis.stdout = stdout;\n\t\tthis.stderr = stderr;\n\t\tthis.exitCode = exitCode;\n\t}\n\n\t/**\n\t * True if the response is successful (HTTP status code 200-399),\n\t * false otherwise.\n\t */\n\tasync ok(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst statusCode = await this.httpStatusCode;\n\t\t\treturn statusCode >= 200 && statusCode < 400;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Resolves when the response has finished processing – either successfully or not.\n\t */\n\tget finished(): Promise<void> {\n\t\treturn Promise.allSettled([this.exitCode.finally(() => {})]).then(\n\t\t\t() => {}\n\t\t);\n\t}\n\n\t/**\n\t * Resolves once HTTP headers are available.\n\t */\n\tget headers(): Promise<Record<string, string[]>> {\n\t\treturn this.getParsedHeaders().then((headers) => headers.headers);\n\t}\n\n\t/**\n\t * Resolves once HTTP status code is available.\n\t */\n\tget httpStatusCode(): Promise<number> {\n\t\treturn Promise.race([\n\t\t\tthis.getParsedHeaders().then((headers) => headers.httpStatusCode),\n\t\t\tthis.exitCode.then((exitCode) =>\n\t\t\t\texitCode !== 0 ? 500 : undefined\n\t\t\t),\n\t\t])\n\t\t\t.then((result) => {\n\t\t\t\tif (result !== undefined) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\t// If exit code is 0 or not available yet, fall back to parsed headers\n\t\t\t\treturn this.getParsedHeaders().then(\n\t\t\t\t\t(headers) => headers.httpStatusCode,\n\t\t\t\t\t() => 200\n\t\t\t\t);\n\t\t\t})\n\t\t\t.catch(() => 500);\n\t}\n\n\t/**\n\t * Exposes the stdout bytes as they're produced by the PHP instance\n\t */\n\tget stdoutText(): Promise<string> {\n\t\tif (!this.cachedStdoutText) {\n\t\t\tthis.cachedStdoutText = streamToText(this.stdout);\n\t\t}\n\t\treturn this.cachedStdoutText;\n\t}\n\n\t/**\n\t * Exposes the stderr bytes as they're produced by the PHP instance\n\t */\n\tget stderrText(): Promise<string> {\n\t\tif (!this.cachedStderrText) {\n\t\t\tthis.cachedStderrText = streamToText(this.stderr);\n\t\t}\n\t\treturn this.cachedStderrText;\n\t}\n\n\tprivate async getParsedHeaders() {\n\t\tif (!this.parsedHeaders) {\n\t\t\tthis.parsedHeaders = parseHeadersStream(this.headersStream);\n\t\t}\n\t\treturn await this.parsedHeaders;\n\t}\n}\n\nasync function parseHeadersStream(\n\theadersStream: ReadableStream<Uint8Array>\n): Promise<{\n\theaders: Record<string, string[]>;\n\thttpStatusCode: number;\n}> {\n\tconst headersText = await streamToText(headersStream);\n\tlet headersData;\n\ttry {\n\t\theadersData = JSON.parse(headersText);\n\t} catch {\n\t\treturn { headers: {}, httpStatusCode: 200 };\n\t}\n\tconst headers: PHPResponse['headers'] = {};\n\tfor (const line of headersData.headers) {\n\t\t// Skip invalid response headers and the last \"__terminator__\" line.\n\t\t// @TODO: Should we log a warning on an invalid header line?\n\t\t//        What's the typical browser behavior when encountering such a line?\n\t\tif (!line.includes(': ')) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst colonIndex = line.indexOf(': ');\n\t\tconst headerName = line.substring(0, colonIndex).toLowerCase();\n\t\tconst headerValue = line.substring(colonIndex + 2);\n\t\tif (!(headerName in headers)) {\n\t\t\theaders[headerName] = [] as string[];\n\t\t}\n\t\theaders[headerName].push(headerValue);\n\t}\n\treturn {\n\t\theaders,\n\t\thttpStatusCode: headersData.status,\n\t};\n}\n\nasync function streamToText(\n\tstream: ReadableStream<Uint8Array>\n): Promise<string> {\n\tconst reader = (stream as ReadableStream<BufferSource>)\n\t\t.pipeThrough(new TextDecoderStream())\n\t\t.getReader();\n\tconst text: string[] = [];\n\twhile (true) {\n\t\tconst { done, value } = await reader.read();\n\t\tif (done) {\n\t\t\treturn text.join('');\n\t\t}\n\t\tif (value) {\n\t\t\ttext.push(value);\n\t\t}\n\t}\n}\n\n/**\n * PHP response. Body is an `ArrayBuffer` because it can\n * contain binary data.\n *\n * This type is used in Comlink.transferHandlers.set('PHPResponse', \\{ ... \\})\n * so be sure to update that if you change this type.\n */\nexport class PHPResponse implements PHPResponseData {\n\t/** @inheritDoc */\n\treadonly headers: Record<string, string[]>;\n\n\t/** @inheritDoc */\n\treadonly bytes: Uint8Array;\n\n\t/** @inheritDoc */\n\treadonly errors: string;\n\n\t/** @inheritDoc */\n\treadonly exitCode: number;\n\n\t/** @inheritDoc */\n\treadonly httpStatusCode: number;\n\n\tconstructor(\n\t\thttpStatusCode: number,\n\t\theaders: Record<string, string[]>,\n\t\tbody: Uint8Array,\n\t\terrors = '',\n\t\texitCode = 0\n\t) {\n\t\tthis.httpStatusCode = httpStatusCode;\n\t\tthis.headers = headers;\n\t\tthis.bytes = body;\n\t\tthis.exitCode = exitCode;\n\t\tthis.errors = errors;\n\t}\n\n\tstatic forHttpCode(httpStatusCode: number, text = '') {\n\t\treturn new PHPResponse(\n\t\t\thttpStatusCode,\n\t\t\t{},\n\t\t\tnew TextEncoder().encode(\n\t\t\t\ttext || responseTexts[httpStatusCode] || ''\n\t\t\t)\n\t\t);\n\t}\n\n\tstatic fromRawData(data: PHPResponseData): PHPResponse {\n\t\treturn new PHPResponse(\n\t\t\tdata.httpStatusCode,\n\t\t\tdata.headers,\n\t\t\tdata.bytes,\n\t\t\tdata.errors,\n\t\t\tdata.exitCode\n\t\t);\n\t}\n\n\tstatic async fromStreamedResponse(\n\t\tstreamedResponse: StreamedPHPResponse\n\t): Promise<PHPResponse> {\n\t\tawait streamedResponse.finished;\n\t\treturn new PHPResponse(\n\t\t\tawait streamedResponse.httpStatusCode,\n\t\t\tawait streamedResponse.headers,\n\t\t\tnew TextEncoder().encode(await streamedResponse.stdoutText),\n\t\t\tawait streamedResponse.stderrText,\n\t\t\tawait streamedResponse.exitCode\n\t\t);\n\t}\n\n\ttoRawData(): PHPResponseData {\n\t\treturn {\n\t\t\theaders: this.headers,\n\t\t\tbytes: this.bytes,\n\t\t\terrors: this.errors,\n\t\t\texitCode: this.exitCode,\n\t\t\thttpStatusCode: this.httpStatusCode,\n\t\t};\n\t}\n\n\t/**\n\t * Response body as JSON.\n\t */\n\tget json() {\n\t\treturn JSON.parse(this.text);\n\t}\n\n\t/**\n\t * Response body as text.\n\t */\n\tget text() {\n\t\treturn new TextDecoder().decode(this.bytes);\n\t}\n}\n","import { logger } from '@php-wasm/logger';\nimport type { IncomingMessage, Server, ServerResponse } from 'http';\n\nconst RuntimeId = Symbol('RuntimeId');\nconst loadedRuntimes: Map<number, PHPRuntime> = new Map();\nlet lastRuntimeId = 0;\n\n/**\n * Loads the PHP runtime with the given arguments and data dependencies.\n *\n * This function handles the entire PHP initialization pipeline. In particular,\n * it:\n *\n * * Instantiates the Emscripten PHP module\n * * Wires it together with the data dependencies and loads them\n * * Ensures is all happens in a correct order\n * * Waits until the entire loading sequence is finished\n *\n * Basic usage:\n *\n * ```js\n *  const phpLoaderModule = await getPHPLoaderModule(\"7.4\");\n *  const php = await loadPHPRuntime( phpLoaderModule );\n *  console.log(php.run(`<?php echo \"Hello, world!\"; `));\n *  // { stdout: ArrayBuffer containing the string \"Hello, world!\", stderr: [''], exitCode: 0 }\n * ```\n *\n * **The PHP loader module:**\n *\n * In the basic usage example, `phpLoaderModule` is **not** a vanilla\n * Emscripten module. Instead, it's an ESM module that wraps the regular\n * Emscripten output and adds some extra functionality. It's generated by the\n * Dockerfile shipped with this repo. Here's the API it provides:\n *\n * ```js\n * // php.wasm size in bytes:\n * export const dependenciesTotalSize = 5644199;\n *\n * // php.wasm filename:\n * export const dependencyFilename = 'php.wasm';\n *\n * // Run Emscripten's generated module:\n * export default function(jsEnv, emscriptenModuleArgs) {}\n * ```\n *\n * **PHP Filesystem:**\n *\n * Once initialized, the PHP has its own filesystem separate from the project\n * files. It's provided by [Emscripten and uses its FS library](https://emscripten.org/docs/api_reference/Filesystem-API.html).\n *\n * The API exposed to you via the PHP class is succinct and abstracts\n * certain unintuitive parts of low-level filesystem interactions.\n *\n * Here's how to use it:\n *\n * ```js\n * // Recursively create a /var/www directory\n * php.mkdirTree('/var/www');\n *\n * console.log(php.fileExists('/var/www/file.txt'));\n * // false\n *\n * php.writeFile('/var/www/file.txt', 'Hello from the filesystem!');\n *\n * console.log(php.fileExists('/var/www/file.txt'));\n * // true\n *\n * console.log(php.readFile('/var/www/file.txt'));\n * // \"Hello from the filesystem!\n *\n * // Delete the file:\n * php.unlink('/var/www/file.txt');\n * ```\n *\n * For more details consult the PHP class directly.\n *\n * **Data dependencies:**\n *\n * Using existing PHP packages by manually recreating them file-by-file would\n * be quite inconvenient. Fortunately, Emscripten provides a \"data dependencies\"\n * feature.\n *\n * Data dependencies consist of a `dependency.data` file and a `dependency.js`\n * loader and can be packaged with the [file_packager.py tool](\n * https://emscripten.org/docs/porting/files/packaging_files.html#packaging-using-the-file-packager-tool).\n * This project requires wrapping the Emscripten-generated `dependency.js` file\n * in an ES module as follows:\n *\n * 1. Prepend `export default function(emscriptenPHPModule) {'; `\n * 2. Prepend `export const dependencyFilename = '<DATA FILE NAME>'; `\n * 3. Prepend `export const dependenciesTotalSize = <DATA FILE SIZE>;`\n * 4. Append `}`\n *\n * Be sure to use the `--export-name=\"emscriptenPHPModule\"` file_packager.py\n * option.\n *\n * You want the final output to look as follows:\n *\n * ```js\n * export const dependenciesTotalSize = 5644199;\n * export const dependencyFilename = 'dependency.data';\n * export default function(emscriptenPHPModule) {\n *    // Emscripten-generated code:\n *    var Module = typeof emscriptenPHPModule !== 'undefined' ? emscriptenPHPModule : {};\n *    // ... the rest of it ...\n * }\n * ```\n *\n * Such a constructions enables loading the `dependency.js` as an ES Module\n * using `import(\"/dependency.js\")`.\n *\n * Once it's ready, you can load PHP and your data dependencies as follows:\n *\n * ```js\n *  const [phpLoaderModule, wordPressLoaderModule] = await Promise.all([\n *    getPHPLoaderModule(\"7.4\"),\n *    import(\"/wp.js\")\n *  ]);\n *  const php = await loadPHPRuntime(phpLoaderModule, {}, [wordPressLoaderModule]);\n * ```\n *\n * @public\n * @param  phpLoaderModule         - The ESM-wrapped Emscripten module. Consult the Dockerfile for the build process.\n * @param  options                 - The Emscripten module arguments, see https://emscripten.org/docs/api_reference/module.html#affecting-execution.\n * @returns Loaded runtime id.\n */\n\nexport async function loadPHPRuntime(\n\tphpLoaderModule: PHPLoaderModule,\n\t...options: EmscriptenOptions[]\n): Promise<number> {\n\tconst phpModuleArgs = Object.assign({}, ...options);\n\n\tconst [phpReady, resolvePHP, rejectPHP] = makePromise();\n\n\tconst PHPRuntime = phpLoaderModule.init(currentJsRuntime, {\n\t\tonAbort(reason) {\n\t\t\trejectPHP(reason);\n\t\t\t// This can happen after PHP has been initialized so\n\t\t\t// let's just log it.\n\t\t\tlogger.error(reason);\n\t\t},\n\t\tENV: {},\n\t\t// Emscripten sometimes prepends a '/' to the path, which\n\t\t// breaks vite dev mode. An identity `locateFile` function\n\t\t// fixes it.\n\t\tlocateFile: (path) => path,\n\t\t...phpModuleArgs,\n\t\tnoInitialRun: true,\n\t\tonRuntimeInitialized() {\n\t\t\tif (phpModuleArgs.onRuntimeInitialized) {\n\t\t\t\tphpModuleArgs.onRuntimeInitialized(PHPRuntime);\n\t\t\t}\n\t\t\tresolvePHP();\n\t\t},\n\t});\n\n\tawait phpReady;\n\n\tconst id = ++lastRuntimeId;\n\n\t// TODO: Ask @adamziel why this is here.\n\t// eslint-disable-next-line @typescript-eslint/no-unused-expressions -- why is this here?\n\tPHPRuntime.FS;\n\tPHPRuntime.id = id;\n\tPHPRuntime.originalExit = PHPRuntime._exit;\n\n\tPHPRuntime._exit = function (code: number) {\n\t\tif (PHPRuntime.outboundNetworkProxyServer) {\n\t\t\tPHPRuntime.outboundNetworkProxyServer.close();\n\t\t\tPHPRuntime.outboundNetworkProxyServer.closeAllConnections();\n\t\t}\n\t\tloadedRuntimes.delete(id);\n\t\treturn PHPRuntime.originalExit(code);\n\t};\n\n\tPHPRuntime[RuntimeId] = id;\n\tloadedRuntimes.set(id, PHPRuntime);\n\treturn id;\n}\n\nexport type RuntimeType = 'NODE' | 'WEB' | 'WORKER';\n\ndeclare const self: WindowOrWorkerGlobalScope;\ndeclare const WorkerGlobalScope: object | undefined;\n\nexport type PHPRuntimeId = number;\n\nexport function getLoadedRuntime(id: PHPRuntimeId): PHPRuntime {\n\treturn loadedRuntimes.get(id);\n}\n\nexport const currentJsRuntime = (function () {\n\tif (typeof process !== 'undefined' && process.release?.name === 'node') {\n\t\treturn 'NODE';\n\t} else if (typeof window !== 'undefined') {\n\t\treturn 'WEB';\n\t} else if (\n\t\ttypeof WorkerGlobalScope !== 'undefined' &&\n\t\tself instanceof (WorkerGlobalScope as any)\n\t) {\n\t\treturn 'WORKER';\n\t} else {\n\t\treturn 'NODE';\n\t}\n})();\n\n/**\n * Creates and exposes Promise resolve/reject methods for later use.\n */\nconst makePromise = () => {\n\tconst methods: any = [];\n\n\tconst promise = new Promise((resolve, reject) => {\n\t\tmethods.push(resolve, reject);\n\t});\n\tmethods.unshift(promise);\n\n\treturn methods as [Promise<any>, (v?: any) => void, (e?: any) => void];\n};\n\nexport type PHPRuntime = any;\n\nexport type PHPLoaderModule = {\n\tdependencyFilename: string;\n\tdependenciesTotalSize: number;\n\tinit: (jsRuntime: string, options: EmscriptenOptions) => PHPRuntime;\n};\n\nexport type DataModule = {\n\tdependencyFilename: string;\n\tdependenciesTotalSize: number;\n\tdefault: (phpRuntime: PHPRuntime) => void;\n};\n\nexport type EmscriptenOptions = {\n\tonAbort?: (message: string) => void;\n\t/**\n\t * Set to true for debugging tricky WebAssembly errors.\n\t */\n\tdebug?: boolean;\n\tENV?: Record<string, string>;\n\tlocateFile?: (path: string) => string;\n\tnoInitialRun?: boolean;\n\tprint?: (message: string) => void;\n\tprintErr?: (message: string) => void;\n\tquit?: (status: number, toThrow: any) => void;\n\tonRuntimeInitialized?: (phpRuntime: PHPRuntime) => void;\n\tmonitorRunDependencies?: (left: number) => void;\n\tonMessage?: (listener: EmscriptenMessageListener) => void;\n\toutboundNetworkProxyServer?: Server<\n\t\ttypeof IncomingMessage,\n\t\ttypeof ServerResponse\n\t>;\n\tinstantiateWasm?: (\n\t\tinfo: WebAssembly.Imports,\n\t\treceiveInstance: (\n\t\t\tinstance: WebAssembly.Instance,\n\t\t\tmodule: WebAssembly.Module\n\t\t) => void\n\t) => void;\n} & Record<string, any>;\n\nexport type EmscriptenMessageListener = (type: string, data: string) => void;\n","/*\n * Node.js Polyfill for ErrorEvent.\n */\n\nconst kError = Symbol('error');\nconst kMessage = Symbol('message');\n\ninterface ErrorEventOptions {\n\t/* The error that generated this event */\n\terror?: Error;\n\t/* The error message */\n\tmessage?: string;\n}\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent2 extends Event {\n\t[kError]: any;\n\t[kMessage]: any;\n\t/**\n\t * Create a new `ErrorEvent`.\n\t *\n\t * @param type The name of the event\n\t * @param options A dictionary object that allows for setting\n\t *                  attributes via object members of the same name.\n\t */\n\tconstructor(type: 'error', options: ErrorEventOptions = {}) {\n\t\tsuper(type);\n\n\t\tthis[kError] = options.error === undefined ? null : options.error;\n\t\tthis[kMessage] = options.message === undefined ? '' : options.message;\n\t}\n\n\tget error() {\n\t\treturn this[kError];\n\t}\n\n\tget message() {\n\t\treturn this[kMessage];\n\t}\n}\nObject.defineProperty(ErrorEvent2.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent2.prototype, 'message', { enumerable: true });\n\nexport const ErrorEvent =\n\ttypeof globalThis.ErrorEvent === 'function'\n\t\t? globalThis.ErrorEvent\n\t\t: ErrorEvent2;\n","/**\n * Check if the Emscripten-thrown error is an exit code 0 error.\n *\n * @param e The error to check\n * @returns True if the error appears to represent an exit code or status\n */\nexport function isExitCode(e: any): e is { exitCode: number } {\n\tif (!(e instanceof Error)) {\n\t\treturn false;\n\t}\n\treturn 'exitCode' in e || (e?.name === 'ExitStatus' && 'status' in e);\n}\n","import { ErrorEvent } from './error-event-polyfill';\nimport { isExitCode } from './is-exit-code';\nimport { logger } from '@php-wasm/logger';\n\ntype Runtime = {\n\twasmExports: Record<string, unknown>;\n\tlastAsyncifyStackSource?: Error;\n};\n\nexport class UnhandledRejectionsTarget extends EventTarget {\n\tlistenersCount = 0;\n\toverride addEventListener(\n\t\ttype: unknown,\n\t\tcallback: unknown,\n\t\toptions?: boolean | AddEventListenerOptions\n\t): void {\n\t\t++this.listenersCount;\n\t\tsuper.addEventListener(\n\t\t\ttype as string,\n\t\t\tcallback as EventListener,\n\t\t\toptions\n\t\t);\n\t}\n\toverride removeEventListener(\n\t\ttype: unknown,\n\t\tcallback: unknown,\n\t\toptions?: boolean | EventListenerOptions\n\t): void {\n\t\t--this.listenersCount;\n\t\tsuper.removeEventListener(\n\t\t\ttype as string,\n\t\t\tcallback as EventListener,\n\t\t\toptions\n\t\t);\n\t}\n\thasListeners() {\n\t\treturn this.listenersCount > 0;\n\t}\n}\n\n/**\n * Creates Asyncify errors listener.\n *\n * Emscripten turns Asyncify errors into unhandled rejections by\n * throwing them outside of the context of the original function call.\n *\n * With this listener, we can catch and rethrow them in a proper context,\n * or at least log them in a more readable way.\n *\n * @param runtime\n */\nexport function improveWASMErrorReporting(runtime: Runtime) {\n\tconst target = new UnhandledRejectionsTarget();\n\tfor (const key in runtime.wasmExports) {\n\t\tif (typeof runtime.wasmExports[key] == 'function') {\n\t\t\tconst original = runtime.wasmExports[key] as any;\n\t\t\truntime.wasmExports[key] = function (...args: any[]) {\n\t\t\t\ttry {\n\t\t\t\t\treturn original(...args);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!(e instanceof Error)) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (runtime.lastAsyncifyStackSource) {\n\t\t\t\t\t\te.cause = runtime.lastAsyncifyStackSource;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst clearMessage = clarifyErrorMessage(\n\t\t\t\t\t\te,\n\t\t\t\t\t\truntime.lastAsyncifyStackSource?.stack\n\t\t\t\t\t);\n\n\t\t\t\t\tif (target.hasListeners()) {\n\t\t\t\t\t\tconst event = new ErrorEvent('error', {\n\t\t\t\t\t\t\terror: e,\n\t\t\t\t\t\t\tmessage: clearMessage,\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttarget.dispatchEvent(event);\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!isExitCode(e) || e.exitCode !== 0) {\n\t\t\t\t\t\tshowCriticalErrorBox(clearMessage);\n\t\t\t\t\t}\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\treturn target;\n}\n\nlet functionsMaybeMissingFromAsyncify: string[] = [];\nexport function getFunctionsMaybeMissingFromAsyncify() {\n\treturn functionsMaybeMissingFromAsyncify;\n}\n\nexport function clarifyErrorMessage(\n\tcrypticError: Error,\n\tasyncifyStack?: string\n) {\n\tif (crypticError.message === 'unreachable') {\n\t\tlet betterMessage = UNREACHABLE_ERROR;\n\t\tif (!asyncifyStack) {\n\t\t\tbetterMessage +=\n\t\t\t\t`\\n\\nThis stack trace is lacking. For a better one initialize \\n` +\n\t\t\t\t`the PHP runtime with { debug: true }, e.g. PHPNode.load('8.1', { debug: true }).\\n\\n`;\n\t\t}\n\n\t\t// Extract all the PHP functions from the entire error chain.\n\t\tconst uniqueFunctions = new Set<string>(\n\t\t\textractPHPFunctionsFromStack(asyncifyStack || '')\n\t\t);\n\t\tlet lastError = crypticError;\n\t\tdo {\n\t\t\tfor (const fn of extractPHPFunctionsFromStack(\n\t\t\t\tlastError.stack || ''\n\t\t\t)) {\n\t\t\t\tuniqueFunctions.add(fn);\n\t\t\t}\n\t\t\tlastError = lastError.cause as Error;\n\t\t} while (lastError);\n\t\tfunctionsMaybeMissingFromAsyncify = Array.from(uniqueFunctions);\n\n\t\tfor (const fn of uniqueFunctions) {\n\t\t\tbetterMessage += `    * ${fn}\\n`;\n\t\t}\n\n\t\treturn betterMessage;\n\t}\n\treturn crypticError.message;\n}\n\nconst UNREACHABLE_ERROR = `\n\"unreachable\" WASM instruction executed.\n\nThe typical reason is a PHP function missing from the ASYNCIFY_ONLY\nlist when building PHP.wasm.\n\nYou will need to file a new issue in the WordPress Playground repository\nand paste this error message there:\n\nhttps://github.com/WordPress/wordpress-playground/issues/new\n\nIf you're a core developer, the typical fix is to:\n\n* Isolate a minimal reproduction of the error\n* Add a reproduction of the error to php-asyncify.spec.ts in the WordPress Playground repository\n* Run 'npm run fix-asyncify'\n* Commit the changes, push to the repo, release updated NPM packages\n\nBelow is a list of all the PHP functions found in the stack trace to\nhelp with the minimal reproduction. If they're all already listed in\nthe Dockerfile, you'll need to trigger this error again with long stack\ntraces enabled. In node.js, you can do it using the --stack-trace-limit=100\nCLI option: \\n\\n`;\n\n// ANSI escape codes for CLI colors and formats\nconst redBg = '\\x1b[41m';\nconst bold = '\\x1b[1m';\nconst reset = '\\x1b[0m';\nconst eol = '\\x1B[K';\n\nlet logged = false;\nexport function showCriticalErrorBox(message: string) {\n\tif (logged) {\n\t\treturn;\n\t}\n\tlogged = true;\n\tif (message?.trim().startsWith('Program terminated with exit')) {\n\t\treturn;\n\t}\n\tlogger.log(`${redBg}\\n${eol}\\n${bold}  WASM ERROR${reset}${redBg}`);\n\tfor (const line of message.split('\\n')) {\n\t\tlogger.log(`${eol}  ${line} `);\n\t}\n\tlogger.log(`${reset}`);\n}\n\nfunction extractPHPFunctionsFromStack(stack: string) {\n\ttry {\n\t\tconst names = stack\n\t\t\t.split('\\n')\n\t\t\t.slice(1)\n\t\t\t.map((line) => {\n\t\t\t\tconst parts = line.trim().substring('at '.length).split(' ');\n\t\t\t\treturn {\n\t\t\t\t\tfn: parts.length >= 2 ? parts[0] : '<unknown>',\n\t\t\t\t\tisWasm: line.includes('wasm:/'),\n\t\t\t\t};\n\t\t\t})\n\t\t\t.filter(\n\t\t\t\t({ fn, isWasm }) =>\n\t\t\t\t\tisWasm &&\n\t\t\t\t\t!fn.startsWith('dynCall_') &&\n\t\t\t\t\t!fn.startsWith('invoke_')\n\t\t\t)\n\t\t\t.map(({ fn }) => fn);\n\t\treturn Array.from(new Set(names));\n\t} catch {\n\t\treturn [];\n\t}\n}\n","import { PHPResponse, StreamedPHPResponse } from './php-response';\nimport { getLoadedRuntime } from './load-php-runtime';\nimport type { PHPRuntimeId } from './load-php-runtime';\nimport type {\n\tMessageListener,\n\tPHPRequest,\n\tPHPRequestHeaders,\n\tPHPRunOptions,\n\tSpawnHandler,\n\tPHPEventListener,\n\tPHPEvent,\n} from './universal-php';\nimport type { RmDirOptions, ListFilesOptions } from './fs-helpers';\nimport { FSHelpers } from './fs-helpers';\nimport type { UnhandledRejectionsTarget } from './wasm-error-reporting';\nimport {\n\tgetFunctionsMaybeMissingFromAsyncify,\n\timproveWASMErrorReporting,\n} from './wasm-error-reporting';\nimport { Semaphore, createSpawnHandler, joinPaths } from '@php-wasm/util';\nimport type { PHPRequestHandler } from './php-request-handler';\nimport { logger } from '@php-wasm/logger';\nimport { isExitCode } from './is-exit-code';\nimport type { Emscripten } from './emscripten-types';\n\nconst STRING = 'string';\nconst NUMBER = 'number';\n\nexport const __private__dont__use = Symbol('__private__dont__use');\n\ntype ErrorSource = 'request' | 'php-wasm';\nexport class PHPExecutionFailureError extends Error {\n\tresponse: PHPResponse;\n\tsource: ErrorSource;\n\n\tconstructor(message: string, response: PHPResponse, source: ErrorSource) {\n\t\tsuper(message);\n\t\tthis.response = response;\n\t\tthis.source = source;\n\t}\n}\n\nexport type UnmountFunction = (() => Promise<any>) | (() => any);\nexport type MountHandler = (\n\tphp: PHP,\n\tFS: Emscripten.RootFS,\n\tvfsMountPoint: string\n) => UnmountFunction | Promise<UnmountFunction>;\n\nexport const PHP_INI_PATH = '/internal/shared/php.ini';\nconst AUTO_PREPEND_SCRIPT = '/internal/shared/auto_prepend_file.php';\n\ntype MountObject = {\n\tmountHandler: MountHandler;\n\tunmount: () => Promise<any>;\n};\n\n/**\n * An environment-agnostic wrapper around the Emscripten PHP runtime\n * that universals the super low-level API and provides a more convenient\n * higher-level API.\n *\n * It exposes a minimal set of methods to run PHP scripts and to\n * interact with the PHP filesystem.\n */\nexport class PHP implements Disposable {\n\tprotected [__private__dont__use]: any;\n\t#sapiName?: string;\n\t#webSapiInitialized = false;\n\t#wasmErrorsTarget: UnhandledRejectionsTarget | null = null;\n\t#eventListeners: Map<string, Set<PHPEventListener>> = new Map();\n\t#messageListeners: MessageListener[] = [];\n\t#mounts: Record<string, MountObject> = {};\n\trequestHandler?: PHPRequestHandler;\n\n\t/**\n\t * An exclusive lock that prevent multiple requests from running at\n\t * the same time.\n\t */\n\tsemaphore: Semaphore;\n\n\t/**\n\t * Initializes a PHP runtime.\n\t *\n\t * @internal\n\t * @param  PHPRuntime - Optional. PHP Runtime ID as initialized by loadPHPRuntime.\n\t * @param  requestHandlerOptions - Optional. Options for the PHPRequestHandler. If undefined, no request handler will be initialized.\n\t */\n\tconstructor(PHPRuntimeId?: PHPRuntimeId) {\n\t\tthis.semaphore = new Semaphore({ concurrency: 1 });\n\t\tif (PHPRuntimeId !== undefined) {\n\t\t\tthis.initializeRuntime(PHPRuntimeId);\n\t\t}\n\t}\n\n\t/**\n\t * Adds an event listener for a PHP event.\n\t * @param eventType - The type of event to listen for.\n\t * @param listener - The listener function to be called when the event is triggered.\n\t */\n\taddEventListener(eventType: PHPEvent['type'], listener: PHPEventListener) {\n\t\tif (!this.#eventListeners.has(eventType)) {\n\t\t\tthis.#eventListeners.set(eventType, new Set());\n\t\t}\n\t\tthis.#eventListeners.get(eventType)!.add(listener);\n\t}\n\n\t/**\n\t * Removes an event listener for a PHP event.\n\t * @param eventType - The type of event to remove the listener from.\n\t * @param listener - The listener function to be removed.\n\t */\n\tremoveEventListener(\n\t\teventType: PHPEvent['type'],\n\t\tlistener: PHPEventListener\n\t) {\n\t\tthis.#eventListeners.get(eventType)?.delete(listener);\n\t}\n\n\tdispatchEvent<Event extends PHPEvent>(event: Event) {\n\t\tconst listeners = this.#eventListeners.get(event.type);\n\t\tif (!listeners) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t}\n\n\t/**\n\t * Listens to message sent by the PHP code.\n\t *\n\t * To dispatch messages, call:\n\t *\n\t *     post_message_to_js(string $data)\n\t *\n\t *     Arguments:\n\t *         $data (string) – Data to pass to JavaScript.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const php = await PHP.load('8.0');\n\t *\n\t * php.onMessage(\n\t *     // The data is always passed as a string\n\t *     function (data: string) {\n\t *         // Let's decode and log the data:\n\t *         console.log(JSON.parse(data));\n\t *     }\n\t * );\n\t *\n\t * // Now that we have a listener in place, let's\n\t * // dispatch a message:\n\t * await php.run({\n\t *     code: `<?php\n\t *         post_message_to_js(\n\t *             json_encode([\n\t *                 'post_id' => '15',\n\t *                 'post_title' => 'This is a blog post!'\n\t *             ])\n\t *         ));\n\t *     `,\n\t * });\n\t * ```\n\t *\n\t * @param listener Callback function to handle the message.\n\t */\n\tonMessage(listener: MessageListener) {\n\t\tthis.#messageListeners.push(listener);\n\t\treturn async () => {\n\t\t\tthis.#messageListeners = this.#messageListeners.filter(\n\t\t\t\t(l) => l !== listener\n\t\t\t);\n\t\t};\n\t}\n\n\tasync setSpawnHandler(handler: SpawnHandler | string) {\n\t\tif (typeof handler === 'string') {\n\t\t\t// This workaround is needed because the\n\t\t\t// Comlink messaging library used by Playground\n\t\t\t// has a hard time serializing a composite\n\t\t\t// handler object.\n\t\t\t// @TODO: Don't eval text-based functions here. Instead\n\t\t\t//        use a MessagePort to communicate with the\n\t\t\t//\t\t  parent context.\n\t\t\t// Perhaps this library would be useful:\n\t\t\t// https://github.com/WebReflection/coincident/\n\t\t\thandler = createSpawnHandler(eval(handler));\n\t\t}\n\t\tthis[__private__dont__use].spawnProcess = handler;\n\t}\n\n\t/** @deprecated Use PHPRequestHandler instead. */\n\tget absoluteUrl() {\n\t\treturn this.requestHandler!.absoluteUrl;\n\t}\n\n\t/** @deprecated Use PHPRequestHandler instead. */\n\tget documentRoot() {\n\t\treturn this.requestHandler!.documentRoot;\n\t}\n\n\t/** @deprecated Use PHPRequestHandler instead. */\n\tpathToInternalUrl(path: string): string {\n\t\treturn this.requestHandler!.pathToInternalUrl(path);\n\t}\n\n\t/** @deprecated Use PHPRequestHandler instead. */\n\tinternalUrlToPath(internalUrl: string): string {\n\t\treturn this.requestHandler!.internalUrlToPath(internalUrl);\n\t}\n\n\tinitializeRuntime(runtimeId: PHPRuntimeId) {\n\t\tif (this[__private__dont__use]) {\n\t\t\tthrow new Error('PHP runtime already initialized.');\n\t\t}\n\t\tconst runtime = getLoadedRuntime(runtimeId);\n\t\tif (!runtime) {\n\t\t\tthrow new Error('Invalid PHP runtime id.');\n\t\t}\n\t\tthis[__private__dont__use] = runtime;\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_set_phpini_path',\n\t\t\tnull,\n\t\t\t['string'],\n\t\t\t[PHP_INI_PATH]\n\t\t);\n\n\t\tif (!this.fileExists(PHP_INI_PATH)) {\n\t\t\tthis.writeFile(\n\t\t\t\tPHP_INI_PATH,\n\t\t\t\t[\n\t\t\t\t\t'auto_prepend_file=' + AUTO_PREPEND_SCRIPT,\n\t\t\t\t\t'memory_limit=256M',\n\t\t\t\t\t'ignore_repeated_errors = 1',\n\t\t\t\t\t'error_reporting = E_ALL',\n\t\t\t\t\t'display_errors = 1',\n\t\t\t\t\t'html_errors = 1',\n\t\t\t\t\t'display_startup_errors = On',\n\t\t\t\t\t'log_errors = 1',\n\t\t\t\t\t'always_populate_raw_post_data = -1',\n\t\t\t\t\t'upload_max_filesize = 2000M',\n\t\t\t\t\t'post_max_size = 2000M',\n\t\t\t\t\t'allow_url_fopen = On',\n\t\t\t\t\t'allow_url_include = Off',\n\t\t\t\t\t'session.save_path = /home/web_user',\n\t\t\t\t\t'implicit_flush = 1',\n\t\t\t\t\t'output_buffering = 0',\n\t\t\t\t\t'max_execution_time = 0',\n\t\t\t\t\t'max_input_time = -1',\n\t\t\t\t].join('\\n')\n\t\t\t);\n\t\t}\n\t\tif (!this.fileExists(AUTO_PREPEND_SCRIPT)) {\n\t\t\tthis.writeFile(\n\t\t\t\tAUTO_PREPEND_SCRIPT,\n\t\t\t\t`<?php\n\t\t\t\t// Define constants set via defineConstant() calls\n\t\t\t\tif(file_exists('/internal/shared/consts.json')) {\n\t\t\t\t\t$consts = json_decode(file_get_contents('/internal/shared/consts.json'), true);\n\t\t\t\t\tforeach ($consts as $const => $value) {\n\t\t\t\t\t\tif (!defined($const) && is_scalar($value)) {\n\t\t\t\t\t\t\tdefine($const, $value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Preload all the files from /internal/shared/preload\n\t\t\t\tforeach (glob('/internal/shared/preload/*.php') as $file) {\n\t\t\t\t\trequire_once $file;\n\t\t\t\t}\n\t\t\t\t`\n\t\t\t);\n\t\t}\n\n\t\truntime['onMessage'] = async (\n\t\t\tdata: string\n\t\t): Promise<string | Uint8Array> => {\n\t\t\tfor (const listener of this.#messageListeners) {\n\t\t\t\tconst returnData = await listener(data);\n\n\t\t\t\tif (returnData) {\n\t\t\t\t\treturn returnData;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn '';\n\t\t};\n\n\t\tthis.#wasmErrorsTarget = improveWASMErrorReporting(runtime);\n\t\tthis.dispatchEvent({\n\t\t\ttype: 'runtime.initialized',\n\t\t});\n\t}\n\n\t/** @inheritDoc */\n\tasync setSapiName(newName: string) {\n\t\tconst result = this[__private__dont__use].ccall(\n\t\t\t'wasm_set_sapi_name',\n\t\t\tNUMBER,\n\t\t\t[STRING],\n\t\t\t[newName]\n\t\t);\n\t\tif (result !== 0) {\n\t\t\tthrow new Error(\n\t\t\t\t'Could not set SAPI name. This can only be done before the PHP WASM module is initialized.' +\n\t\t\t\t\t'Did you already dispatch any requests?'\n\t\t\t);\n\t\t}\n\t\tthis.#sapiName = newName;\n\t}\n\n\t/**\n\t * Changes the current working directory in the PHP filesystem.\n\t * This is the directory that will be used as the base for relative paths.\n\t * For example, if the current working directory is `/root/php`, and the\n\t * path is `data`, the absolute path will be `/root/php/data`.\n\t *\n\t * @param  path - The new working directory.\n\t */\n\tchdir(path: string) {\n\t\tthis[__private__dont__use].FS.chdir(path);\n\t}\n\n\t/**\n\t * Do not use. Use new PHPRequestHandler() instead.\n\t * @deprecated\n\t */\n\tasync request(request: PHPRequest): Promise<PHPResponse> {\n\t\tlogger.warn(\n\t\t\t'PHP.request() is deprecated. Please use new PHPRequestHandler() instead.'\n\t\t);\n\t\tif (!this.requestHandler) {\n\t\t\tthrow new Error('No request handler available.');\n\t\t}\n\t\treturn this.requestHandler.request(request);\n\t}\n\n\t/**\n\t * Runs PHP code.\n\t *\n\t * This low-level method directly interacts with the WebAssembly\n\t * PHP interpreter.\n\t *\n\t * Every time you call run(), it prepares the PHP\n\t * environment and:\n\t *\n\t * * Resets the internal PHP state\n\t * * Populates superglobals ($_SERVER, $_GET, etc.)\n\t * * Handles file uploads\n\t * * Populates input streams (stdin, argv, etc.)\n\t * * Sets the current working directory\n\t *\n\t * You can use run() in two primary modes:\n\t *\n\t * ### Code snippet mode\n\t *\n\t * In this mode, you pass a string containing PHP code to run.\n\t *\n\t * ```ts\n\t * const result = await php.run({\n\t * \tcode: `<?php echo \"Hello world!\";`\n\t * });\n\t * // result.text === \"Hello world!\"\n\t * ```\n\t *\n\t * In this mode, information like __DIR__ or __FILE__ isn't very\n\t * useful because the code is not associated with any file.\n\t *\n\t * Under the hood, the PHP snippet is passed to the `zend_eval_string`\n\t * C function.\n\t *\n\t * ### File mode\n\t *\n\t * In the file mode, you pass a scriptPath and PHP executes a file\n\t * found at a that path:\n\t *\n\t * ```ts\n\t * php.writeFile(\n\t * \t\"/www/index.php\",\n\t * \t`<?php echo \"Hello world!\";\"`\n\t * );\n\t * const result = await php.run({\n\t * \tscriptPath: \"/www/index.php\"\n\t * });\n\t * // result.text === \"Hello world!\"\n\t * ```\n\t *\n\t * In this mode, you can rely on path-related information like __DIR__\n\t * or __FILE__.\n\t *\n\t * Under the hood, the PHP file is executed with the `php_execute_script`\n\t * C function.\n\t *\n\t * The `run()` method cannot be used in conjunction with `cli()`.\n\t *\n\t * @example\n\t * ```js\n\t * const result = await php.run({\n\t * \tcode: `<?php\n\t * \t\t$fp = fopen('php://stderr', 'w');\n\t * \t\tfwrite($fp, \"Hello, world!\");\n\t * \t`\n\t * });\n\t * // result.errors === \"Hello, world!\"\n\t * ```\n\t *\n\t * @deprecated Use stream() instead.\n\t * @param  request - PHP runtime options.\n\t */\n\tasync run(request: PHPRunOptions): Promise<PHPResponse> {\n\t\tconst streamedResponse = await this.runStream(request);\n\t\tconst syncResponse = await PHPResponse.fromStreamedResponse(\n\t\t\tstreamedResponse\n\t\t);\n\n\t\tif (syncResponse.exitCode !== 0) {\n\t\t\tlogger.warn(`PHP.run() output was:`, syncResponse.text);\n\t\t\tconst error = new PHPExecutionFailureError(\n\t\t\t\t`PHP.run() failed with exit code ${syncResponse.exitCode} and the following output: ` +\n\t\t\t\t\tsyncResponse.errors +\n\t\t\t\t\t'\\n\\n' +\n\t\t\t\t\tsyncResponse.text,\n\t\t\t\tsyncResponse,\n\t\t\t\t'request'\n\t\t\t) as PHPExecutionFailureError;\n\t\t\tlogger.error(error);\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'request.error',\n\t\t\t\terror: new Error(\n\t\t\t\t\t'PHP.run() failed with exit code ' + syncResponse.exitCode\n\t\t\t\t),\n\t\t\t\t// Distinguish between PHP request and PHP-wasm errors\n\t\t\t\tsource: 'request',\n\t\t\t});\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn syncResponse;\n\t}\n\t/**\n\t * Runs PHP code and returns a StreamedPHPResponse object that can be used to\n\t * process the output incrementally.\n\t *\n\t * This low-level method directly interacts with the WebAssembly\n\t * PHP interpreter and provides streaming capabilities for processing\n\t * PHP output as it becomes available.\n\t *\n\t * Every time you call stream(), it prepares the PHP\n\t * environment and:\n\t *\n\t * * Resets the internal PHP state\n\t * * Populates superglobals ($_SERVER, $_GET, etc.)\n\t * * Handles file uploads\n\t * * Populates input streams (stdin, argv, etc.)\n\t * * Sets the current working directory\n\t *\n\t * You can use stream() in two primary modes:\n\t *\n\t * ### Code snippet mode\n\t *\n\t * In this mode, you pass a string containing PHP code to run.\n\t *\n\t * ```ts\n\t * const streamedResponse = await php.stream({\n\t * \tcode: `<?php echo \"Hello world!\";`\n\t * });\n\t * // Process output incrementally\n\t * for await (const chunk of streamedResponse.text) {\n\t * \tconsole.log(chunk);\n\t * }\n\t * ```\n\t *\n\t * In this mode, information like __DIR__ or __FILE__ isn't very\n\t * useful because the code is not associated with any file.\n\t *\n\t * Under the hood, the PHP snippet is passed to the `zend_eval_string`\n\t * C function.\n\t *\n\t * ### File mode\n\t *\n\t * In the file mode, you pass a scriptPath and PHP executes a file\n\t * found at that path:\n\t *\n\t * ```ts\n\t * php.writeFile(\n\t * \t\"/www/index.php\",\n\t * \t`<?php echo \"Hello world!\";\"`\n\t * );\n\t * const streamedResponse = await php.stream({\n\t * \tscriptPath: \"/www/index.php\"\n\t * });\n\t * // Process output incrementally\n\t * for await (const chunk of streamedResponse.text) {\n\t * \tconsole.log(chunk);\n\t * }\n\t * ```\n\t *\n\t * In this mode, you can rely on path-related information like __DIR__\n\t * or __FILE__.\n\t *\n\t * Under the hood, the PHP file is executed with the `php_execute_script`\n\t * C function.\n\t *\n\t * The `stream()` method cannot be used in conjunction with `cli()`.\n\t *\n\t * @example\n\t * ```js\n\t * const streamedResponse = await php.stream({\n\t * \tcode: `<?php\n\t * \t\tfor ($i = 0; $i < 5; $i++) {\n\t * \t\t\techo \"Line $i\\n\";\n\t * \t\t\tflush();\n\t * \t\t}\n\t * \t`\n\t * });\n\t *\n\t * // Process output as it becomes available\n\t * for await (const chunk of streamedResponse.text) {\n\t * \tconsole.log('Received:', chunk);\n\t * }\n\t *\n\t * // Get the final exit code\n\t * const exitCode = await streamedResponse.exitCode;\n\t * console.log('Exit code:', exitCode);\n\t * ```\n\t *\n\t * @see run() – a synchronous version of this method.\n\t * @param request - PHP runtime options.\n\t * @returns A StreamedPHPResponse object.\n\t */\n\tasync runStream(request: PHPRunOptions): Promise<StreamedPHPResponse> {\n\t\t/*\n\t\t * Prevent multiple requests from running at the same time.\n\t\t * For example, if a request is made to a PHP file that\n\t\t * requests another PHP file, the second request may\n\t\t * be dispatched before the first one is finished.\n\t\t */\n\t\tconst release = await this.semaphore.acquire();\n\t\tlet heapBodyPointer: number | undefined;\n\t\tconst streamedResponsePromise = this.#executeWithErrorHandling(() => {\n\t\t\tif (!this.#webSapiInitialized) {\n\t\t\t\tthis.#initWebRuntime();\n\t\t\t\tthis.#webSapiInitialized = true;\n\t\t\t}\n\t\t\tif (request.scriptPath && !this.fileExists(request.scriptPath)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`The script path \"${request.scriptPath}\" does not exist.`\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.#setRelativeRequestUri(request.relativeUri || '');\n\t\t\tthis.#setRequestMethod(request.method || 'GET');\n\t\t\tconst requestHeaders = normalizeHeaders(request.headers || {});\n\t\t\tconst host = requestHeaders['host'] || 'example.com:443';\n\n\t\t\tconst port = this.#inferPortFromHostAndProtocol(\n\t\t\t\thost,\n\t\t\t\trequest.protocol || 'http'\n\t\t\t);\n\t\t\tthis.#setRequestHost(host);\n\t\t\tthis.#setRequestPort(port);\n\t\t\tthis.#setRequestHeaders(requestHeaders);\n\t\t\tif (request.body) {\n\t\t\t\theapBodyPointer = this.#setRequestBody(request.body);\n\t\t\t}\n\t\t\tif (typeof request.code === 'string') {\n\t\t\t\tthis.writeFile('/internal/eval.php', request.code);\n\t\t\t\tthis.#setScriptPath('/internal/eval.php');\n\t\t\t} else if (typeof request.scriptPath === 'string') {\n\t\t\t\tthis.#setScriptPath(request.scriptPath || '');\n\t\t\t} else {\n\t\t\t\tthrow new TypeError(\n\t\t\t\t\t'The request object must have either a `code` or a ' +\n\t\t\t\t\t\t'`scriptPath` property.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst $_SERVER = this.#prepareServerEntries(\n\t\t\t\trequest.$_SERVER,\n\t\t\t\trequestHeaders,\n\t\t\t\tport\n\t\t\t);\n\t\t\tfor (const key in $_SERVER) {\n\t\t\t\tthis.#setServerGlobalEntry(key, $_SERVER[key]);\n\t\t\t}\n\n\t\t\tconst env = request.env || {};\n\t\t\tfor (const key in env) {\n\t\t\t\tthis.#setEnv(key, env[key]);\n\t\t\t}\n\n\t\t\tif (!this.#webSapiInitialized) {\n\t\t\t\tthis.#initWebRuntime();\n\t\t\t\tthis.#webSapiInitialized = true;\n\t\t\t}\n\n\t\t\treturn this[__private__dont__use].ccall(\n\t\t\t\t'wasm_sapi_handle_request',\n\t\t\t\tNUMBER,\n\t\t\t\t[],\n\t\t\t\t[],\n\t\t\t\t{ async: true }\n\t\t\t);\n\t\t});\n\n\t\t// Free up resources when the response is done\n\t\tawait streamedResponsePromise\n\t\t\t.catch((error) => {\n\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\ttype: 'request.error',\n\t\t\t\t\terror: error as Error,\n\t\t\t\t\t// Distinguish between PHP request and PHP-wasm errors\n\t\t\t\t\tsource: (error as any).source ?? 'php-wasm',\n\t\t\t\t});\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tif (heapBodyPointer) {\n\t\t\t\t\tthis[__private__dont__use].free(heapBodyPointer);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\trelease();\n\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\ttype: 'request.end',\n\t\t\t\t});\n\t\t\t});\n\t\treturn streamedResponsePromise;\n\t}\n\n\t/**\n\t * Prepares the $_SERVER entries for the PHP runtime.\n\t *\n\t * @param defaults Default entries to include in $_SERVER.\n\t * @param headers HTTP headers to include in $_SERVER (as HTTP_ prefixed entries).\n\t * @param port HTTP port, used to determine infer $_SERVER['HTTPS'] value if none\n\t *             was provided.\n\t * @returns Computed $_SERVER entries.\n\t */\n\t#prepareServerEntries(\n\t\tdefaults: Record<string, string> | undefined,\n\t\theaders: PHPRequestHeaders,\n\t\tport: number\n\t): Record<string, string> {\n\t\tconst $_SERVER = {\n\t\t\t...(defaults || {}),\n\t\t};\n\t\t$_SERVER['HTTPS'] = $_SERVER['HTTPS'] || port === 443 ? 'on' : 'off';\n\t\tfor (const name in headers) {\n\t\t\tlet HTTP_prefix = 'HTTP_';\n\t\t\t/**\n\t\t\t * Some headers are special and don't have the HTTP_ prefix.\n\t\t\t */\n\t\t\tif (\n\t\t\t\t['content-type', 'content-length'].includes(name.toLowerCase())\n\t\t\t) {\n\t\t\t\tHTTP_prefix = '';\n\t\t\t}\n\t\t\t$_SERVER[`${HTTP_prefix}${name.toUpperCase().replace(/-/g, '_')}`] =\n\t\t\t\theaders[name];\n\t\t}\n\t\treturn $_SERVER;\n\t}\n\n\t#initWebRuntime() {\n\t\tthis[__private__dont__use].ccall('php_wasm_init', null, [], []);\n\t}\n\n\t#setRelativeRequestUri(uri: string) {\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_set_request_uri',\n\t\t\tnull,\n\t\t\t[STRING],\n\t\t\t[uri]\n\t\t);\n\t\tlet queryString = '';\n\t\tif (uri.includes('?')) {\n\t\t\tqueryString = uri.substring(uri.indexOf('?') + 1);\n\t\t}\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_set_query_string',\n\t\t\tnull,\n\t\t\t[STRING],\n\t\t\t[queryString]\n\t\t);\n\t}\n\n\t#setRequestHost(host: string) {\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_set_request_host',\n\t\t\tnull,\n\t\t\t[STRING],\n\t\t\t[host]\n\t\t);\n\t}\n\n\t#setRequestPort(port: number) {\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_set_request_port',\n\t\t\tnull,\n\t\t\t[NUMBER],\n\t\t\t[port]\n\t\t);\n\t}\n\n\t#inferPortFromHostAndProtocol(host: string, protocol: string) {\n\t\tlet port;\n\t\ttry {\n\t\t\tport = parseInt(new URL(host).port, 10);\n\t\t} catch {\n\t\t\t// ignore\n\t\t}\n\n\t\tif (!port || isNaN(port) || port === 80) {\n\t\t\tport = protocol === 'https' ? 443 : 80;\n\t\t}\n\t\treturn port;\n\t}\n\n\t#setRequestMethod(method: string) {\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_set_request_method',\n\t\t\tnull,\n\t\t\t[STRING],\n\t\t\t[method]\n\t\t);\n\t}\n\n\t#setRequestHeaders(headers: PHPRequestHeaders) {\n\t\tif (headers['cookie']) {\n\t\t\tthis[__private__dont__use].ccall(\n\t\t\t\t'wasm_set_cookies',\n\t\t\t\tnull,\n\t\t\t\t[STRING],\n\t\t\t\t[headers['cookie']]\n\t\t\t);\n\t\t}\n\t\tif (headers['content-type']) {\n\t\t\tthis[__private__dont__use].ccall(\n\t\t\t\t'wasm_set_content_type',\n\t\t\t\tnull,\n\t\t\t\t[STRING],\n\t\t\t\t[headers['content-type']]\n\t\t\t);\n\t\t}\n\t\tif (headers['content-length']) {\n\t\t\tthis[__private__dont__use].ccall(\n\t\t\t\t'wasm_set_content_length',\n\t\t\t\tnull,\n\t\t\t\t[NUMBER],\n\t\t\t\t[parseInt(headers['content-length'], 10)]\n\t\t\t);\n\t\t}\n\t}\n\n\t#setRequestBody(body: string | Uint8Array) {\n\t\tlet size, contentLength;\n\t\tif (typeof body === 'string') {\n\t\t\tlogger.warn(\n\t\t\t\t'Passing a string as the request body is deprecated. Please use a Uint8Array instead. See ' +\n\t\t\t\t\t'https://github.com/WordPress/wordpress-playground/issues/997 for more details'\n\t\t\t);\n\t\t\tcontentLength = this[__private__dont__use].lengthBytesUTF8(body);\n\t\t\tsize = contentLength + 1;\n\t\t} else {\n\t\t\tcontentLength = body.byteLength;\n\t\t\tsize = body.byteLength;\n\t\t}\n\n\t\tconst heapBodyPointer = this[__private__dont__use].malloc(size);\n\t\tif (!heapBodyPointer) {\n\t\t\tthrow new Error('Could not allocate memory for the request body.');\n\t\t}\n\n\t\t// Write the string to the WASM memory\n\t\tif (typeof body === 'string') {\n\t\t\tthis[__private__dont__use].stringToUTF8(\n\t\t\t\tbody,\n\t\t\t\theapBodyPointer,\n\t\t\t\tsize + 1\n\t\t\t);\n\t\t} else {\n\t\t\tthis[__private__dont__use].HEAPU8.set(body, heapBodyPointer);\n\t\t}\n\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_set_request_body',\n\t\t\tnull,\n\t\t\t[NUMBER],\n\t\t\t[heapBodyPointer]\n\t\t);\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_set_content_length',\n\t\t\tnull,\n\t\t\t[NUMBER],\n\t\t\t[contentLength]\n\t\t);\n\t\treturn heapBodyPointer;\n\t}\n\n\t#setScriptPath(path: string) {\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_set_path_translated',\n\t\t\tnull,\n\t\t\t[STRING],\n\t\t\t[path]\n\t\t);\n\t}\n\n\t#setServerGlobalEntry(key: string, value: string) {\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_add_SERVER_entry',\n\t\t\tnull,\n\t\t\t[STRING, STRING],\n\t\t\t[key, value]\n\t\t);\n\t}\n\n\t#setEnv(name: string, value: string) {\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_add_ENV_entry',\n\t\t\tnull,\n\t\t\t[STRING, STRING],\n\t\t\t[name, value]\n\t\t);\n\t}\n\n\t/**\n\t * Defines a constant in the PHP runtime.\n\t * @param key - The name of the constant.\n\t * @param value - The value of the constant.\n\t */\n\tdefineConstant(key: string, value: string | boolean | number | null) {\n\t\tlet consts = {};\n\t\ttry {\n\t\t\tconsts = JSON.parse(\n\t\t\t\tthis.fileExists('/internal/shared/consts.json')\n\t\t\t\t\t? this.readFileAsText('/internal/shared/consts.json') ||\n\t\t\t\t\t\t\t'{}'\n\t\t\t\t\t: '{}'\n\t\t\t);\n\t\t} catch {\n\t\t\t// ignore\n\t\t}\n\t\tthis.writeFile(\n\t\t\t'/internal/shared/consts.json',\n\t\t\tJSON.stringify({\n\t\t\t\t...consts,\n\t\t\t\t[key]: value,\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Executes a PHP runtime function with proper error handling and streaming setup.\n\t * Sets up streaming infrastructure and returns a StreamedPHPResponse.\n\t *\n\t * @param executionFn - Function that returns the exit code or a promise of exit code\n\t * @returns Promise that resolves to a StreamedPHPResponse\n\t */\n\tasync #executeWithErrorHandling(\n\t\texecutionFn: () => any\n\t): Promise<StreamedPHPResponse> {\n\t\tconst emscriptenModule = this[__private__dont__use];\n\n\t\tconst headers = await createInvertedReadableStream<Uint8Array>();\n\t\temscriptenModule.onHeaders = (chunk: Uint8Array) => {\n\t\t\tif (streamsClosed || headersClosed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// slice() chunk to clone the data and preserve it for the reader later on.\n\t\t\t// We need that because the ArrayBuffer underlying `chunk` may change\n\t\t\t// after this callback return. Without cloning, the reader would read\n\t\t\t// whatever bytes are available in the ArrayBuffer at the time of the read.\n\t\t\theaders.controller.enqueue(chunk.slice());\n\t\t};\n\t\tlet headersClosed = false;\n\t\tconst closeHeadersStream = () => {\n\t\t\tif (!headersClosed) {\n\t\t\t\theadersClosed = true;\n\t\t\t\theaders.controller.close();\n\t\t\t}\n\t\t};\n\n\t\tconst stdout = await createInvertedReadableStream<Uint8Array>();\n\t\temscriptenModule.onStdout = (chunk: Uint8Array) => {\n\t\t\tcloseHeadersStream();\n\t\t\tif (streamsClosed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstdout.controller.enqueue(chunk.slice());\n\t\t};\n\n\t\tconst stderr = await createInvertedReadableStream<Uint8Array>();\n\t\temscriptenModule.onStderr = (chunk: Uint8Array) => {\n\t\t\tif (streamsClosed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstderr.controller.enqueue(chunk.slice());\n\t\t};\n\n\t\tlet streamsClosed = false;\n\n\t\tlet errorListener: any;\n\n\t\tconst runExecutionFunction = async () => {\n\t\t\ttry {\n\t\t\t\t/*\n\t\t\t\t * Emscripten throws WASM failures outside of the promise chain so we need\n\t\t\t\t * to listen for them here and rethrow in the correct context. Otherwise we\n\t\t\t\t * get crashes and unhandled promise rejections without any useful error\n\t\t\t\t * messages or meaningful stack traces.\n\t\t\t\t */\n\t\t\t\tconst exit = await Promise.race([\n\t\t\t\t\texecutionFn(),\n\t\t\t\t\tnew Promise((_, reject) => {\n\t\t\t\t\t\terrorListener = (e: ErrorEvent) => {\n\t\t\t\t\t\t\tlogger.error(e);\n\t\t\t\t\t\t\tlogger.error(e.error);\n\t\t\t\t\t\t\tif (!isExitCode(e.error)) {\n\t\t\t\t\t\t\t\tconst rethrown = new Error('Rethrown');\n\t\t\t\t\t\t\t\trethrown.cause = e.error;\n\t\t\t\t\t\t\t\t(rethrown as any).betterMessage = e.message;\n\t\t\t\t\t\t\t\treject(rethrown);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.#wasmErrorsTarget?.addEventListener(\n\t\t\t\t\t\t\t'error',\n\t\t\t\t\t\t\terrorListener,\n\t\t\t\t\t\t\t{ once: true }\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t]);\n\t\t\t\treturn exit;\n\t\t\t} catch (e) {\n\t\t\t\t/**\n\t\t\t\t * Emscripten sometimes communicates program exit as an error. Let's\n\t\t\t\t * turn exit code errors into integers again.\n\t\t\t\t */\n\t\t\t\tif (isExitCode(e)) {\n\t\t\t\t\treturn e.exitCode;\n\t\t\t\t}\n\n\t\t\t\tstdout.controller.error(e);\n\t\t\t\tstderr.controller.error(e);\n\t\t\t\theaders.controller.error(e);\n\t\t\t\tstreamsClosed = true;\n\n\t\t\t\t/**\n\t\t\t\t * A non-exit-code error means an irrecoverable crash. Let's make\n\t\t\t\t * it very clear to the consumers of this API – every method\n\t\t\t\t * call on this PHP instance will throw an error from now on.\n\t\t\t\t */\n\t\t\t\tfor (const name in this) {\n\t\t\t\t\tif (typeof this[name] === 'function') {\n\t\t\t\t\t\t(this as any)[name] = () => {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`PHP runtime has crashed – see the earlier error for details.`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t(this as any).functionsMaybeMissingFromAsyncify =\n\t\t\t\t\tgetFunctionsMaybeMissingFromAsyncify();\n\n\t\t\t\tconst err = e as Error;\n\t\t\t\tconst message = (\n\t\t\t\t\t'betterMessage' in err ? err.betterMessage : err.message\n\t\t\t\t) as string;\n\n\t\t\t\tconst rethrown = new Error(message);\n\t\t\t\trethrown.cause = err;\n\t\t\t\tlogger.error(rethrown);\n\t\t\t\tthrow rethrown;\n\t\t\t} finally {\n\t\t\t\tif (!streamsClosed) {\n\t\t\t\t\tstdout.controller.close();\n\t\t\t\t\tstderr.controller.close();\n\t\t\t\t\tcloseHeadersStream();\n\t\t\t\t\tstreamsClosed = true;\n\t\t\t\t}\n\t\t\t\tthis.#wasmErrorsTarget?.removeEventListener(\n\t\t\t\t\t'error',\n\t\t\t\t\terrorListener\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\tconst exitCodePromise = runExecutionFunction();\n\n\t\treturn new StreamedPHPResponse(\n\t\t\theaders.stream,\n\t\t\tstdout.stream,\n\t\t\tstderr.stream,\n\t\t\texitCodePromise\n\t\t);\n\t}\n\n\t/**\n\t * Recursively creates a directory with the given path in the PHP filesystem.\n\t * For example, if the path is `/root/php/data`, and `/root` already exists,\n\t * it will create the directories `/root/php` and `/root/php/data`.\n\t *\n\t * @param  path - The directory path to create.\n\t */\n\tmkdir(path: string) {\n\t\treturn FSHelpers.mkdir(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * @deprecated Use mkdir instead.\n\t */\n\tmkdirTree(path: string) {\n\t\treturn FSHelpers.mkdir(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * Reads a file from the PHP filesystem and returns it as a string.\n\t *\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the file doesn't exist.\n\t * @param  path - The file path to read.\n\t * @returns The file contents.\n\t */\n\treadFileAsText(path: string) {\n\t\treturn FSHelpers.readFileAsText(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * Reads a file from the PHP filesystem and returns it as an array buffer.\n\t *\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the file doesn't exist.\n\t * @param  path - The file path to read.\n\t * @returns The file contents.\n\t */\n\treadFileAsBuffer(path: string): Uint8Array {\n\t\treturn FSHelpers.readFileAsBuffer(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * Overwrites data in a file in the PHP filesystem.\n\t * Creates a new file if one doesn't exist yet.\n\t *\n\t * @param  path - The file path to write to.\n\t * @param  data - The data to write to the file.\n\t */\n\twriteFile(path: string, data: string | Uint8Array) {\n\t\treturn FSHelpers.writeFile(this[__private__dont__use].FS, path, data);\n\t}\n\n\t/**\n\t * Removes a file from the PHP filesystem.\n\t *\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the file doesn't exist.\n\t * @param  path - The file path to remove.\n\t */\n\tunlink(path: string) {\n\t\treturn FSHelpers.unlink(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * Moves a file or directory in the PHP filesystem to a\n\t * new location.\n\t *\n\t * @param oldPath The path to rename.\n\t * @param newPath The new path.\n\t */\n\tmv(fromPath: string, toPath: string) {\n\t\treturn FSHelpers.mv(this[__private__dont__use].FS, fromPath, toPath);\n\t}\n\n\t/**\n\t * Removes a directory from the PHP filesystem.\n\t *\n\t * @param path The directory path to remove.\n\t * @param options Options for the removal.\n\t */\n\trmdir(path: string, options: RmDirOptions = { recursive: true }) {\n\t\treturn FSHelpers.rmdir(this[__private__dont__use].FS, path, options);\n\t}\n\n\t/**\n\t * Lists the files and directories in the given directory.\n\t *\n\t * @param  path - The directory path to list.\n\t * @param  options - Options for the listing.\n\t * @returns The list of files and directories in the given directory.\n\t */\n\tlistFiles(\n\t\tpath: string,\n\t\toptions: ListFilesOptions = { prependPath: false }\n\t) {\n\t\treturn FSHelpers.listFiles(\n\t\t\tthis[__private__dont__use].FS,\n\t\t\tpath,\n\t\t\toptions\n\t\t);\n\t}\n\n\t/**\n\t * Checks if a directory exists in the PHP filesystem.\n\t *\n\t * @param  path – The path to check.\n\t * @returns True if the path is a directory, false otherwise.\n\t */\n\tisDir(path: string) {\n\t\treturn FSHelpers.isDir(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * Checks if a file exists in the PHP filesystem.\n\t *\n\t * @param  path – The path to check.\n\t * @returns True if the path is a file, false otherwise.\n\t */\n\tisFile(path: string) {\n\t\treturn FSHelpers.isFile(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * Creates a symlink in the PHP filesystem.\n\t * @param target\n\t * @param path\n\t */\n\tsymlink(target: string, path: string) {\n\t\treturn FSHelpers.symlink(this[__private__dont__use].FS, target, path);\n\t}\n\n\t/**\n\t * Checks if a path is a symlink in the PHP filesystem.\n\t *\n\t * @param path\n\t * @returns True if the path is a symlink, false otherwise.\n\t */\n\tisSymlink(path: string) {\n\t\treturn FSHelpers.isSymlink(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * Reads the target of a symlink in the PHP filesystem.\n\t *\n\t * @param path\n\t * @returns The target of the symlink.\n\t */\n\treadlink(path: string) {\n\t\treturn FSHelpers.readlink(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * Resolves the real path of a file in the PHP filesystem.\n\t * @param path\n\t * @returns The real path of the file.\n\t */\n\trealpath(path: string) {\n\t\treturn FSHelpers.realpath(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * Checks if a file (or a directory) exists in the PHP filesystem.\n\t *\n\t * @param  path - The file path to check.\n\t * @returns True if the file exists, false otherwise.\n\t */\n\tfileExists(path: string) {\n\t\treturn FSHelpers.fileExists(this[__private__dont__use].FS, path);\n\t}\n\n\t/**\n\t * Hot-swaps the PHP runtime for a new one without\n\t * interrupting the operations of this PHP instance.\n\t *\n\t * @param runtime\n\t * @param cwd. Internal, the VFS path to recreate in the new runtime.\n\t *             This arg is temporary and will be removed once BasePHP\n\t *             is fully decoupled from the request handler and\n\t *             accepts a constructor-level cwd argument.\n\t */\n\tasync hotSwapPHPRuntime(runtime: number, cwd?: string) {\n\t\t// Once we secure the lock and have the new runtime ready,\n\t\t// the rest of the swap handler is synchronous to make sure\n\t\t// no other operations acts on the old runtime or FS.\n\t\t// If there was await anywhere here, we'd risk applyng\n\t\t// asynchronous changes to either the filesystem or the\n\t\t// old PHP runtime without propagating them to the new\n\t\t// runtime.\n\n\t\tconst oldFS = this[__private__dont__use].FS;\n\n\t\t// Unmount all the mount handlers\n\t\tconst mountHandlers: { mountHandler: MountHandler; vfsPath: string }[] =\n\t\t\t[];\n\t\tfor (const [vfsPath, mount] of Object.entries(this.#mounts)) {\n\t\t\tmountHandlers.push({ mountHandler: mount.mountHandler, vfsPath });\n\t\t\tawait mount.unmount();\n\t\t}\n\n\t\t// Kill the current runtime\n\t\ttry {\n\t\t\tthis.exit();\n\t\t} catch {\n\t\t\t// Ignore the exit-related exception\n\t\t}\n\n\t\t// Initialize the new runtime\n\t\tthis.initializeRuntime(runtime);\n\n\t\tif (this.#sapiName) {\n\t\t\tthis.setSapiName(this.#sapiName);\n\t\t}\n\n\t\t// Copy the old /internal directory to the new filesystem\n\t\tcopyFS(oldFS, this[__private__dont__use].FS, '/internal');\n\n\t\t// Copy the MEMFS directory structure from the old FS to the new one\n\t\tif (cwd) {\n\t\t\tcopyFS(oldFS, this[__private__dont__use].FS, cwd);\n\t\t}\n\n\t\t// Re-mount all the mount handlers\n\t\tfor (const { mountHandler, vfsPath } of mountHandlers) {\n\t\t\tthis.mkdir(vfsPath);\n\t\t\tawait this.mount(vfsPath, mountHandler);\n\t\t}\n\t}\n\n\t/**\n\t * Mounts a filesystem to a given path in the PHP filesystem.\n\t *\n\t * @param  virtualFSPath - Where to mount it in the PHP virtual filesystem.\n\t * @param  mountHandler - The mount handler to use.\n\t * @return Unmount function to unmount the filesystem.\n\t */\n\tasync mount(\n\t\tvirtualFSPath: string,\n\t\tmountHandler: MountHandler\n\t): Promise<UnmountFunction> {\n\t\tconst unmountCallback = await mountHandler(\n\t\t\tthis,\n\t\t\tthis[__private__dont__use].FS,\n\t\t\tvirtualFSPath\n\t\t);\n\t\tconst mountObject = {\n\t\t\tmountHandler,\n\t\t\tunmount: async () => {\n\t\t\t\tawait unmountCallback();\n\t\t\t\tdelete this.#mounts[virtualFSPath];\n\t\t\t},\n\t\t};\n\t\tthis.#mounts[virtualFSPath] = mountObject;\n\t\treturn () => {\n\t\t\tmountObject.unmount();\n\t\t};\n\t}\n\n\t/**\n\t * Starts a PHP CLI session with given arguments.\n\t *\n\t * This method can only be used when PHP was compiled with the CLI SAPI\n\t * and it cannot be used in conjunction with `run()`.\n\t *\n\t * Once this method finishes running, the PHP instance is no\n\t * longer usable and should be discarded. This is because PHP\n\t * internally cleans up all the resources and calls exit().\n\t *\n\t * @param  argv - The arguments to pass to the CLI.\n\t * @returns The exit code of the CLI session.\n\t */\n\tasync cli(\n\t\targv: string[],\n\t\toptions: { env?: Record<string, string> } = {}\n\t): Promise<StreamedPHPResponse> {\n\t\tconst release = await this.semaphore.acquire();\n\n\t\tconst env = options.env || {};\n\t\tfor (const [key, value] of Object.entries(env)) {\n\t\t\tthis.#setEnv(key, value);\n\t\t}\n\t\t// Enforce the use of the internal php.ini file.\n\t\targv = [argv[0], '-c', PHP_INI_PATH, ...argv.slice(1)];\n\t\tfor (const arg of argv) {\n\t\t\tthis[__private__dont__use].ccall(\n\t\t\t\t'wasm_add_cli_arg',\n\t\t\t\tnull,\n\t\t\t\t[STRING],\n\t\t\t\t[arg]\n\t\t\t);\n\t\t}\n\n\t\treturn await this.#executeWithErrorHandling(() => {\n\t\t\treturn this[__private__dont__use].ccall('run_cli', null, [], [], {\n\t\t\t\tasync: true,\n\t\t\t});\n\t\t}).then((response) => {\n\t\t\tresponse.exitCode.finally(release);\n\t\t\treturn response;\n\t\t});\n\t}\n\n\tsetSkipShebang(shouldSkip: boolean) {\n\t\tthis[__private__dont__use].ccall(\n\t\t\t'wasm_set_skip_shebang',\n\t\t\tnull,\n\t\t\t[NUMBER],\n\t\t\t[shouldSkip ? 1 : 0]\n\t\t);\n\t}\n\n\texit(code = 0) {\n\t\tthis.dispatchEvent({\n\t\t\ttype: 'runtime.beforedestroy',\n\t\t});\n\t\ttry {\n\t\t\tthis[__private__dont__use]._exit(code);\n\t\t} catch {\n\t\t\t// ignore the exit error\n\t\t}\n\n\t\t// Clean up any initialized state\n\t\tthis.#webSapiInitialized = false;\n\n\t\t// Delete any links between this PHP instance and the runtime\n\t\tthis.#wasmErrorsTarget = null;\n\n\t\tif (this[__private__dont__use]) {\n\t\t\tdelete this[__private__dont__use]['onMessage'];\n\t\t\tdelete this[__private__dont__use];\n\t\t}\n\t}\n\n\t[Symbol.dispose]() {\n\t\tif (this.#webSapiInitialized) {\n\t\t\tthis.exit(0);\n\t\t}\n\t}\n}\n\nexport function normalizeHeaders(\n\theaders: PHPRequestHeaders\n): PHPRequestHeaders {\n\tconst normalized: PHPRequestHeaders = {};\n\tfor (const key in headers) {\n\t\tnormalized[key.toLowerCase()] = headers[key];\n\t}\n\treturn normalized;\n}\n\n/**\n * Copies the MEMFS directory structure from one FS in another FS.\n * Non-MEMFS nodes are ignored.\n */\nfunction copyFS(\n\tsource: Emscripten.FileSystemInstance,\n\ttarget: Emscripten.FileSystemInstance,\n\tpath: string\n) {\n\tlet oldNode;\n\ttry {\n\t\toldNode = source.lookupPath(path);\n\t} catch {\n\t\treturn;\n\t}\n\t// MEMFS nodes have a `contents` property. NODEFS nodes don't.\n\t// We only want to copy MEMFS nodes here.\n\tif (!('contents' in oldNode.node)) {\n\t\treturn;\n\t}\n\n\t// Let's be extra careful and only proceed if newFs doesn't\n\t// already have a node at the given path.\n\ttry {\n\t\t// @TODO: Figure out the right thing to do. In Parent -> child PHP case,\n\t\t//        we indeed want to synchronize the entire filesystem. However,\n\t\t//        this approach seems slow and inefficient. Instead of exhaustively\n\t\t//        iterating, could we just mark directories as dirty on write? And\n\t\t//        how do we sync in both directions?\n\t\t// target = target.lookupPath(path);\n\t\t// return;\n\t} catch {\n\t\t// There's no such node in the new FS. Good,\n\t\t// we may proceed.\n\t}\n\n\tif (!source.isDir(oldNode.node.mode)) {\n\t\ttarget.writeFile(path, source.readFile(path));\n\t\treturn;\n\t}\n\n\ttarget.mkdirTree(path);\n\tconst filenames = source\n\t\t.readdir(path)\n\t\t.filter((name: string) => name !== '.' && name !== '..');\n\tfor (const filename of filenames) {\n\t\tcopyFS(source, target, joinPaths(path, filename));\n\t}\n}\nasync function createInvertedReadableStream<T = BufferSource>(\n\tsource: UnderlyingSource<T> = {}\n) {\n\tlet controllerResolve: (\n\t\tcontroller: ReadableStreamDefaultController<T>\n\t) => void;\n\tconst controllerPromise = new Promise<ReadableStreamDefaultController<T>>(\n\t\t(resolve) => {\n\t\t\tcontrollerResolve = resolve;\n\t\t}\n\t);\n\n\tconst stream = new ReadableStream<T>({\n\t\t...source,\n\t\tstart(controller) {\n\t\t\t// Type assertion to handle the controller type mismatch\n\t\t\tcontrollerResolve(controller as ReadableStreamDefaultController<T>);\n\t\t\tif (source.start) {\n\t\t\t\treturn source.start(controller);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\t});\n\n\tconst controller = await controllerPromise;\n\n\treturn {\n\t\tstream,\n\t\tcontroller,\n\t};\n}\n","import { PHP_INI_PATH } from './php';\nimport type { UniversalPHP } from './universal-php';\nimport { stringify, parse } from 'ini';\n\n/**\n * Reads the php.ini file and returns its entries.\n *\n * @param php The PHP instance.\n * @param entries Optional. If provided, only the specified entries will be returned.\n * @returns The php.ini entries.\n */\nexport async function getPhpIniEntries(php: UniversalPHP, entries?: string[]) {\n\tconst ini = parse(await php.readFileAsText(PHP_INI_PATH));\n\tif (entries === undefined) {\n\t\treturn ini;\n\t}\n\tconst result: Record<string, unknown> = {};\n\tfor (const key of entries) {\n\t\tresult[key] = ini[key];\n\t}\n\treturn result;\n}\n\n/**\n * Rewrites the php.ini file with the given entries.\n *\n * @param php The PHP instance.\n * @param entries The entries to write to the php.ini file.\n */\nexport async function setPhpIniEntries(\n\tphp: UniversalPHP,\n\tentries: Record<string, unknown>\n) {\n\tconst ini = parse(await php.readFileAsText(PHP_INI_PATH));\n\tfor (const [key, value] of Object.entries(entries)) {\n\t\tif (value === undefined || value === null) {\n\t\t\tdelete ini[key];\n\t\t} else {\n\t\t\tini[key] = value;\n\t\t}\n\t}\n\tawait php.writeFile(PHP_INI_PATH, stringify(ini));\n}\n\n/**\n * Sets php.ini values to the given values, executes a callback,\n * and restores the original php.ini values. This is useful for\n * running code with temporary php.ini values, such as when\n * disabling network-related PHP functions just to run WordPress\n * installer.\n *\n * @example\n * ```ts\n *\tawait withPHPIniValues(\n *\t\tphp,\n *\t\t{\n *\t\t\tdisable_functions: 'fsockopen',\n *\t\t\tallow_url_fopen: '0',\n *\t\t},\n *\t\tasync () => await runWpInstallationWizard(php, {\n *\t\t\toptions: {},\n *\t\t})\n *\t);\n *\t```\n *\n * @param php The PHP instance.\n * @param phpIniValues The php.ini values to set.\n * @param callback The callback to execute.\n * @returns The result of the callback.\n */\nexport async function withPHPIniValues(\n\tphp: UniversalPHP,\n\tphpIniValues: Record<string, string>,\n\tcallback: () => Promise<any>\n) {\n\tconst iniBefore = await php.readFileAsText(PHP_INI_PATH);\n\ttry {\n\t\tawait setPhpIniEntries(php, phpIniValues);\n\t\treturn await callback();\n\t} finally {\n\t\tawait php.writeFile(PHP_INI_PATH, iniBefore);\n\t}\n}\n","import { logger } from '@php-wasm/logger';\nimport type { CookieStore } from './php-request-handler';\n/**\n * @public\n */\nexport class HttpCookieStore implements CookieStore {\n\tcookies: Record<string, string> = {};\n\n\trememberCookiesFromResponseHeaders(headers: Record<string, string[]>) {\n\t\tif (!headers?.['set-cookie']) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const setCookie of headers['set-cookie']) {\n\t\t\ttry {\n\t\t\t\tif (!setCookie.includes('=')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst equalsIndex = setCookie.indexOf('=');\n\t\t\t\tconst name = setCookie.substring(0, equalsIndex);\n\t\t\t\tconst value = setCookie\n\t\t\t\t\t.substring(equalsIndex + 1)\n\t\t\t\t\t.split(';')[0];\n\t\t\t\tthis.cookies[name] = value;\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCookieRequestHeader() {\n\t\tconst cookiesArray: string[] = [];\n\t\tfor (const name in this.cookies) {\n\t\t\tcookiesArray.push(`${name}=${this.cookies[name]}`);\n\t\t}\n\t\treturn cookiesArray.join('; ');\n\t}\n}\n","import type { UniversalPHP } from './universal-php';\n\n/**\n * Reads a file from PHP filesystem using a stream.\n */\nexport function streamReadFileFromPHP(php: UniversalPHP, path: string) {\n\treturn new ReadableStream({\n\t\tasync pull(controller) {\n\t\t\tconst buffer = await php.readFileAsBuffer(path);\n\t\t\tcontroller.enqueue(buffer);\n\t\t\tcontroller.close();\n\t\t},\n\t});\n}\n","import { joinPaths, normalizePath } from '@php-wasm/util';\nimport { StreamedFile } from '@php-wasm/stream-compression';\nimport type { UniversalPHP } from './universal-php';\nimport { streamReadFileFromPHP } from './stream-read-file-from-php';\n\nexport type IteratePhpFilesOptions = {\n\t/**\n\t * Should yield paths relative to the root directory?\n\t * If false, all paths will be absolute.\n\t */\n\trelativePaths?: boolean;\n\n\t/**\n\t * A prefix to add to all paths.\n\t * Only used if `relativePaths` is true.\n\t */\n\tpathPrefix?: string;\n\n\t/**\n\t * A list of paths to exclude from the results.\n\t */\n\texceptPaths?: string[];\n};\n\n/**\n * Iterates over all files in a php directory and its subdirectories.\n *\n * @param php - The PHP instance.\n * @param root - The root directory to start iterating from.\n * @param options - Optional configuration.\n * @returns All files found in the tree.\n */\nexport async function* iteratePhpFiles(\n\tphp: UniversalPHP,\n\troot: string,\n\t{\n\t\trelativePaths = true,\n\t\tpathPrefix,\n\t\texceptPaths = [],\n\t}: IteratePhpFilesOptions = {}\n): AsyncGenerator<File> {\n\troot = normalizePath(root);\n\tconst stack: string[] = [root];\n\twhile (stack.length) {\n\t\tconst currentParent = stack.pop();\n\t\tif (!currentParent) {\n\t\t\treturn;\n\t\t}\n\t\tconst files = await php.listFiles(currentParent);\n\t\tfor (const file of files) {\n\t\t\tconst absPath = `${currentParent}/${file}`;\n\t\t\tif (exceptPaths.includes(absPath.substring(root.length + 1))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst isDir = await php.isDir(absPath);\n\t\t\tif (isDir) {\n\t\t\t\tstack.push(absPath);\n\t\t\t} else {\n\t\t\t\tyield new StreamedFile(\n\t\t\t\t\tstreamReadFileFromPHP(php, absPath),\n\t\t\t\t\trelativePaths\n\t\t\t\t\t\t? joinPaths(\n\t\t\t\t\t\t\t\tpathPrefix || '',\n\t\t\t\t\t\t\t\tabsPath.substring(root.length + 1)\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: absPath\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n","import { dirname, joinPaths } from '@php-wasm/util';\nimport type { UniversalPHP } from './universal-php';\n\n/**\n * Writes streamed files to PHP filesystem.\n */\nexport function writeFilesStreamToPhp(php: UniversalPHP, root: string) {\n\treturn new WritableStream({\n\t\tasync write(file: File) {\n\t\t\tconst filePath = joinPaths(root, file.name);\n\t\t\tif (file.type === 'directory') {\n\t\t\t\tawait php.mkdir(filePath);\n\t\t\t} else {\n\t\t\t\tawait php.mkdir(dirname(filePath));\n\t\t\t\tawait php.writeFile(\n\t\t\t\t\tfilePath,\n\t\t\t\t\tnew Uint8Array(await file.arrayBuffer())\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t});\n}\n","import { AcquireTimeoutError, Semaphore } from '@php-wasm/util';\nimport type { PHP } from './php';\n\nexport type PHPFactoryOptions = {\n\tisPrimary: boolean;\n};\n\nexport type PHPFactory = (options: PHPFactoryOptions) => Promise<PHP>;\n\nexport interface ProcessManagerOptions {\n\t/**\n\t * The maximum number of PHP instances that can exist at\n\t * the same time.\n\t */\n\tmaxPhpInstances?: number;\n\t/**\n\t * The number of milliseconds to wait for a PHP instance when\n\t * we have reached the maximum number of PHP instances and\n\t * cannot spawn a new one. If the timeout is reached, we assume\n\t * all the PHP instances are deadlocked and a throw MaxPhpInstancesError.\n\t *\n\t * Default: 5000\n\t */\n\ttimeout?: number;\n\t/**\n\t * The primary PHP instance that's never killed. This instance\n\t * contains the reference filesystem used by all other PHP instances.\n\t */\n\tprimaryPhp?: PHP;\n\t/**\n\t * A factory function used for spawning new PHP instances.\n\t */\n\tphpFactory?: PHPFactory;\n}\n\nexport interface SpawnedPHP {\n\tphp: PHP;\n\treap: () => void;\n}\n\nexport class MaxPhpInstancesError extends Error {\n\tconstructor(limit: number) {\n\t\tsuper(\n\t\t\t`Requested more concurrent PHP instances than the limit (${limit}).`\n\t\t);\n\t\tthis.name = this.constructor.name;\n\t}\n}\n\n/**\n * A PHP Process manager.\n *\n * Maintains:\n * * A single \"primary\" PHP instance that's never killed – it contains the\n *   reference filesystem used by all other PHP instances.\n * * A pool of disposable PHP instances that are spawned to handle a single\n *   request and reaped immediately after.\n *\n * When a new request comes in, PHPProcessManager yields the idle instance to\n * handle it, and immediately starts initializing a new idle instance. In other\n * words, for n concurrent requests, there are at most n+1 PHP instances\n * running at the same time.\n *\n * A slight nuance is that the first idle instance is not initialized until the\n * first concurrent request comes in. This is because many use-cases won't\n * involve parallel requests and, for those, we can avoid eagerly spinning up a\n * second PHP instance.\n *\n * This strategy is inspired by Cowboy, an Erlang HTTP server. Handling a\n * single extra request can happen immediately, while handling multiple extra\n * requests requires extra time to spin up a few PHP instances. This is a more\n * resource-friendly tradeoff than keeping 5 idle instances at all times.\n */\nexport class PHPProcessManager implements AsyncDisposable {\n\tprivate primaryPhp?: PHP;\n\tprivate primaryPhpPromise?: Promise<SpawnedPHP>;\n\tprivate primaryIdle = true;\n\tprivate nextInstance: Promise<SpawnedPHP> | null = null;\n\t/**\n\t * All spawned PHP instances, including the primary PHP instance.\n\t * Used for bookkeeping and reaping all instances on dispose.\n\t */\n\tprivate allInstances: Promise<SpawnedPHP>[] = [];\n\tprivate phpFactory?: PHPFactory;\n\tprivate maxPhpInstances: number;\n\tprivate semaphore: Semaphore;\n\n\tconstructor(options?: ProcessManagerOptions) {\n\t\tthis.maxPhpInstances = options?.maxPhpInstances ?? 5;\n\t\tthis.phpFactory = options?.phpFactory;\n\t\tthis.primaryPhp = options?.primaryPhp;\n\t\tthis.semaphore = new Semaphore({\n\t\t\tconcurrency: this.maxPhpInstances,\n\t\t\t/**\n\t\t\t * Wait up to 5 seconds for resources to become available\n\t\t\t * before assuming that all the PHP instances are deadlocked.\n\t\t\t */\n\t\t\ttimeout: options?.timeout || 5000,\n\t\t});\n\t}\n\n\t/**\n\t * Get the primary PHP instance.\n\t *\n\t * If the primary PHP instance is not set, it will be spawned\n\t * using the provided phpFactory.\n\t *\n\t * @throws {Error} when called twice before the first call is resolved.\n\t */\n\tasync getPrimaryPhp() {\n\t\tif (!this.phpFactory && !this.primaryPhp) {\n\t\t\tthrow new Error(\n\t\t\t\t'phpFactory or primaryPhp must be set before calling getPrimaryPhp().'\n\t\t\t);\n\t\t} else if (!this.primaryPhp) {\n\t\t\tif (!this.primaryPhpPromise) {\n\t\t\t\tthis.primaryPhpPromise = this.spawn({ isPrimary: true });\n\t\t\t}\n\t\t\tthis.primaryPhp = (await this.primaryPhpPromise).php;\n\t\t\tthis.primaryPhpPromise = undefined;\n\t\t}\n\t\treturn this.primaryPhp!;\n\t}\n\n\t/**\n\t * Get a PHP instance.\n\t *\n\t * It could be either the primary PHP instance, an idle disposable PHP\n\t * instance, or a newly spawned PHP instance – depending on the resource\n\t * availability.\n\t *\n\t * @param considerPrimary - Whether to consider the primary PHP instance.\n\t *                          It matters because PHP.cli() sets the SAPI to CLI and\n\t *                          kills the entire process after it finishes running,\n\t *                          making the primary PHP instance non-reusable for\n\t *                          subsequent .run() calls. This is fine for one-off\n\t *                          child PHP instances, but not for the primary PHP\n\t *                          that's meant to continue working for the entire duration\n\t *                          of the ProcessManager lifetime. Therefore, we don't\n\t *                          consider the primary PHP instance by default unless\n\t *                          the caller explicitly requests it.\n\t *\n\t * @throws {MaxPhpInstancesError} when the maximum number of PHP instances is reached\n\t *                                and the waiting timeout is exceeded.\n\t */\n\tasync acquirePHPInstance({\n\t\tconsiderPrimary = true,\n\t}: {\n\t\tconsiderPrimary?: boolean;\n\t} = {}): Promise<SpawnedPHP> {\n\t\t/**\n\t\t * First and foremost, make sure we have the primary PHP instance in place.\n\t\t * We don't acquire it yet. We just make sure it exists.\n\t\t *\n\t\t * @TODO: Decouple Filesystem from PHP to get rid of the notion of a primary PHP instance.\n\t\t * @see https://github.com/WordPress/wordpress-playground/issues/2269\n\t\t */\n\t\tif (!this.primaryPhp) {\n\t\t\tawait this.getPrimaryPhp();\n\t\t}\n\n\t\tif (this.primaryIdle && considerPrimary) {\n\t\t\tthis.primaryIdle = false;\n\t\t\treturn {\n\t\t\t\tphp: await this.getPrimaryPhp(),\n\t\t\t\treap: () => {\n\t\t\t\t\tthis.primaryIdle = true;\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * nextInstance is null:\n\t\t *\n\t\t * * Before the first concurrent getInstance() call\n\t\t * * When the last getInstance() call did not have enough\n\t\t *   budget left to optimistically start spawning the next\n\t\t *   instance.\n\t\t */\n\t\tconst spawnedPhp =\n\t\t\tthis.nextInstance || this.spawn({ isPrimary: false });\n\n\t\t/**\n\t\t * Start spawning the next instance if there's still room. We can't\n\t\t * just always spawn the next instance because spawn() can fail\n\t\t * asynchronously and then we'll get an unhandled promise rejection.\n\t\t */\n\t\tif (this.semaphore.remaining > 0) {\n\t\t\tthis.nextInstance = this.spawn({ isPrimary: false });\n\t\t} else {\n\t\t\tthis.nextInstance = null;\n\t\t}\n\t\treturn await spawnedPhp;\n\t}\n\n\t/**\n\t * Initiated spawning of a new PHP instance.\n\t * This function is synchronous on purpose – it needs to synchronously\n\t * add the spawn promise to the allInstances array without waiting\n\t * for PHP to spawn.\n\t */\n\tprivate spawn(factoryArgs: PHPFactoryOptions): Promise<SpawnedPHP> {\n\t\tif (factoryArgs.isPrimary) {\n\t\t\tif (this.primaryPhpPromise && !this.primaryPhp) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Requested spawning a primary PHP instance when another primary instance already started spawning.'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tconst spawned = this.doSpawn(factoryArgs);\n\t\tthis.allInstances.push(spawned);\n\t\tconst pop = () => {\n\t\t\tthis.allInstances = this.allInstances.filter(\n\t\t\t\t(instance) => instance !== spawned\n\t\t\t);\n\t\t};\n\t\treturn spawned\n\t\t\t.catch((rejection) => {\n\t\t\t\tpop();\n\t\t\t\tthrow rejection;\n\t\t\t})\n\t\t\t.then((result) => ({\n\t\t\t\t...result,\n\t\t\t\treap: () => {\n\t\t\t\t\tpop();\n\t\t\t\t\tresult.reap();\n\t\t\t\t},\n\t\t\t}));\n\t}\n\n\t/**\n\t * Actually acquires the lock and spawns a new PHP instance.\n\t */\n\tprivate async doSpawn(factoryArgs: PHPFactoryOptions): Promise<SpawnedPHP> {\n\t\tlet release: () => void;\n\t\ttry {\n\t\t\trelease = await this.semaphore.acquire();\n\t\t} catch (error) {\n\t\t\tif (error instanceof AcquireTimeoutError) {\n\t\t\t\tthrow new MaxPhpInstancesError(this.maxPhpInstances);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t\ttry {\n\t\t\tconst php = await this.phpFactory!(factoryArgs);\n\t\t\treturn {\n\t\t\t\tphp,\n\t\t\t\treap() {\n\t\t\t\t\tphp.exit();\n\t\t\t\t\trelease();\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\trelease();\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync [Symbol.asyncDispose]() {\n\t\tif (this.primaryPhp) {\n\t\t\tthis.primaryPhp.exit();\n\t\t}\n\t\tawait Promise.all(\n\t\t\tthis.allInstances.map((instance) =>\n\t\t\t\tinstance.then(({ reap }) => reap())\n\t\t\t)\n\t\t);\n\t}\n}\n","export const SupportedPHPVersions = [\n\t'8.4',\n\t'8.3',\n\t'8.2',\n\t'8.1',\n\t'8.0',\n\t'7.4',\n\t'7.3',\n\t'7.2',\n] as const;\nexport const LatestSupportedPHPVersion = SupportedPHPVersions[0];\nexport const SupportedPHPVersionsList = SupportedPHPVersions as any as string[];\nexport type SupportedPHPVersion = (typeof SupportedPHPVersions)[number];\n","/**\n * The default base used to convert a path into the URL object.\n */\nexport const DEFAULT_BASE_URL = 'http://example.com';\n\n/**\n * Returns a string representing the path, query, and\n * fragment of the given URL.\n *\n * @example\n * ```js\n * const url = new URL('http://example.com/foo/bar?baz=qux#quux');\n * toRelativeUrl(url); // '/foo/bar?baz=qux#quux'\n * ```\n *\n * @param  url The URL.\n * @returns The path, query, and fragment.\n */\nexport function toRelativeUrl(url: URL): string {\n\treturn url.toString().substring(url.origin.length);\n}\n\n/**\n * Removes the given prefix from the given path.\n *\n * @example\n * ```js\n * removePathPrefix('/foo/bar', '/foo'); // '/bar'\n * removePathPrefix('/bar', '/foo'); // '/bar'\n * ```\n *\n * @param  path   The path to remove the prefix from.\n * @param  prefix The prefix to remove.\n * @returns Path with the prefix removed.\n */\nexport function removePathPrefix(path: string, prefix: string): string {\n\tif (!prefix || !path.startsWith(prefix)) {\n\t\treturn path;\n\t}\n\treturn path.substring(prefix.length);\n}\n\n/**\n * Ensures the given path has the given prefix.\n *\n * @example\n * ```js\n * ensurePathPrefix('/bar', '/foo'); // '/foo/bar'\n * ensurePathPrefix('/foo/bar', '/foo'); // '/foo/bar'\n * ```\n *\n * @param  path\n * @param  prefix\n * @returns Path with the prefix added.\n */\nexport function ensurePathPrefix(path: string, prefix: string): string {\n\tif (!prefix || path.startsWith(prefix)) {\n\t\treturn path;\n\t}\n\treturn prefix + path;\n}\n","/**\n * Encodes a multipart/form-data request body.\n *\n * @param   data - The form data to encode.\n * @returns The encoded body and a correctly formatted content type header.\n */\nexport async function encodeAsMultipart(\n\tdata: Record<string, string | Uint8Array | File>\n) {\n\tconst boundary = `----${Math.random().toString(36).slice(2)}`;\n\tconst contentType = `multipart/form-data; boundary=${boundary}`;\n\n\tconst textEncoder = new TextEncoder();\n\tconst parts: (string | Uint8Array)[] = [];\n\tfor (const [name, value] of Object.entries(data)) {\n\t\tparts.push(`--${boundary}\\r\\n`);\n\t\tparts.push(`Content-Disposition: form-data; name=\"${name}\"`);\n\t\tif (value instanceof File) {\n\t\t\tparts.push(`; filename=\"${value.name}\"`);\n\t\t}\n\t\tparts.push(`\\r\\n`);\n\t\tif (value instanceof File) {\n\t\t\tparts.push(`Content-Type: application/octet-stream`);\n\t\t\tparts.push(`\\r\\n`);\n\t\t}\n\t\tparts.push(`\\r\\n`);\n\t\tif (value instanceof File) {\n\t\t\tparts.push(await fileToUint8Array(value));\n\t\t} else {\n\t\t\tparts.push(value);\n\t\t}\n\t\tparts.push(`\\r\\n`);\n\t}\n\tparts.push(`--${boundary}--\\r\\n`);\n\n\tconst length = parts.reduce((acc, part) => acc + part.length, 0);\n\tconst bytes = new Uint8Array(length);\n\tlet offset = 0;\n\tfor (const part of parts) {\n\t\tbytes.set(\n\t\t\ttypeof part === 'string' ? textEncoder.encode(part) : part,\n\t\t\toffset\n\t\t);\n\t\toffset += part.length;\n\t}\n\treturn { bytes, contentType };\n}\n\nfunction fileToUint8Array(file: File): Promise<Uint8Array> {\n\t/**\n\t * @mbuella: Use File.arrayBuffer() to get a Uint8Array from a file, avoiding FileReader\n\t * which is browser-specific. This method is supported in major browsers and NodeJS/Deno runtimes.\n\t */\n\treturn file.arrayBuffer().then((fileBuffer) => new Uint8Array(fileBuffer));\n}\n","import { joinPaths } from '@php-wasm/util';\nimport {\n\tensurePathPrefix,\n\ttoRelativeUrl,\n\tremovePathPrefix,\n\tDEFAULT_BASE_URL,\n} from './urls';\nimport type { PHP, PHPExecutionFailureError } from './php';\nimport { normalizeHeaders } from './php';\nimport { PHPResponse } from './php-response';\nimport type { PHPRequest, PHPRunOptions } from './universal-php';\nimport { encodeAsMultipart } from './encode-as-multipart';\nimport type { PHPFactoryOptions, SpawnedPHP } from './php-process-manager';\nimport { MaxPhpInstancesError, PHPProcessManager } from './php-process-manager';\nimport { HttpCookieStore } from './http-cookie-store';\nimport mimeTypes from './mime-types.json';\n\nexport type RewriteRule = {\n\tmatch: RegExp;\n\treplacement: string;\n};\n\nexport type FileNotFoundToResponse = {\n\ttype: 'response';\n\tresponse: PHPResponse;\n};\nexport type FileNotFoundToInternalRedirect = {\n\ttype: 'internal-redirect';\n\turi: string;\n};\nexport type FileNotFoundTo404 = { type: '404' };\n\nexport type FileNotFoundAction =\n\t| FileNotFoundToResponse\n\t| FileNotFoundToInternalRedirect\n\t| FileNotFoundTo404;\n\nexport type FileNotFoundGetActionCallback = (\n\trelativePath: string\n) => FileNotFoundAction;\n\n/**\n * Interface for cookie storage implementations.\n * This allows different cookie handling strategies to be used with the PHP request handler.\n */\nexport interface CookieStore {\n\t/**\n\t * Processes and stores cookies from response headers\n\t * @param headers Response headers containing Set-Cookie directives\n\t */\n\trememberCookiesFromResponseHeaders(headers: Record<string, string[]>): void;\n\n\t/**\n\t * Gets the cookie header string for the next request\n\t * @returns Formatted cookie header string\n\t */\n\tgetCookieRequestHeader(): string;\n}\n\ninterface BaseConfiguration {\n\t/**\n\t * The directory in the PHP filesystem where the server will look\n\t * for the files to serve. Default: `/var/www`.\n\t */\n\tdocumentRoot?: string;\n\t/**\n\t * Request Handler URL. Used to populate $_SERVER details like HTTP_HOST.\n\t */\n\tabsoluteUrl?: string;\n\n\t/**\n\t * Rewrite rules\n\t */\n\trewriteRules?: RewriteRule[];\n\n\t/**\n\t * A callback that decides how to handle a file-not-found condition for a\n\t * given request URI.\n\t */\n\tgetFileNotFoundAction?: FileNotFoundGetActionCallback;\n}\n\nexport type PHPRequestHandlerFactoryArgs = PHPFactoryOptions & {\n\trequestHandler: PHPRequestHandler;\n};\n\nexport type PHPRequestHandlerConfiguration = BaseConfiguration &\n\t(\n\t\t| {\n\t\t\t\t/**\n\t\t\t\t * PHPProcessManager is required because the request handler needs\n\t\t\t\t * to make a decision for each request.\n\t\t\t\t *\n\t\t\t\t * Static assets are served using the primary PHP's filesystem, even\n\t\t\t\t * when serving 100 static files concurrently. No new PHP interpreter\n\t\t\t\t * is ever created as there's no need for it.\n\t\t\t\t *\n\t\t\t\t * Dynamic PHP requests, however, require grabbing an available PHP\n\t\t\t\t * interpreter, and that's where the PHPProcessManager comes in.\n\t\t\t\t */\n\t\t\t\tprocessManager: PHPProcessManager;\n\t\t  }\n\t\t| {\n\t\t\t\tphpFactory: (\n\t\t\t\t\trequestHandler: PHPRequestHandlerFactoryArgs\n\t\t\t\t) => Promise<PHP>;\n\t\t\t\t/**\n\t\t\t\t * The maximum number of PHP instances that can exist at\n\t\t\t\t * the same time.\n\t\t\t\t */\n\t\t\t\tmaxPhpInstances?: number;\n\t\t  }\n\t) & {\n\t\tcookieStore?: CookieStore | false;\n\t};\n\n/**\n * Handles HTTP requests using PHP runtime as a backend.\n *\n * @public\n * @example Use PHPRequestHandler implicitly with a new PHP instance:\n * ```js\n * import { PHP } from '@php-wasm/web';\n *\n * const php = await PHP.load( '7.4', {\n *     requestHandler: {\n *         // PHP FS path to serve the files from:\n *         documentRoot: '/www',\n *\n *         // Used to populate $_SERVER['SERVER_NAME'] etc.:\n *         absoluteUrl: 'http://127.0.0.1'\n *     }\n * } );\n *\n * php.mkdirTree('/www');\n * php.writeFile('/www/index.php', '<?php echo \"Hi from PHP!\"; ');\n *\n * const response = await php.request({ path: '/index.php' });\n * console.log(response.text);\n * // \"Hi from PHP!\"\n * ```\n *\n * @example Explicitly create a PHPRequestHandler instance and run a PHP script:\n * ```js\n * import {\n *   loadPHPRuntime,\n *   PHP,\n *   PHPRequestHandler,\n *   getPHPLoaderModule,\n * } from '@php-wasm/web';\n *\n * const runtime = await loadPHPRuntime( await getPHPLoaderModule('7.4') );\n * const php = new PHP( runtime );\n *\n * php.mkdirTree('/www');\n * php.writeFile('/www/index.php', '<?php echo \"Hi from PHP!\"; ');\n *\n * const server = new PHPRequestHandler(php, {\n *     // PHP FS path to serve the files from:\n *     documentRoot: '/www',\n *\n *     // Used to populate $_SERVER['SERVER_NAME'] etc.:\n *     absoluteUrl: 'http://127.0.0.1'\n * });\n *\n * const response = server.request({ path: '/index.php' });\n * console.log(response.text);\n * // \"Hi from PHP!\"\n * ```\n */\nexport class PHPRequestHandler implements AsyncDisposable {\n\t#DOCROOT: string;\n\t#PROTOCOL: string;\n\t#HOSTNAME: string;\n\t#PORT: number;\n\t#HOST: string;\n\t#PATHNAME: string;\n\t#ABSOLUTE_URL: string;\n\t#cookieStore: CookieStore | false;\n\trewriteRules: RewriteRule[];\n\tprocessManager: PHPProcessManager;\n\tgetFileNotFoundAction: FileNotFoundGetActionCallback;\n\n\t/**\n\t * The request handler needs to decide whether to serve a static asset or\n\t * run the PHP interpreter. For static assets it should just reuse the primary\n\t * PHP even if there's 50 concurrent requests to serve. However, for\n\t * dynamic PHP requests, it needs to grab an available interpreter.\n\t * Therefore, it cannot just accept PHP as an argument as serving requests\n\t * requires access to ProcessManager.\n\t *\n\t * @param  php    - The PHP instance.\n\t * @param  config - Request Handler configuration.\n\t */\n\tconstructor(config: PHPRequestHandlerConfiguration) {\n\t\tconst {\n\t\t\tdocumentRoot = '/www/',\n\t\t\tabsoluteUrl = typeof location === 'object'\n\t\t\t\t? location.href\n\t\t\t\t: DEFAULT_BASE_URL,\n\t\t\trewriteRules = [],\n\t\t\tgetFileNotFoundAction = () => ({ type: '404' }),\n\t\t} = config;\n\n\t\tif ('processManager' in config) {\n\t\t\tthis.processManager = config.processManager;\n\t\t} else {\n\t\t\tthis.processManager = new PHPProcessManager({\n\t\t\t\tphpFactory: async (info) => {\n\t\t\t\t\tconst php = await config.phpFactory!({\n\t\t\t\t\t\t...info,\n\t\t\t\t\t\trequestHandler: this,\n\t\t\t\t\t});\n\n\t\t\t\t\t// Always set managed PHP's cwd to the document root.\n\t\t\t\t\tif (!php.isDir(documentRoot)) {\n\t\t\t\t\t\tphp.mkdir(documentRoot);\n\t\t\t\t\t}\n\t\t\t\t\tphp.chdir(documentRoot);\n\n\t\t\t\t\t// @TODO: Decouple PHP and request handler\n\t\t\t\t\t(php as any).requestHandler = this;\n\t\t\t\t\treturn php;\n\t\t\t\t},\n\t\t\t\tmaxPhpInstances: config.maxPhpInstances,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * By default, config.cookieStore is undefined, so we use the\n\t\t * HttpCookieStore implementation, otherwise we use the one\n\t\t * provided in the config.\n\t\t *\n\t\t * By explicitly checking for `undefined` we allow the user to pass\n\t\t * `null` as config.cookieStore and disable the cookie store.\n\t\t */\n\t\tthis.#cookieStore =\n\t\t\tconfig.cookieStore === undefined\n\t\t\t\t? new HttpCookieStore()\n\t\t\t\t: config.cookieStore;\n\t\tthis.#DOCROOT = documentRoot;\n\n\t\tconst url = new URL(absoluteUrl);\n\t\tthis.#HOSTNAME = url.hostname;\n\t\tthis.#PORT = url.port\n\t\t\t? Number(url.port)\n\t\t\t: url.protocol === 'https:'\n\t\t\t? 443\n\t\t\t: 80;\n\t\tthis.#PROTOCOL = (url.protocol || '').replace(':', '');\n\t\tconst isNonStandardPort = this.#PORT !== 443 && this.#PORT !== 80;\n\t\tthis.#HOST = [\n\t\t\tthis.#HOSTNAME,\n\t\t\tisNonStandardPort ? `:${this.#PORT}` : '',\n\t\t].join('');\n\t\tthis.#PATHNAME = url.pathname.replace(/\\/+$/, '');\n\t\tthis.#ABSOLUTE_URL = [\n\t\t\t`${this.#PROTOCOL}://`,\n\t\t\tthis.#HOST,\n\t\t\tthis.#PATHNAME,\n\t\t].join('');\n\t\tthis.rewriteRules = rewriteRules;\n\t\tthis.getFileNotFoundAction = getFileNotFoundAction;\n\t}\n\n\tasync getPrimaryPhp() {\n\t\treturn await this.processManager.getPrimaryPhp();\n\t}\n\n\t/**\n\t * Converts a path to an absolute URL based at the PHPRequestHandler\n\t * root.\n\t *\n\t * @param  path The server path to convert to an absolute URL.\n\t * @returns The absolute URL.\n\t */\n\tpathToInternalUrl(path: string): string {\n\t\treturn `${this.absoluteUrl}${path}`;\n\t}\n\n\t/**\n\t * Converts an absolute URL based at the PHPRequestHandler to a relative path\n\t * without the server pathname and scope.\n\t *\n\t * @param  internalUrl An absolute URL based at the PHPRequestHandler root.\n\t * @returns The relative path.\n\t */\n\tinternalUrlToPath(internalUrl: string): string {\n\t\tconst url = new URL(internalUrl);\n\t\tif (url.pathname.startsWith(this.#PATHNAME)) {\n\t\t\turl.pathname = url.pathname.slice(this.#PATHNAME.length);\n\t\t}\n\t\treturn toRelativeUrl(url);\n\t}\n\n\t/**\n\t * The absolute URL of this PHPRequestHandler instance.\n\t */\n\tget absoluteUrl() {\n\t\treturn this.#ABSOLUTE_URL;\n\t}\n\n\t/**\n\t * The directory in the PHP filesystem where the server will look\n\t * for the files to serve. Default: `/var/www`.\n\t */\n\tget documentRoot() {\n\t\treturn this.#DOCROOT;\n\t}\n\n\t/**\n\t * Serves the request – either by serving a static file, or by\n\t * dispatching it to the PHP runtime.\n\t *\n\t * The request() method mode behaves like a web server and only works if\n\t * the PHP was initialized with a `requestHandler` option (which the online\n\t * version of WordPress Playground does by default).\n\t *\n\t * In the request mode, you pass an object containing the request information\n\t * (method, headers, body, etc.) and the path to the PHP file to run:\n\t *\n\t * ```ts\n\t * const php = PHP.load('7.4', {\n\t * \trequestHandler: {\n\t * \t\tdocumentRoot: \"/www\"\n\t * \t}\n\t * })\n\t * php.writeFile(\"/www/index.php\", `<?php echo file_get_contents(\"php://input\");`);\n\t * const result = await php.request({\n\t * \tmethod: \"GET\",\n\t * \theaders: {\n\t * \t\t\"Content-Type\": \"text/plain\"\n\t * \t},\n\t * \tbody: \"Hello world!\",\n\t * \tpath: \"/www/index.php\"\n\t * });\n\t * // result.text === \"Hello world!\"\n\t * ```\n\t *\n\t * The `request()` method cannot be used in conjunction with `cli()`.\n\t *\n\t * @example\n\t * ```js\n\t * const output = await php.request({\n\t * \tmethod: 'GET',\n\t * \turl: '/index.php',\n\t * \theaders: {\n\t * \t\t'X-foo': 'bar',\n\t * \t},\n\t * \tbody: {\n\t * \t\tfoo: 'bar',\n\t * \t},\n\t * });\n\t * console.log(output.stdout); // \"Hello world!\"\n\t * ```\n\t *\n\t * @param  request - PHP Request data.\n\t */\n\tasync request(request: PHPRequest): Promise<PHPResponse> {\n\t\tconst isAbsolute = URL.canParse(request.url);\n\t\tconst requestedUrl = new URL(\n\t\t\t// Remove the hash part of the URL as it's not meant for the server.\n\t\t\trequest.url.split('#')[0],\n\t\t\tisAbsolute ? undefined : DEFAULT_BASE_URL\n\t\t);\n\n\t\tconst normalizedRequestedPath = applyRewriteRules(\n\t\t\tremovePathPrefix(\n\t\t\t\tdecodeURIComponent(requestedUrl.pathname),\n\t\t\t\tthis.#PATHNAME\n\t\t\t),\n\t\t\tthis.rewriteRules\n\t\t);\n\n\t\tconst primaryPhp = await this.getPrimaryPhp();\n\n\t\tlet fsPath = joinPaths(this.#DOCROOT, normalizedRequestedPath);\n\n\t\tif (primaryPhp.isDir(fsPath)) {\n\t\t\t// Ensure directory URIs have a trailing slash. Otherwise,\n\t\t\t// relative URIs in index.php or index.html files are relative\n\t\t\t// to the next directory up.\n\t\t\t//\n\t\t\t// Example:\n\t\t\t// For an index page served for URI \"/settings\", we naturally expect\n\t\t\t// links to be relative to \"/settings\", but without the trailing\n\t\t\t// slash, a relative link \"edit.php\" resolves to \"/edit.php\"\n\t\t\t// rather than \"/settings/edit.php\".\n\t\t\t//\n\t\t\t// This treatment of relative links is correct behavior for the browser:\n\t\t\t// https://www.rfc-editor.org/rfc/rfc3986#section-5.2.3\n\t\t\t//\n\t\t\t// But user intent for `/settings/index.php` is that its relative\n\t\t\t// URIs are relative to `/settings/`. So we redirect to add a\n\t\t\t// trailing slash to directory URIs to meet this expecatation.\n\t\t\t//\n\t\t\t// This behavior is also necessary for WordPress to function properly.\n\t\t\t// Otherwise, when viewing the WP admin dashboard at `/wp-admin`,\n\t\t\t// links to other admin pages like `edit.php` will incorrectly\n\t\t\t// resolve to `/edit.php` rather than `/wp-admin/edit.php`.\n\t\t\tif (!fsPath.endsWith('/')) {\n\t\t\t\treturn new PHPResponse(\n\t\t\t\t\t301,\n\t\t\t\t\t{ Location: [`${requestedUrl.pathname}/`] },\n\t\t\t\t\tnew Uint8Array(0)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// We can only satisfy requests for directories with a default file\n\t\t\t// so let's first resolve to a default path when available.\n\t\t\tfor (const possibleIndexFile of ['index.php', 'index.html']) {\n\t\t\t\tconst possibleIndexPath = joinPaths(fsPath, possibleIndexFile);\n\t\t\t\tif (primaryPhp.isFile(possibleIndexPath)) {\n\t\t\t\t\tfsPath = possibleIndexPath;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!primaryPhp.isFile(fsPath)) {\n\t\t\tconst fileNotFoundAction = this.getFileNotFoundAction(\n\t\t\t\tnormalizedRequestedPath\n\t\t\t);\n\t\t\tswitch (fileNotFoundAction.type) {\n\t\t\t\tcase 'response':\n\t\t\t\t\treturn fileNotFoundAction.response;\n\t\t\t\tcase 'internal-redirect':\n\t\t\t\t\tfsPath = joinPaths(this.#DOCROOT, fileNotFoundAction.uri);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '404':\n\t\t\t\t\treturn PHPResponse.forHttpCode(404);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Unsupported file-not-found action type: ' +\n\t\t\t\t\t\t\t// Cast because TS asserts the remaining possibility is `never`\n\t\t\t\t\t\t\t`'${\n\t\t\t\t\t\t\t\t(fileNotFoundAction as FileNotFoundAction).type\n\t\t\t\t\t\t\t}'`\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// We need to confirm that the current target file exists because\n\t\t// file-not-found fallback actions may redirect to non-existent files.\n\t\tif (primaryPhp.isFile(fsPath)) {\n\t\t\tif (fsPath.endsWith('.php')) {\n\t\t\t\tconst effectiveRequest: PHPRequest = {\n\t\t\t\t\t...request,\n\t\t\t\t\t// Pass along URL with the #fragment filtered out\n\t\t\t\t\turl: requestedUrl.toString(),\n\t\t\t\t};\n\t\t\t\treturn this.#spawnPHPAndDispatchRequest(\n\t\t\t\t\teffectiveRequest,\n\t\t\t\t\tfsPath\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn this.#serveStaticFile(primaryPhp, fsPath);\n\t\t\t}\n\t\t} else {\n\t\t\treturn PHPResponse.forHttpCode(404);\n\t\t}\n\t}\n\n\t/**\n\t * Serves a static file from the PHP filesystem.\n\t *\n\t * @param  fsPath - Absolute path of the static file to serve.\n\t * @returns The response.\n\t */\n\t#serveStaticFile(php: PHP, fsPath: string): PHPResponse {\n\t\tconst arrayBuffer = php.readFileAsBuffer(fsPath);\n\t\treturn new PHPResponse(\n\t\t\t200,\n\t\t\t{\n\t\t\t\t'content-length': [`${arrayBuffer.byteLength}`],\n\t\t\t\t// @TODO: Infer the content-type from the arrayBuffer instead of the\n\t\t\t\t// file path. The code below won't return the correct mime-type if the\n\t\t\t\t// extension was tampered with.\n\t\t\t\t'content-type': [inferMimeType(fsPath)],\n\t\t\t\t'accept-ranges': ['bytes'],\n\t\t\t\t'cache-control': ['public, max-age=0'],\n\t\t\t},\n\t\t\tarrayBuffer\n\t\t);\n\t}\n\n\t/**\n\t * Spawns a new PHP instance and dispatches a request to it.\n\t */\n\tasync #spawnPHPAndDispatchRequest(\n\t\trequest: PHPRequest,\n\t\tscriptPath: string\n\t): Promise<PHPResponse> {\n\t\tlet spawnedPHP: SpawnedPHP | undefined = undefined;\n\t\ttry {\n\t\t\tspawnedPHP = await this.processManager!.acquirePHPInstance({\n\t\t\t\tconsiderPrimary: true,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tif (e instanceof MaxPhpInstancesError) {\n\t\t\t\treturn PHPResponse.forHttpCode(502);\n\t\t\t} else {\n\t\t\t\treturn PHPResponse.forHttpCode(500);\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\treturn await this.#dispatchToPHP(\n\t\t\t\tspawnedPHP.php,\n\t\t\t\trequest,\n\t\t\t\tscriptPath\n\t\t\t);\n\t\t} finally {\n\t\t\tspawnedPHP.reap();\n\t\t}\n\t}\n\n\t/**\n\t * Runs the requested PHP file with all the request and $_SERVER\n\t * superglobals populated.\n\t *\n\t * @param  request - The request.\n\t * @returns The response.\n\t */\n\tasync #dispatchToPHP(\n\t\tphp: PHP,\n\t\trequest: PHPRequest,\n\t\tscriptPath: string\n\t): Promise<PHPResponse> {\n\t\tlet preferredMethod: PHPRunOptions['method'] = 'GET';\n\n\t\tconst headers: Record<string, string> = {\n\t\t\thost: this.#HOST,\n\t\t\t...normalizeHeaders(request.headers || {}),\n\t\t};\n\t\tif (this.#cookieStore) {\n\t\t\theaders['cookie'] = this.#cookieStore.getCookieRequestHeader();\n\t\t}\n\n\t\tlet body = request.body;\n\t\tif (typeof body === 'object' && !(body instanceof Uint8Array)) {\n\t\t\tpreferredMethod = 'POST';\n\t\t\tconst { bytes, contentType } = await encodeAsMultipart(body);\n\t\t\tbody = bytes;\n\t\t\theaders['content-type'] = contentType;\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await php.run({\n\t\t\t\trelativeUri: ensurePathPrefix(\n\t\t\t\t\ttoRelativeUrl(new URL(request.url)),\n\t\t\t\t\tthis.#PATHNAME\n\t\t\t\t),\n\t\t\t\tprotocol: this.#PROTOCOL,\n\t\t\t\tmethod: request.method || preferredMethod,\n\t\t\t\t$_SERVER: {\n\t\t\t\t\tREMOTE_ADDR: '127.0.0.1',\n\t\t\t\t\tDOCUMENT_ROOT: this.#DOCROOT,\n\t\t\t\t\tHTTPS: this.#ABSOLUTE_URL.startsWith('https://')\n\t\t\t\t\t\t? 'on'\n\t\t\t\t\t\t: '',\n\t\t\t\t},\n\t\t\t\tbody,\n\t\t\t\tscriptPath,\n\t\t\t\theaders,\n\t\t\t});\n\t\t\tif (this.#cookieStore) {\n\t\t\t\tthis.#cookieStore.rememberCookiesFromResponseHeaders(\n\t\t\t\t\tresponse.headers\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tconst executionError = error as PHPExecutionFailureError;\n\t\t\tif (executionError?.response) {\n\t\t\t\treturn executionError.response;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync [Symbol.asyncDispose]() {\n\t\tawait this.processManager[Symbol.asyncDispose]();\n\t}\n}\n\n/**\n * Naively infer a file mime type from its path.\n *\n * @todo Infer the mime type based on the file contents.\n *       A naive function like this one can be inaccurate\n *       and potentially have negative security consequences.\n *\n * @param  path - The file path\n * @returns The inferred mime type.\n */\nfunction inferMimeType(path: string): string {\n\tconst extension = path.split('.').pop() as keyof typeof mimeTypes;\n\t// @TODO: Consider not sending a default mime type to let the browser guess\n\treturn mimeTypes[extension] || mimeTypes['_default'];\n}\n\n/**\n * Applies the given rewrite rules to the given path.\n *\n * @param  path  The path to apply the rules to.\n * @param  rules The rules to apply.\n * @returns The path with the rules applied.\n */\nexport function applyRewriteRules(path: string, rules: RewriteRule[]): string {\n\tfor (const rule of rules) {\n\t\tif (new RegExp(rule.match).test(path)) {\n\t\t\treturn path.replace(rule.match, rule.replacement);\n\t\t}\n\t}\n\treturn path;\n}\n","import type { PHP } from './php';\nimport type { PHPEvent } from './universal-php';\n\nexport interface RotateOptions {\n\tphp: PHP;\n\tcwd: string;\n\trecreateRuntime: () => Promise<number> | number;\n\tmaxRequests: number;\n}\n\n/**\n * Listens to PHP events and swaps the internal PHP Runtime for a fresh one\n * after a certain number of run() calls (which are responsible for handling\n * HTTP requests).\n *\n * Why? Because PHP and PHP extension have a memory leak. Each request leaves\n * the memory a bit more fragmented and with a bit less available space than\n * before. Eventually, new allocations start failing.\n *\n * Rotating the PHP instance may seem like a workaround, but it's actually\n * what PHP-FPM does natively:\n *\n * https://www.php.net/manual/en/install.fpm.configuration.php#pm.max-tasks\n *\n * @return cleanup function to restore\n */\nexport function rotatePHPRuntime({\n\tphp,\n\tcwd,\n\trecreateRuntime,\n\t/*\n\t * 400 is an arbitrary number that should trigger a rotation\n\t * way before the memory gets too fragmented. If it doesn't,\n\t * let's explore:\n\t * * Rotating based on an actual memory usage and\n\t *   fragmentation.\n\t * * Resetting HEAP to its initial value.\n\t */\n\tmaxRequests = 400,\n}: RotateOptions) {\n\tlet runtimeRequestCount = 0;\n\tasync function rotateRuntime() {\n\t\tconst release = await php.semaphore.acquire();\n\t\ttry {\n\t\t\tawait php.hotSwapPHPRuntime(await recreateRuntime(), cwd);\n\n\t\t\t// A new runtime has handled zero requests.\n\t\t\truntimeRequestCount = 0;\n\t\t} finally {\n\t\t\trelease();\n\t\t}\n\t}\n\n\tasync function rotateRuntimeAfterMaxRequests() {\n\t\tif (++runtimeRequestCount < maxRequests) {\n\t\t\treturn;\n\t\t}\n\t\tawait rotateRuntime();\n\t}\n\n\tasync function rotateRuntimeForPhpWasmError(event: PHPEvent) {\n\t\tif (event.type === 'request.error' && event.source === 'php-wasm') {\n\t\t\tawait rotateRuntime();\n\t\t}\n\t}\n\n\tphp.addEventListener('request.error', rotateRuntimeForPhpWasmError);\n\tphp.addEventListener('request.end', rotateRuntimeAfterMaxRequests);\n\n\treturn function () {\n\t\tphp.removeEventListener('request.error', rotateRuntimeForPhpWasmError);\n\t\tphp.removeEventListener('request.end', rotateRuntimeAfterMaxRequests);\n\t};\n}\n","import { dirname, joinPaths } from '@php-wasm/util';\nimport type { UniversalPHP } from './universal-php';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface FileTree\n\textends Record<string, Uint8Array | string | FileTree> {}\n\nexport interface WriteFilesOptions {\n\t/**\n\t * Whether to wipe out the contents of the\n\t * root directory before writing the new files.\n\t */\n\trmRoot?: boolean;\n}\n\n/**\n * Writes multiple files to a specified directory in the Playground\n * filesystem.\n *\n * @example ```ts\n * await writeFiles(php, '/test', {\n * \t'file.txt': 'file',\n * \t'sub/file.txt': 'file',\n * \t'sub1/sub2/file.txt': 'file',\n * });\n * ```\n *\n * @param php\n * @param root\n * @param newFiles\n * @param options\n */\nexport async function writeFiles(\n\tphp: UniversalPHP,\n\troot: string,\n\tnewFiles: FileTree,\n\t{ rmRoot = false }: WriteFilesOptions = {}\n) {\n\tif (rmRoot) {\n\t\tif (await php.isDir(root)) {\n\t\t\tawait php.rmdir(root, { recursive: true });\n\t\t}\n\t}\n\tfor (const [relativePath, content] of Object.entries(newFiles)) {\n\t\tconst filePath = joinPaths(root, relativePath);\n\t\tif (!(await php.fileExists(dirname(filePath)))) {\n\t\t\tawait php.mkdir(dirname(filePath));\n\t\t}\n\t\tif (content instanceof Uint8Array || typeof content === 'string') {\n\t\t\tawait php.writeFile(filePath, content);\n\t\t} else {\n\t\t\tawait writeFiles(php, filePath, content);\n\t\t}\n\t}\n}\n","import type { PHP } from './php';\n\n/**\n * Proxy specific paths to the parent's MEMFS instance.\n * This is useful for sharing the WordPress installation\n * between the parent and child processes.\n */\nexport function proxyFileSystem(\n\tsourceOfTruth: PHP,\n\treplica: PHP,\n\tpaths: string[]\n) {\n\t// We can't just import the symbol from the library because\n\t// Playground CLI is built as ESM and php-wasm-node is built as\n\t// CJS and the imported symbols will different in the production build.\n\tconst __private__symbol = Object.getOwnPropertySymbols(sourceOfTruth)[0];\n\tfor (const path of paths) {\n\t\tif (!replica.fileExists(path)) {\n\t\t\treplica.mkdir(path);\n\t\t}\n\t\tif (!sourceOfTruth.fileExists(path)) {\n\t\t\tsourceOfTruth.mkdir(path);\n\t\t}\n\t\t// @ts-ignore\n\t\treplica[__private__symbol].FS.mount(\n\t\t\t// @ts-ignore\n\t\t\treplica[__private__symbol].PROXYFS,\n\t\t\t{\n\t\t\t\troot: path,\n\t\t\t\t// @ts-ignore\n\t\t\t\tfs: sourceOfTruth[__private__symbol].FS,\n\t\t\t},\n\t\t\tpath\n\t\t);\n\t}\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction nodeEndpoint(nep) {\n    const listeners = new WeakMap();\n    return {\n        postMessage: nep.postMessage.bind(nep),\n        addEventListener: (_, eh) => {\n            const l = (data) => {\n                if (\"handleEvent\" in eh) {\n                    eh.handleEvent({ data });\n                }\n                else {\n                    eh({ data });\n                }\n            };\n            nep.on(\"message\", l);\n            listeners.set(eh, l);\n        },\n        removeEventListener: (_, eh) => {\n            const l = listeners.get(eh);\n            if (!l) {\n                return;\n            }\n            nep.off(\"message\", l);\n            listeners.delete(eh);\n        },\n        start: nep.start && nep.start.bind(nep),\n    };\n}\n\nexport { nodeEndpoint as default };\n//# sourceMappingURL=node-adapter.mjs.map\n","import type { PHPResponseData } from './php-response';\nimport { PHPResponse } from './php-response';\nimport type { Endpoint } from 'comlink';\nimport * as Comlink from 'comlink';\nimport type { NodeEndpoint } from 'comlink/dist/esm/node-adapter';\nimport nodeEndpoint from 'comlink/dist/esm/node-adapter';\n\nexport type WithAPIState = {\n\t/**\n\t * Resolves to true when the remote API is ready for\n\t * Comlink communication, but not necessarily fully initialized yet.\n\t */\n\tisConnected: () => Promise<void>;\n\t/**\n\t * Resolves to true when the remote API is declares it's\n\t * fully loaded and ready to be used.\n\t */\n\tisReady: () => Promise<void>;\n};\nexport type RemoteAPI<T> = Comlink.Remote<T> & WithAPIState;\n\nexport function consumeAPI<APIType>(\n\tremote: Worker | Window | NodeEndpoint,\n\tcontext: undefined | EventTarget = undefined\n): RemoteAPI<APIType> {\n\tsetupTransferHandlers();\n\n\tlet endpoint;\n\tconst appearsToBeNodeEnvironment = import.meta.url.startsWith('file://');\n\tif (appearsToBeNodeEnvironment) {\n\t\tendpoint = nodeEndpoint(remote as NodeEndpoint);\n\t} else {\n\t\tendpoint =\n\t\t\tremote instanceof Worker\n\t\t\t\t? remote\n\t\t\t\t: Comlink.windowEndpoint(remote as Window, context);\n\t}\n\n\t/**\n\t * This shouldn't be necessary, but Comlink doesn't seem to\n\t * handle the initial isConnected() call correctly unless it's\n\t * explicitly provided here. This is especially weird\n\t * since the only thing this proxy does is to call the\n\t * isConnected() method on the remote API.\n\t *\n\t * @TODO: Remove this workaround.\n\t */\n\tconst api = Comlink.wrap<APIType & WithAPIState>(endpoint);\n\tconst methods = proxyClone(api);\n\treturn new Proxy(methods, {\n\t\tget: (target, prop) => {\n\t\t\tif (prop === 'isConnected') {\n\t\t\t\treturn async () => {\n\t\t\t\t\t// Keep retrying until the remote API confirms it's connected.\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait runWithTimeout(api.isConnected(), 200);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t// Timeout exceeded, try again. We can't just use a single\n\t\t\t\t\t\t\t// `runWithTimeout` call because it won't reach the remote API\n\t\t\t\t\t\t\t// if it's not connected yet. Instead, we need to keep retrying\n\t\t\t\t\t\t\t// until the remote API is connected and registers a handler\n\t\t\t\t\t\t\t// for the `isConnected` method.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn (api as any)[prop];\n\t\t},\n\t}) as unknown as RemoteAPI<APIType>;\n}\n\nasync function runWithTimeout<T>(\n\tpromise: Promise<T>,\n\ttimeout: number\n): Promise<T> {\n\treturn new Promise<T>((resolve, reject) => {\n\t\tsetTimeout(reject, timeout);\n\t\tpromise.then(resolve);\n\t});\n}\n\nexport type PublicAPI<Methods, PipedAPI = unknown> = RemoteAPI<\n\tMethods & PipedAPI\n>;\nexport function exposeAPI<Methods, PipedAPI>(\n\tapiMethods?: Methods,\n\tpipedApi?: PipedAPI,\n\ttargetWorker?: NodeEndpoint\n): [() => void, (e: Error) => void, PublicAPI<Methods, PipedAPI>] {\n\tsetupTransferHandlers();\n\n\tconst connected = Promise.resolve();\n\n\tlet setReady: any;\n\tlet setFailed: any;\n\tconst ready = new Promise((resolve, reject) => {\n\t\tsetReady = resolve;\n\t\tsetFailed = reject;\n\t});\n\n\tconst methods = proxyClone(apiMethods);\n\tconst exposedApi = new Proxy(methods, {\n\t\tget: (target, prop) => {\n\t\t\tif (prop === 'isConnected') {\n\t\t\t\treturn () => connected;\n\t\t\t} else if (prop === 'isReady') {\n\t\t\t\treturn () => ready;\n\t\t\t} else if (prop in target) {\n\t\t\t\treturn target[prop];\n\t\t\t}\n\t\t\treturn (pipedApi as any)?.[prop];\n\t\t},\n\t}) as unknown as PublicAPI<Methods, PipedAPI>;\n\n\tlet endpoint: Endpoint | undefined;\n\tif (targetWorker) {\n\t\t// NOTE: If there are other target types, we could expand this later,\n\t\t// but for now, we only need support for NodeEndpoints.\n\t\tendpoint = nodeEndpoint(targetWorker);\n\t} else {\n\t\tendpoint =\n\t\t\ttypeof window !== 'undefined'\n\t\t\t\t? Comlink.windowEndpoint(self.parent)\n\t\t\t\t: undefined;\n\t}\n\n\tComlink.expose(exposedApi, endpoint);\n\n\treturn [setReady, setFailed, exposedApi];\n}\n\nlet isTransferHandlersSetup = false;\nfunction setupTransferHandlers() {\n\tif (isTransferHandlersSetup) {\n\t\treturn;\n\t}\n\tisTransferHandlersSetup = true;\n\tComlink.transferHandlers.set('EVENT', {\n\t\tcanHandle: (obj): obj is CustomEvent => obj instanceof CustomEvent,\n\t\tserialize: (ev: CustomEvent) => {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tdetail: ev.detail,\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t];\n\t\t},\n\t\tdeserialize: (obj) => obj,\n\t});\n\tComlink.transferHandlers.set('FUNCTION', {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n\t\tcanHandle: (obj: unknown): obj is Function => typeof obj === 'function',\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n\t\tserialize(obj: Function) {\n\t\t\tconst { port1, port2 } = new MessageChannel();\n\t\t\tComlink.expose(obj, port1);\n\t\t\treturn [port2, [port2]];\n\t\t},\n\t\tdeserialize(port: any) {\n\t\t\tport.start();\n\t\t\treturn Comlink.wrap(port);\n\t\t},\n\t});\n\tComlink.transferHandlers.set('PHPResponse', {\n\t\tcanHandle: (obj: unknown): obj is PHPResponseData =>\n\t\t\ttypeof obj === 'object' &&\n\t\t\tobj !== null &&\n\t\t\t'headers' in obj &&\n\t\t\t'bytes' in obj &&\n\t\t\t'errors' in obj &&\n\t\t\t'exitCode' in obj &&\n\t\t\t'httpStatusCode' in obj,\n\t\tserialize(obj: PHPResponse): [PHPResponseData, Transferable[]] {\n\t\t\treturn [obj.toRawData(), []];\n\t\t},\n\t\tdeserialize(responseData: PHPResponseData): PHPResponse {\n\t\t\treturn PHPResponse.fromRawData(responseData);\n\t\t},\n\t});\n\t// Augment Comlink's throw handler to include Error the response and source\n\t// information in the serialized error object. BasePHP may throw\n\t// PHPExecutionFailureError which includes those information and we'll want to\n\t// display them for the user.\n\tconst throwHandler = Comlink.transferHandlers.get('throw')!;\n\tconst originalSerialize = throwHandler?.serialize;\n\tthrowHandler.serialize = ({ value }: any) => {\n\t\tconst serialized = originalSerialize({ value }) as any;\n\t\tif (value.response) {\n\t\t\tserialized[0].value.response = value.response;\n\t\t}\n\t\tif (value.source) {\n\t\t\tserialized[0].value.source = value.source;\n\t\t}\n\t\treturn serialized;\n\t};\n}\n\nfunction proxyClone(object: any): any {\n\treturn new Proxy(object, {\n\t\tget(target, prop) {\n\t\t\tswitch (typeof target[prop]) {\n\t\t\t\tcase 'function':\n\t\t\t\t\treturn (...args: any[]) => target[prop](...args);\n\t\t\t\tcase 'object':\n\t\t\t\t\tif (target[prop] === null) {\n\t\t\t\t\t\treturn target[prop];\n\t\t\t\t\t}\n\t\t\t\t\treturn proxyClone(target[prop]);\n\t\t\t\tcase 'undefined':\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn target[prop];\n\t\t\t\tdefault:\n\t\t\t\t\treturn Comlink.proxy(target[prop]);\n\t\t\t}\n\t\t},\n\t});\n}\n"],"names":["e","errno","messagePrefix","value","args","errmsg","path","formattedPrefix","FS","data","fromPath","toPath","fromMount","toMount","options","file","filePath","files","name","prepend","target","link","fromNode","filenames","filename","requestHandler","monitor","php","internalUrl","callback","_a","request","reap","newName","listener","key","eventType","headers","stdout","stderr","exitCode","statusCode","result","headersStream","headersText","headersData","line","colonIndex","headerName","headerValue","stream","reader","text","done","httpStatusCode","body","errors","streamedResponse","phpLoaderModule","phpModuleArgs","phpReady","resolvePHP","rejectPHP","PHPRuntime","reason","id","code","methods","promise","resolve","reject","type","runtime","original","clearMessage","event","crypticError","asyncifyStack","betterMessage","uniqueFunctions","lastError","fn","message","stack","names","parts","isWasm","response","source","PHPRuntimeId","__privateAdd","_PHP_instances","_sapiName","_webSapiInitialized","_wasmErrorsTarget","_eventListeners","_messageListeners","_mounts","__privateGet","listeners","__privateSet","l","runtimeId","returnData","syncResponse","error","release","heapBodyPointer","streamedResponsePromise","__privateMethod","executeWithErrorHandling_fn","initWebRuntime_fn","setRelativeRequestUri_fn","setRequestMethod_fn","requestHeaders","host","port","inferPortFromHostAndProtocol_fn","setRequestHost_fn","setRequestPort_fn","setRequestHeaders_fn","setRequestBody_fn","setScriptPath_fn","$_SERVER","prepareServerEntries_fn","setServerGlobalEntry_fn","env","setEnv_fn","consts","cwd","oldFS","mountHandlers","vfsPath","mount","mountHandler","virtualFSPath","unmountCallback","mountObject","argv","arg","shouldSkip","defaults","HTTP_prefix","uri","queryString","protocol","method","size","contentLength","executionFn","emscriptenModule","chunk","streamsClosed","headersClosed","closeHeadersStream","errorListener","exitCodePromise","_","rethrown","err","normalized","oldNode","controllerResolve","controllerPromise","controller","entries","ini","phpIniValues","iniBefore","setCookie","equalsIndex","cookiesArray","buffer","root","relativePaths","pathPrefix","exceptPaths","currentParent","absPath","limit","considerPrimary","spawnedPhp","factoryArgs","spawned","pop","instance","rejection","url","prefix","boundary","contentType","textEncoder","length","acc","part","bytes","offset","fileBuffer","config","_PHPRequestHandler_instances","_DOCROOT","_PROTOCOL","_HOSTNAME","_PORT","_HOST","_PATHNAME","_ABSOLUTE_URL","_cookieStore","documentRoot","absoluteUrl","rewriteRules","getFileNotFoundAction","info","isNonStandardPort","isAbsolute","requestedUrl","normalizedRequestedPath","primaryPhp","fsPath","possibleIndexFile","possibleIndexPath","fileNotFoundAction","effectiveRequest","spawnPHPAndDispatchRequest_fn","serveStaticFile_fn","arrayBuffer","scriptPath","spawnedPHP","dispatchToPHP_fn","preferredMethod","executionError","extension","rules","rule","recreateRuntime","maxRequests","runtimeRequestCount","rotateRuntime","rotateRuntimeAfterMaxRequests","rotateRuntimeForPhpWasmError","newFiles","rmRoot","relativePath","content","sourceOfTruth","replica","paths","__private__symbol","nep","eh","remote","context","endpoint","api","prop","timeout","apiMethods","pipedApi","targetWorker","connected","setReady","setFailed","ready","exposedApi","obj","ev","port1","port2","responseData","throwHandler","originalSerialize","serialized","object"],"mappings":"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","x_google_ignoreList":[22]}