"use strict";
const {
  __export,
  __toESM,
  __toCommonJS
} = require('./esblib.cjs');


// src/main/ts/util.ts
var util_exports = {};
__export(util_exports, {
  asArray: () => asArray,
  existsSync: () => import_node_fs.existsSync,
  extToGlob: () => extToGlob,
  glob: () => import_fast_glob.default,
  omitUndefinedKeys: () => omitUndefinedKeys,
  read: () => read,
  readJson: () => readJson,
  remove: () => remove,
  resolveTsConfig: () => resolveTsConfig,
  unixify: () => unixify,
  write: () => write
});
module.exports = __toCommonJS(util_exports);
var import_fs_extra = __toESM(require("fs-extra"), 1);
var import_json5 = __toESM(require("json5"), 1);
var import_extends = require("@topoconfig/extends");
var import_fast_glob = __toESM(require("fast-glob"), 1);
var import_node_fs = require("node:fs");
var read = (file) => import_fs_extra.default.readFileSync(file, { encoding: "utf8" });
var write = (file, contents) => import_fs_extra.default.outputFileSync(file, contents, { encoding: "utf8" });
var readJson = (file) => import_json5.default.parse(read(file));
var asArray = (value) => value ? Array.isArray(value) ? value : [value] : [];
var remove = import_fs_extra.default.unlinkSync;
var unixify = (path) => path.replace(/\\/g, "/");
var resolveTsConfig = (file) => (0, import_extends.populateSync)(file, {
  parse({ contents, ext }) {
    if (ext === ".json")
      return import_json5.default.parse(contents);
    throw new Error(`Unsupported format: ${ext}`);
  },
  rules: {
    compilerOptions: "merge"
  }
});
var omitUndefinedKeys = (obj) => Object.fromEntries(Object.entries(obj).filter(([, value]) => value !== void 0));
var extToGlob = (ext) => `**/*.{${ext.map((e) => e.slice(1)).join(",")}}`;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  asArray,
  existsSync,
  extToGlob,
  glob,
  omitUndefinedKeys,
  read,
  readJson,
  remove,
  resolveTsConfig,
  unixify,
  write
});