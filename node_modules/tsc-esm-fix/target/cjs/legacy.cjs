"use strict";
const {
  __spreadValues,
  __spreadProps,
  __export,
  __toESM,
  __toCommonJS
} = require('./esblib.cjs');


// src/main/ts/legacy.ts
var legacy_exports = {};
__export(legacy_exports, {
  fixBlankFiles: () => fixBlankFiles2,
  fixContents: () => fixContents2,
  fixDefaultExport: () => fixDefaultExport2,
  fixDirnameVar: () => fixDirnameVar2,
  fixFilenameVar: () => fixFilenameVar2,
  fixModuleReferences: () => fixModuleReferences2,
  fixSourceMapRef: () => fixSourceMapRef2
});
module.exports = __toCommonJS(legacy_exports);

// src/main/ts/fixes/fix-blank-files.ts
var fixBlankFiles = (ctx) => {
  const { contents } = ctx;
  const _contents = contents.trim().length === 0 ? `
export {}
export default undefined
` : contents;
  return __spreadProps(__spreadValues({}, ctx), { contents: _contents });
};

// src/main/ts/fixes/fix-default-export.ts
var fixDefaultExport = (ctx) => {
  const { contents } = ctx;
  const _contents = contents.includes("export default") ? contents : `${contents}
export default undefined
`;
  return __spreadProps(__spreadValues({}, ctx), { contents: _contents });
};

// src/main/ts/fixes/fix-dirname-var.ts
var fixDirnameVar = (ctx) => {
  const { contents, isSource } = ctx;
  const _contents = contents.replace(
    /__dirname/g,
    `\`\${process.platform === 'win32' ? '' : '/'}\${/file:\\/{2,3}(.+)\\/[^/]/.exec(import.meta.url)${isSource ? "!" : ""}[1]}\``
    // eslint-disable-line
  );
  return __spreadProps(__spreadValues({}, ctx), { contents: _contents });
};
var fixFilenameVar = (ctx) => {
  const { contents, isSource } = ctx;
  const _contents = contents.replace(
    /__filename/g,
    `\`\${process.platform === 'win32' ? '' : '/'}\${/file:\\/{2,3}(.+)/.exec(import.meta.url)${isSource ? "!" : ""}[1]}\``
    // eslint-disable-line
  );
  return __spreadProps(__spreadValues({}, ctx), { contents: _contents });
};

// src/main/ts/fixes/fix-module-ref.ts
var import_node_path = __toESM(require("node:path"), 1);
var import_depseek = require("depseek");
var import_util = require("./util.cjs");
var import_options = require("./options.cjs");
var fixModuleReferences = (ctx) => {
  const { contents, filename, filenames, options: { cwd, jsExt }, ignore } = ctx;
  const _contents = (0, import_depseek.patchRefs)(contents, (value) => {
    const v = value.endsWith("/") ? value.slice(0, -1) : value;
    return (v.includes("/") || v === "." || v === "..") && !ignore.includes(v) ? resolveDependency(filename, v, filenames, cwd, jsExt) : value;
  });
  return __spreadProps(__spreadValues({}, ctx), { contents: _contents });
};
var resolveDependency = (parent, nested, files, cwd, jsExt = import_options.DEFAULT_FIX_OPTIONS.jsExt) => {
  const dir = import_node_path.default.dirname(parent);
  const nmdir = import_node_path.default.resolve(cwd, "node_modules");
  const bases = /^\..+\.[^./\\]+$/.test(nested) ? [nested, nested.replace(/\.[^./\\]+$/, "")] : [nested];
  const variants = jsExt.reduce((m, e) => {
    bases.forEach((v) => m.push(`${v}${e}`, `${v}/index${e}`));
    return m;
  }, []);
  return variants.find((f) => files.includes((0, import_util.unixify)(import_node_path.default.resolve(dir, f)))) || variants.find((f) => files.includes((0, import_util.unixify)(import_node_path.default.resolve(nmdir, f)))) || nested;
};

// src/main/ts/fixes/fix-sourcemap-ref.ts
var import_node_path2 = __toESM(require("node:path"), 1);
var fixSourceMapRef = (ctx) => {
  const { contents, originName, filename } = ctx;
  const _contents = originName === filename ? contents : contents.replace(
    `//# sourceMappingURL=${import_node_path2.default.basename(originName)}.map`,
    `//# sourceMappingURL=${import_node_path2.default.basename(filename)}.map`
  );
  return __spreadProps(__spreadValues({}, ctx), { contents: _contents });
};

// src/main/ts/fixes/index.ts
var fixContents = (ctx) => {
  const { options } = ctx;
  let _ctx = ctx;
  if (options.ext) _ctx = fixModuleReferences(_ctx);
  if (options.dirnameVar) _ctx = fixDirnameVar(_ctx);
  if (options.filenameVar) _ctx = fixFilenameVar(_ctx);
  if (options.fillBlank) _ctx = fixBlankFiles(_ctx);
  if (options.forceDefaultExport) _ctx = fixDefaultExport(_ctx);
  if (options.sourceMap) _ctx = fixSourceMapRef(_ctx);
  return _ctx;
};

// src/main/ts/legacy.ts
var import_options2 = require("./options.cjs");
var fixModuleReferences2 = (contents, filename, filenames, cwd, ignore) => fixModuleReferences({
  contents,
  filename,
  filenames,
  options: {
    cwd,
    tsExt: import_options2.DEFAULT_FIX_OPTIONS.tsExt,
    jsExt: import_options2.DEFAULT_FIX_OPTIONS.jsExt
  },
  ignore
}).contents;
var fixDirnameVar2 = (contents, isSource) => fixDirnameVar({ contents, isSource }).contents;
var fixFilenameVar2 = (contents, isSource) => fixFilenameVar({ contents, isSource }).contents;
var fixDefaultExport2 = (contents) => fixDefaultExport({ contents }).contents;
var fixBlankFiles2 = (contents) => fixBlankFiles({ contents }).contents;
var fixSourceMapRef2 = (contents, originName, filename) => fixSourceMapRef({ contents, originName, filename }).contents;
var fixContents2 = (contents, filename, filenames, options, originName = filename, isSource = false, ignore = []) => fixContents({ contents, filename, filenames, options, originName, isSource, ignore }).contents;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fixBlankFiles,
  fixContents,
  fixDefaultExport,
  fixDirnameVar,
  fixFilenameVar,
  fixModuleReferences,
  fixSourceMapRef
});