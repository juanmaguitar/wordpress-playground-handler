"use strict";
const {
  __export,
  __toESM,
  __toCommonJS,
  __async
} = require('./esblib.cjs');


// src/main/ts/finder.ts
var finder_exports = {};
__export(finder_exports, {
  getExportsEntries: () => getExportsEntries,
  getExternalModules: () => getExternalModules,
  getLocalModules: () => getLocalModules,
  getTsconfigTargets: () => getTsconfigTargets,
  parseConditional: () => parseConditional
});
module.exports = __toCommonJS(finder_exports);
var import_node_path = __toESM(require("node:path"), 1);
var import_util = require("./util.cjs");
var import_options = require("./options.cjs");
var getTsconfigTargets = (tsconfig, cwd) => (0, import_util.asArray)(tsconfig).reduce((targets, file) => {
  var _a, _b, _c, _d;
  const tsconfigJson = (0, import_util.resolveTsConfig)(import_node_path.default.resolve(cwd, file));
  const outDir = (_a = tsconfigJson == null ? void 0 : tsconfigJson.compilerOptions) == null ? void 0 : _a.outDir;
  const module2 = (_d = (_b = tsconfigJson == null ? void 0 : tsconfigJson.compilerOptions) == null ? void 0 : (_c = _b.module).toLowerCase) == null ? void 0 : _d.call(_c);
  if (outDir && module2.startsWith("es")) {
    targets.push(outDir);
  } else {
    console.warn("tsconfig should declare `outDir` and `module` type es6 or above");
  }
  return targets;
}, []);
var getLocalModules = (sources, targets, cwd, tsExt = import_options.DEFAULT_FIX_OPTIONS.tsExt) => (0, import_util.glob)(
  getPatterns(sources, targets, tsExt),
  {
    cwd,
    onlyFiles: true,
    absolute: true
  }
);
var getExternalModules = (_0, ..._1) => __async(void 0, [_0, ..._1], function* (cwd, jsExt = import_options.DEFAULT_FIX_OPTIONS.jsExt) {
  const allPackages = yield getExternalPackages(cwd);
  const allPackageNames = allPackages.map((p) => p.name);
  const exportedModules = (yield Promise.all(allPackages.map(getPackageEntryPoints))).flat();
  const anyModules = yield getAllModules(cwd, jsExt);
  return {
    exportedModules,
    anyModules,
    allPackageNames
  };
});
var getAllModules = (_0, ..._1) => __async(void 0, [_0, ..._1], function* (cwd, jsExt = import_options.DEFAULT_FIX_OPTIONS.jsExt) {
  return (0, import_util.glob)(
    [
      "!node_modules/.cache",
      "!node_modules/.bin",
      "!node_modules/**/node_modules",
      `node_modules/${(0, import_util.extToGlob)(jsExt)}`
    ],
    {
      cwd,
      onlyFiles: true,
      absolute: true
    }
  );
});
var getPatterns = (sources, targets, tsExt) => sources.length > 0 ? sources.map((src) => src.includes("*") ? src : `${src}/${(0, import_util.extToGlob)(tsExt)}`) : targets.map((target) => target.includes("*") ? target : `${target}/**/*.{js,d.ts}`);
var parseConditional = (e) => e ? typeof e === "string" ? [e] : Object.values(e).map(parseConditional).flat(2) : [];
var getExportsEntries = (exports2) => {
  if (!exports2) {
    return [];
  }
  if (Object.keys(exports2).some((k) => k.startsWith("."))) {
    const entries = Object.entries(exports2);
    return entries.map(([k, v]) => [k, parseConditional(v)]);
  }
  return [[".", parseConditional(exports2)]];
};
var getExternalPackages = (cwd) => __async(void 0, null, function* () {
  return (0, import_util.glob)(["node_modules/*/package.json", "node_modules/@*/*/package.json"], {
    cwd,
    onlyFiles: true,
    absolute: true
  }).then((files) => __async(void 0, null, function* () {
    return Promise.all(files.map((file) => __async(void 0, null, function* () {
      const manifest = yield (0, import_util.readJson)(file);
      const root = import_node_path.default.dirname(file);
      const exports2 = getExportsEntries(manifest.exports);
      return {
        name: manifest.name,
        type: manifest.type,
        main: manifest.main,
        manifest,
        file,
        root,
        exports: exports2
      };
    })));
  }));
});
var getPackageEntryPoints = (_0) => __async(void 0, [_0], function* ({ name, exports: exports2, root, main }) {
  return (yield Promise.all(exports2.map(([key, values]) => Promise.all(
    values.map(
      (value) => __async(void 0, null, function* () {
        return (yield (0, import_util.glob)(value, { cwd: root, onlyFiles: true, absolute: false })).map((file) => import_node_path.default.join(file).replace(
          resolvePrefix(".", value),
          resolvePrefix(name, key)
        ));
      })
    )
  )))).flat(2);
});
var resolvePrefix = (prefix, pattern) => {
  if (!pattern) {
    return prefix;
  }
  let _pattern = pattern;
  if (_pattern.includes("*")) {
    _pattern = _pattern.slice(0, _pattern.indexOf("*"));
    if (_pattern.includes("/")) {
      _pattern = _pattern.slice(0, _pattern.lastIndexOf("/"));
    }
  }
  return import_node_path.default.join(prefix, _pattern);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getExportsEntries,
  getExternalModules,
  getLocalModules,
  getTsconfigTargets,
  parseConditional
});