"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main/ts/cli.ts
var cli_exports = {};
__export(cli_exports, {
  parseArgv: () => parseArgv,
  run: () => run
});
module.exports = __toCommonJS(cli_exports);
var import_node_process = __toESM(require("node:process"), 1);
var import_node_url = __toESM(require("node:url"), 1);
var import_promises = __toESM(require("node:fs/promises"), 1);
var import_index = require("./index.cjs");
var import_meta = {};
var stdout = Symbol("stdout");
var parseArgv = (argv = import_node_process.default.argv.slice(2)) => {
  const [config, _opts = "{}", output = stdout] = argv;
  const opts = JSON.parse(_opts);
  return { config, opts, output };
};
var run = (_0, ..._1) => __async(void 0, [_0, ..._1], function* (argv, exit = import_node_process.default.exit) {
  try {
    const { config, opts, output } = parseArgv(argv);
    const result = JSON.stringify(yield (0, import_index.populate)(config, opts), null, 2);
    if (output === stdout) {
      import_node_process.default.stdout.write(result);
    } else {
      yield import_promises.default.writeFile(output, result, "utf-8");
    }
    exit(0);
  } catch (e) {
    console.error(e);
    exit(1);
  }
});
if (import_meta.url.startsWith("file:")) {
  const modulePath = import_node_url.default.fileURLToPath(import_meta.url);
  if (import_node_process.default.argv[1] === modulePath) {
    (() => __async(void 0, null, function* () {
      return run();
    }))();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  parseArgv,
  run
});
